// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/extensions/filters/udp/dns_filter/v3/dns_filter.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Extensions.Filters.Udp.DnsFilter.V3 {

  /// <summary>Holder for reflection information generated from envoy/extensions/filters/udp/dns_filter/v3/dns_filter.proto</summary>
  public static partial class DnsFilterReflection {

    #region Descriptor
    /// <summary>File descriptor for envoy/extensions/filters/udp/dns_filter/v3/dns_filter.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DnsFilterReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjtlbnZveS9leHRlbnNpb25zL2ZpbHRlcnMvdWRwL2Ruc19maWx0ZXIvdjMv",
            "ZG5zX2ZpbHRlci5wcm90bxIqZW52b3kuZXh0ZW5zaW9ucy5maWx0ZXJzLnVk",
            "cC5kbnNfZmlsdGVyLnYzGiJlbnZveS9jb25maWcvY29yZS92My9hZGRyZXNz",
            "LnByb3RvGh9lbnZveS9jb25maWcvY29yZS92My9iYXNlLnByb3RvGiNlbnZv",
            "eS9jb25maWcvY29yZS92My9yZXNvbHZlci5wcm90bxohZW52b3kvZGF0YS9k",
            "bnMvdjMvZG5zX3RhYmxlLnByb3RvGh5nb29nbGUvcHJvdG9idWYvZHVyYXRp",
            "b24ucHJvdG8aI2Vudm95L2Fubm90YXRpb25zL2RlcHJlY2F0aW9uLnByb3Rv",
            "Gh11ZHBhL2Fubm90YXRpb25zL3N0YXR1cy5wcm90bxoXdmFsaWRhdGUvdmFs",
            "aWRhdGUucHJvdG8itwUKD0Ruc0ZpbHRlckNvbmZpZxIcCgtzdGF0X3ByZWZp",
            "eBgBIAEoCUIH+kIEcgIQARJmCg1zZXJ2ZXJfY29uZmlnGAIgASgLMk8uZW52",
            "b3kuZXh0ZW5zaW9ucy5maWx0ZXJzLnVkcC5kbnNfZmlsdGVyLnYzLkRuc0Zp",
            "bHRlckNvbmZpZy5TZXJ2ZXJDb250ZXh0Q29uZmlnEmYKDWNsaWVudF9jb25m",
            "aWcYAyABKAsyTy5lbnZveS5leHRlbnNpb25zLmZpbHRlcnMudWRwLmRuc19m",
            "aWx0ZXIudjMuRG5zRmlsdGVyQ29uZmlnLkNsaWVudENvbnRleHRDb25maWca",
            "pAEKE1NlcnZlckNvbnRleHRDb25maWcSNwoQaW5saW5lX2Ruc190YWJsZRgB",
            "IAEoCzIbLmVudm95LmRhdGEuZG5zLnYzLkRuc1RhYmxlSAASPgoSZXh0ZXJu",
            "YWxfZG5zX3RhYmxlGAIgASgLMiAuZW52b3kuY29uZmlnLmNvcmUudjMuRGF0",
            "YVNvdXJjZUgAQhQKDWNvbmZpZ19zb3VyY2USA/hCARqOAgoTQ2xpZW50Q29u",
            "dGV4dENvbmZpZxI/ChByZXNvbHZlcl90aW1lb3V0GAEgASgLMhkuZ29vZ2xl",
            "LnByb3RvYnVmLkR1cmF0aW9uQgr6QgeqAQQyAggBEkYKEnVwc3RyZWFtX3Jl",
            "c29sdmVycxgCIAMoCzIdLmVudm95LmNvbmZpZy5jb3JlLnYzLkFkZHJlc3NC",
            "CxgBkseG2AQDMy4wEkgKFWRuc19yZXNvbHV0aW9uX2NvbmZpZxgFIAEoCzIp",
            "LmVudm95LmNvbmZpZy5jb3JlLnYzLkRuc1Jlc29sdXRpb25Db25maWcSJAoT",
            "bWF4X3BlbmRpbmdfbG9va3VwcxgDIAEoBEIH+kIEMgIoAUJUCjhpby5lbnZv",
            "eXByb3h5LmVudm95LmV4dGVuc2lvbnMuZmlsdGVycy51ZHAuZG5zX2ZpbHRl",
            "ci52M0IORG5zRmlsdGVyUHJvdG9QAbqAyNEGAhACYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Envoy.Config.Core.V3.AddressReflection.Descriptor, global::Envoy.Config.Core.V3.BaseReflection.Descriptor, global::Envoy.Config.Core.V3.ResolverReflection.Descriptor, global::Envoy.Data.Dns.V3.DnsTableReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Envoy.Annotations.DeprecationReflection.Descriptor, global::Udpa.Annotations.StatusReflection.Descriptor, global::Validate.ValidateReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Extensions.Filters.Udp.DnsFilter.V3.DnsFilterConfig), global::Envoy.Extensions.Filters.Udp.DnsFilter.V3.DnsFilterConfig.Parser, new[]{ "StatPrefix", "ServerConfig", "ClientConfig" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Extensions.Filters.Udp.DnsFilter.V3.DnsFilterConfig.Types.ServerContextConfig), global::Envoy.Extensions.Filters.Udp.DnsFilter.V3.DnsFilterConfig.Types.ServerContextConfig.Parser, new[]{ "InlineDnsTable", "ExternalDnsTable" }, new[]{ "ConfigSource" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Extensions.Filters.Udp.DnsFilter.V3.DnsFilterConfig.Types.ClientContextConfig), global::Envoy.Extensions.Filters.Udp.DnsFilter.V3.DnsFilterConfig.Types.ClientContextConfig.Parser, new[]{ "ResolverTimeout", "UpstreamResolvers", "DnsResolutionConfig", "MaxPendingLookups" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Configuration for the DNS filter.
  /// </summary>
  public sealed partial class DnsFilterConfig : pb::IMessage<DnsFilterConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DnsFilterConfig> _parser = new pb::MessageParser<DnsFilterConfig>(() => new DnsFilterConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DnsFilterConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Extensions.Filters.Udp.DnsFilter.V3.DnsFilterReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DnsFilterConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DnsFilterConfig(DnsFilterConfig other) : this() {
      statPrefix_ = other.statPrefix_;
      serverConfig_ = other.serverConfig_ != null ? other.serverConfig_.Clone() : null;
      clientConfig_ = other.clientConfig_ != null ? other.clientConfig_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DnsFilterConfig Clone() {
      return new DnsFilterConfig(this);
    }

    /// <summary>Field number for the "stat_prefix" field.</summary>
    public const int StatPrefixFieldNumber = 1;
    private string statPrefix_ = "";
    /// <summary>
    /// The stat prefix used when emitting DNS filter statistics
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string StatPrefix {
      get { return statPrefix_; }
      set {
        statPrefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "server_config" field.</summary>
    public const int ServerConfigFieldNumber = 2;
    private global::Envoy.Extensions.Filters.Udp.DnsFilter.V3.DnsFilterConfig.Types.ServerContextConfig serverConfig_;
    /// <summary>
    /// Server context configuration contains the data that the filter uses to respond
    /// to DNS requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Extensions.Filters.Udp.DnsFilter.V3.DnsFilterConfig.Types.ServerContextConfig ServerConfig {
      get { return serverConfig_; }
      set {
        serverConfig_ = value;
      }
    }

    /// <summary>Field number for the "client_config" field.</summary>
    public const int ClientConfigFieldNumber = 3;
    private global::Envoy.Extensions.Filters.Udp.DnsFilter.V3.DnsFilterConfig.Types.ClientContextConfig clientConfig_;
    /// <summary>
    /// Client context configuration controls Envoy's behavior when it must use external
    /// resolvers to answer a query. This object is optional and if omitted instructs
    /// the filter to resolve queries from the data in the server_config
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Extensions.Filters.Udp.DnsFilter.V3.DnsFilterConfig.Types.ClientContextConfig ClientConfig {
      get { return clientConfig_; }
      set {
        clientConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DnsFilterConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DnsFilterConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StatPrefix != other.StatPrefix) return false;
      if (!object.Equals(ServerConfig, other.ServerConfig)) return false;
      if (!object.Equals(ClientConfig, other.ClientConfig)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (StatPrefix.Length != 0) hash ^= StatPrefix.GetHashCode();
      if (serverConfig_ != null) hash ^= ServerConfig.GetHashCode();
      if (clientConfig_ != null) hash ^= ClientConfig.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (StatPrefix.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StatPrefix);
      }
      if (serverConfig_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ServerConfig);
      }
      if (clientConfig_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ClientConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (StatPrefix.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StatPrefix);
      }
      if (serverConfig_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ServerConfig);
      }
      if (clientConfig_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ClientConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (StatPrefix.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StatPrefix);
      }
      if (serverConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerConfig);
      }
      if (clientConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientConfig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DnsFilterConfig other) {
      if (other == null) {
        return;
      }
      if (other.StatPrefix.Length != 0) {
        StatPrefix = other.StatPrefix;
      }
      if (other.serverConfig_ != null) {
        if (serverConfig_ == null) {
          ServerConfig = new global::Envoy.Extensions.Filters.Udp.DnsFilter.V3.DnsFilterConfig.Types.ServerContextConfig();
        }
        ServerConfig.MergeFrom(other.ServerConfig);
      }
      if (other.clientConfig_ != null) {
        if (clientConfig_ == null) {
          ClientConfig = new global::Envoy.Extensions.Filters.Udp.DnsFilter.V3.DnsFilterConfig.Types.ClientContextConfig();
        }
        ClientConfig.MergeFrom(other.ClientConfig);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            StatPrefix = input.ReadString();
            break;
          }
          case 18: {
            if (serverConfig_ == null) {
              ServerConfig = new global::Envoy.Extensions.Filters.Udp.DnsFilter.V3.DnsFilterConfig.Types.ServerContextConfig();
            }
            input.ReadMessage(ServerConfig);
            break;
          }
          case 26: {
            if (clientConfig_ == null) {
              ClientConfig = new global::Envoy.Extensions.Filters.Udp.DnsFilter.V3.DnsFilterConfig.Types.ClientContextConfig();
            }
            input.ReadMessage(ClientConfig);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            StatPrefix = input.ReadString();
            break;
          }
          case 18: {
            if (serverConfig_ == null) {
              ServerConfig = new global::Envoy.Extensions.Filters.Udp.DnsFilter.V3.DnsFilterConfig.Types.ServerContextConfig();
            }
            input.ReadMessage(ServerConfig);
            break;
          }
          case 26: {
            if (clientConfig_ == null) {
              ClientConfig = new global::Envoy.Extensions.Filters.Udp.DnsFilter.V3.DnsFilterConfig.Types.ClientContextConfig();
            }
            input.ReadMessage(ClientConfig);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the DnsFilterConfig message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      /// This message contains the configuration for the DNS Filter operating
      /// in a server context. This message will contain the virtual hosts and
      /// associated addresses with which Envoy will respond to queries
      /// </summary>
      public sealed partial class ServerContextConfig : pb::IMessage<ServerContextConfig>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<ServerContextConfig> _parser = new pb::MessageParser<ServerContextConfig>(() => new ServerContextConfig());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<ServerContextConfig> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Envoy.Extensions.Filters.Udp.DnsFilter.V3.DnsFilterConfig.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ServerContextConfig() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ServerContextConfig(ServerContextConfig other) : this() {
          switch (other.ConfigSourceCase) {
            case ConfigSourceOneofCase.InlineDnsTable:
              InlineDnsTable = other.InlineDnsTable.Clone();
              break;
            case ConfigSourceOneofCase.ExternalDnsTable:
              ExternalDnsTable = other.ExternalDnsTable.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ServerContextConfig Clone() {
          return new ServerContextConfig(this);
        }

        /// <summary>Field number for the "inline_dns_table" field.</summary>
        public const int InlineDnsTableFieldNumber = 1;
        /// <summary>
        /// Load the configuration specified from the control plane
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Envoy.Data.Dns.V3.DnsTable InlineDnsTable {
          get { return configSourceCase_ == ConfigSourceOneofCase.InlineDnsTable ? (global::Envoy.Data.Dns.V3.DnsTable) configSource_ : null; }
          set {
            configSource_ = value;
            configSourceCase_ = value == null ? ConfigSourceOneofCase.None : ConfigSourceOneofCase.InlineDnsTable;
          }
        }

        /// <summary>Field number for the "external_dns_table" field.</summary>
        public const int ExternalDnsTableFieldNumber = 2;
        /// <summary>
        /// Seed the filter configuration from an external path. This source
        /// is a yaml formatted file that contains the DnsTable driving Envoy's
        /// responses to DNS queries
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Envoy.Config.Core.V3.DataSource ExternalDnsTable {
          get { return configSourceCase_ == ConfigSourceOneofCase.ExternalDnsTable ? (global::Envoy.Config.Core.V3.DataSource) configSource_ : null; }
          set {
            configSource_ = value;
            configSourceCase_ = value == null ? ConfigSourceOneofCase.None : ConfigSourceOneofCase.ExternalDnsTable;
          }
        }

        private object configSource_;
        /// <summary>Enum of possible cases for the "config_source" oneof.</summary>
        public enum ConfigSourceOneofCase {
          None = 0,
          InlineDnsTable = 1,
          ExternalDnsTable = 2,
        }
        private ConfigSourceOneofCase configSourceCase_ = ConfigSourceOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ConfigSourceOneofCase ConfigSourceCase {
          get { return configSourceCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearConfigSource() {
          configSourceCase_ = ConfigSourceOneofCase.None;
          configSource_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as ServerContextConfig);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(ServerContextConfig other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(InlineDnsTable, other.InlineDnsTable)) return false;
          if (!object.Equals(ExternalDnsTable, other.ExternalDnsTable)) return false;
          if (ConfigSourceCase != other.ConfigSourceCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (configSourceCase_ == ConfigSourceOneofCase.InlineDnsTable) hash ^= InlineDnsTable.GetHashCode();
          if (configSourceCase_ == ConfigSourceOneofCase.ExternalDnsTable) hash ^= ExternalDnsTable.GetHashCode();
          hash ^= (int) configSourceCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (configSourceCase_ == ConfigSourceOneofCase.InlineDnsTable) {
            output.WriteRawTag(10);
            output.WriteMessage(InlineDnsTable);
          }
          if (configSourceCase_ == ConfigSourceOneofCase.ExternalDnsTable) {
            output.WriteRawTag(18);
            output.WriteMessage(ExternalDnsTable);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (configSourceCase_ == ConfigSourceOneofCase.InlineDnsTable) {
            output.WriteRawTag(10);
            output.WriteMessage(InlineDnsTable);
          }
          if (configSourceCase_ == ConfigSourceOneofCase.ExternalDnsTable) {
            output.WriteRawTag(18);
            output.WriteMessage(ExternalDnsTable);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (configSourceCase_ == ConfigSourceOneofCase.InlineDnsTable) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(InlineDnsTable);
          }
          if (configSourceCase_ == ConfigSourceOneofCase.ExternalDnsTable) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExternalDnsTable);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(ServerContextConfig other) {
          if (other == null) {
            return;
          }
          switch (other.ConfigSourceCase) {
            case ConfigSourceOneofCase.InlineDnsTable:
              if (InlineDnsTable == null) {
                InlineDnsTable = new global::Envoy.Data.Dns.V3.DnsTable();
              }
              InlineDnsTable.MergeFrom(other.InlineDnsTable);
              break;
            case ConfigSourceOneofCase.ExternalDnsTable:
              if (ExternalDnsTable == null) {
                ExternalDnsTable = new global::Envoy.Config.Core.V3.DataSource();
              }
              ExternalDnsTable.MergeFrom(other.ExternalDnsTable);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                global::Envoy.Data.Dns.V3.DnsTable subBuilder = new global::Envoy.Data.Dns.V3.DnsTable();
                if (configSourceCase_ == ConfigSourceOneofCase.InlineDnsTable) {
                  subBuilder.MergeFrom(InlineDnsTable);
                }
                input.ReadMessage(subBuilder);
                InlineDnsTable = subBuilder;
                break;
              }
              case 18: {
                global::Envoy.Config.Core.V3.DataSource subBuilder = new global::Envoy.Config.Core.V3.DataSource();
                if (configSourceCase_ == ConfigSourceOneofCase.ExternalDnsTable) {
                  subBuilder.MergeFrom(ExternalDnsTable);
                }
                input.ReadMessage(subBuilder);
                ExternalDnsTable = subBuilder;
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                global::Envoy.Data.Dns.V3.DnsTable subBuilder = new global::Envoy.Data.Dns.V3.DnsTable();
                if (configSourceCase_ == ConfigSourceOneofCase.InlineDnsTable) {
                  subBuilder.MergeFrom(InlineDnsTable);
                }
                input.ReadMessage(subBuilder);
                InlineDnsTable = subBuilder;
                break;
              }
              case 18: {
                global::Envoy.Config.Core.V3.DataSource subBuilder = new global::Envoy.Config.Core.V3.DataSource();
                if (configSourceCase_ == ConfigSourceOneofCase.ExternalDnsTable) {
                  subBuilder.MergeFrom(ExternalDnsTable);
                }
                input.ReadMessage(subBuilder);
                ExternalDnsTable = subBuilder;
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// This message contains the configuration for the DNS Filter operating
      /// in a client context. This message will contain the timeouts, retry,
      /// and forwarding configuration for Envoy to make DNS requests to other
      /// resolvers
      ///
      /// [#next-free-field: 6]
      /// </summary>
      public sealed partial class ClientContextConfig : pb::IMessage<ClientContextConfig>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<ClientContextConfig> _parser = new pb::MessageParser<ClientContextConfig>(() => new ClientContextConfig());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<ClientContextConfig> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Envoy.Extensions.Filters.Udp.DnsFilter.V3.DnsFilterConfig.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ClientContextConfig() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ClientContextConfig(ClientContextConfig other) : this() {
          resolverTimeout_ = other.resolverTimeout_ != null ? other.resolverTimeout_.Clone() : null;
          upstreamResolvers_ = other.upstreamResolvers_.Clone();
          dnsResolutionConfig_ = other.dnsResolutionConfig_ != null ? other.dnsResolutionConfig_.Clone() : null;
          maxPendingLookups_ = other.maxPendingLookups_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ClientContextConfig Clone() {
          return new ClientContextConfig(this);
        }

        /// <summary>Field number for the "resolver_timeout" field.</summary>
        public const int ResolverTimeoutFieldNumber = 1;
        private global::Google.Protobuf.WellKnownTypes.Duration resolverTimeout_;
        /// <summary>
        /// Sets the maximum time we will wait for the upstream query to complete
        /// We allow 5s for the upstream resolution to complete, so the minimum
        /// value here is 1. Note that the total latency for a failed query is the
        /// number of retries multiplied by the resolver_timeout.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Google.Protobuf.WellKnownTypes.Duration ResolverTimeout {
          get { return resolverTimeout_; }
          set {
            resolverTimeout_ = value;
          }
        }

        /// <summary>Field number for the "upstream_resolvers" field.</summary>
        public const int UpstreamResolversFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Envoy.Config.Core.V3.Address> _repeated_upstreamResolvers_codec
            = pb::FieldCodec.ForMessage(18, global::Envoy.Config.Core.V3.Address.Parser);
        private readonly pbc::RepeatedField<global::Envoy.Config.Core.V3.Address> upstreamResolvers_ = new pbc::RepeatedField<global::Envoy.Config.Core.V3.Address>();
        /// <summary>
        /// This field was used for `dns_resolution_config` in Envoy 1.19.0 and
        /// 1.19.1.
        /// Control planes that need to set this field for Envoy 1.19.0 and
        /// 1.19.1 clients should fork the protobufs and change the field type
        /// to `DnsResolutionConfig`.
        /// Control planes that need to simultaneously support Envoy 1.18.x and
        /// Envoy 1.19.x should avoid Envoy 1.19.0 and 1.19.1.
        ///
        /// [#not-implemented-hide:]
        /// </summary>
        [global::System.ObsoleteAttribute]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<global::Envoy.Config.Core.V3.Address> UpstreamResolvers {
          get { return upstreamResolvers_; }
        }

        /// <summary>Field number for the "dns_resolution_config" field.</summary>
        public const int DnsResolutionConfigFieldNumber = 5;
        private global::Envoy.Config.Core.V3.DnsResolutionConfig dnsResolutionConfig_;
        /// <summary>
        /// DNS resolution configuration which includes the underlying dns resolver addresses and options.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Envoy.Config.Core.V3.DnsResolutionConfig DnsResolutionConfig {
          get { return dnsResolutionConfig_; }
          set {
            dnsResolutionConfig_ = value;
          }
        }

        /// <summary>Field number for the "max_pending_lookups" field.</summary>
        public const int MaxPendingLookupsFieldNumber = 3;
        private ulong maxPendingLookups_;
        /// <summary>
        /// Controls how many outstanding external lookup contexts the filter tracks.
        /// The context structure allows the filter to respond to every query even if the external
        /// resolution times out or is otherwise unsuccessful
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ulong MaxPendingLookups {
          get { return maxPendingLookups_; }
          set {
            maxPendingLookups_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as ClientContextConfig);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(ClientContextConfig other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(ResolverTimeout, other.ResolverTimeout)) return false;
          if(!upstreamResolvers_.Equals(other.upstreamResolvers_)) return false;
          if (!object.Equals(DnsResolutionConfig, other.DnsResolutionConfig)) return false;
          if (MaxPendingLookups != other.MaxPendingLookups) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (resolverTimeout_ != null) hash ^= ResolverTimeout.GetHashCode();
          hash ^= upstreamResolvers_.GetHashCode();
          if (dnsResolutionConfig_ != null) hash ^= DnsResolutionConfig.GetHashCode();
          if (MaxPendingLookups != 0UL) hash ^= MaxPendingLookups.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (resolverTimeout_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(ResolverTimeout);
          }
          upstreamResolvers_.WriteTo(output, _repeated_upstreamResolvers_codec);
          if (MaxPendingLookups != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(MaxPendingLookups);
          }
          if (dnsResolutionConfig_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(DnsResolutionConfig);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (resolverTimeout_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(ResolverTimeout);
          }
          upstreamResolvers_.WriteTo(ref output, _repeated_upstreamResolvers_codec);
          if (MaxPendingLookups != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(MaxPendingLookups);
          }
          if (dnsResolutionConfig_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(DnsResolutionConfig);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (resolverTimeout_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResolverTimeout);
          }
          size += upstreamResolvers_.CalculateSize(_repeated_upstreamResolvers_codec);
          if (dnsResolutionConfig_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(DnsResolutionConfig);
          }
          if (MaxPendingLookups != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxPendingLookups);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(ClientContextConfig other) {
          if (other == null) {
            return;
          }
          if (other.resolverTimeout_ != null) {
            if (resolverTimeout_ == null) {
              ResolverTimeout = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            ResolverTimeout.MergeFrom(other.ResolverTimeout);
          }
          upstreamResolvers_.Add(other.upstreamResolvers_);
          if (other.dnsResolutionConfig_ != null) {
            if (dnsResolutionConfig_ == null) {
              DnsResolutionConfig = new global::Envoy.Config.Core.V3.DnsResolutionConfig();
            }
            DnsResolutionConfig.MergeFrom(other.DnsResolutionConfig);
          }
          if (other.MaxPendingLookups != 0UL) {
            MaxPendingLookups = other.MaxPendingLookups;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (resolverTimeout_ == null) {
                  ResolverTimeout = new global::Google.Protobuf.WellKnownTypes.Duration();
                }
                input.ReadMessage(ResolverTimeout);
                break;
              }
              case 18: {
                upstreamResolvers_.AddEntriesFrom(input, _repeated_upstreamResolvers_codec);
                break;
              }
              case 24: {
                MaxPendingLookups = input.ReadUInt64();
                break;
              }
              case 42: {
                if (dnsResolutionConfig_ == null) {
                  DnsResolutionConfig = new global::Envoy.Config.Core.V3.DnsResolutionConfig();
                }
                input.ReadMessage(DnsResolutionConfig);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (resolverTimeout_ == null) {
                  ResolverTimeout = new global::Google.Protobuf.WellKnownTypes.Duration();
                }
                input.ReadMessage(ResolverTimeout);
                break;
              }
              case 18: {
                upstreamResolvers_.AddEntriesFrom(ref input, _repeated_upstreamResolvers_codec);
                break;
              }
              case 24: {
                MaxPendingLookups = input.ReadUInt64();
                break;
              }
              case 42: {
                if (dnsResolutionConfig_ == null) {
                  DnsResolutionConfig = new global::Envoy.Config.Core.V3.DnsResolutionConfig();
                }
                input.ReadMessage(DnsResolutionConfig);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
