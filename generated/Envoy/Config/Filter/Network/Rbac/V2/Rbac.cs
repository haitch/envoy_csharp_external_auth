// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/config/filter/network/rbac/v2/rbac.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Config.Filter.Network.Rbac.V2 {

  /// <summary>Holder for reflection information generated from envoy/config/filter/network/rbac/v2/rbac.proto</summary>
  public static partial class RbacReflection {

    #region Descriptor
    /// <summary>File descriptor for envoy/config/filter/network/rbac/v2/rbac.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RbacReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci5lbnZveS9jb25maWcvZmlsdGVyL25ldHdvcmsvcmJhYy92Mi9yYmFjLnBy",
            "b3RvEiNlbnZveS5jb25maWcuZmlsdGVyLm5ldHdvcmsucmJhYy52MhofZW52",
            "b3kvY29uZmlnL3JiYWMvdjIvcmJhYy5wcm90bxoedWRwYS9hbm5vdGF0aW9u",
            "cy9taWdyYXRlLnByb3RvGh11ZHBhL2Fubm90YXRpb25zL3N0YXR1cy5wcm90",
            "bxoXdmFsaWRhdGUvdmFsaWRhdGUucHJvdG8ilQIKBFJCQUMSKQoFcnVsZXMY",
            "ASABKAsyGi5lbnZveS5jb25maWcucmJhYy52Mi5SQkFDEjAKDHNoYWRvd19y",
            "dWxlcxgCIAEoCzIaLmVudm95LmNvbmZpZy5yYmFjLnYyLlJCQUMSHAoLc3Rh",
            "dF9wcmVmaXgYAyABKAlCB/pCBHICIAESUwoQZW5mb3JjZW1lbnRfdHlwZRgE",
            "IAEoDjI5LmVudm95LmNvbmZpZy5maWx0ZXIubmV0d29yay5yYmFjLnYyLlJC",
            "QUMuRW5mb3JjZW1lbnRUeXBlIj0KD0VuZm9yY2VtZW50VHlwZRIaChZPTkVf",
            "VElNRV9PTl9GSVJTVF9CWVRFEAASDgoKQ09OVElOVU9VUxABQngKMWlvLmVu",
            "dm95cHJveHkuZW52b3kuY29uZmlnLmZpbHRlci5uZXR3b3JrLnJiYWMudjJC",
            "CVJiYWNQcm90b1AB8pj+jwUqEihlbnZveS5leHRlbnNpb25zLmZpbHRlcnMu",
            "bmV0d29yay5yYmFjLnYzuoDI0QYCEAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Envoy.Config.Rbac.V2.RbacReflection.Descriptor, global::Udpa.Annotations.MigrateReflection.Descriptor, global::Udpa.Annotations.StatusReflection.Descriptor, global::Validate.ValidateReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Network.Rbac.V2.RBAC), global::Envoy.Config.Filter.Network.Rbac.V2.RBAC.Parser, new[]{ "Rules", "ShadowRules", "StatPrefix", "EnforcementType" }, null, new[]{ typeof(global::Envoy.Config.Filter.Network.Rbac.V2.RBAC.Types.EnforcementType) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// RBAC network filter config.
  ///
  /// Header should not be used in rules/shadow_rules in RBAC network filter as
  /// this information is only available in :ref:`RBAC http filter &lt;config_http_filters_rbac>`.
  /// </summary>
  public sealed partial class RBAC : pb::IMessage<RBAC>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RBAC> _parser = new pb::MessageParser<RBAC>(() => new RBAC());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RBAC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Network.Rbac.V2.RbacReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RBAC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RBAC(RBAC other) : this() {
      rules_ = other.rules_ != null ? other.rules_.Clone() : null;
      shadowRules_ = other.shadowRules_ != null ? other.shadowRules_.Clone() : null;
      statPrefix_ = other.statPrefix_;
      enforcementType_ = other.enforcementType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RBAC Clone() {
      return new RBAC(this);
    }

    /// <summary>Field number for the "rules" field.</summary>
    public const int RulesFieldNumber = 1;
    private global::Envoy.Config.Rbac.V2.RBAC rules_;
    /// <summary>
    /// Specify the RBAC rules to be applied globally.
    /// If absent, no enforcing RBAC policy will be applied.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Config.Rbac.V2.RBAC Rules {
      get { return rules_; }
      set {
        rules_ = value;
      }
    }

    /// <summary>Field number for the "shadow_rules" field.</summary>
    public const int ShadowRulesFieldNumber = 2;
    private global::Envoy.Config.Rbac.V2.RBAC shadowRules_;
    /// <summary>
    /// Shadow rules are not enforced by the filter but will emit stats and logs
    /// and can be used for rule testing.
    /// If absent, no shadow RBAC policy will be applied.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Config.Rbac.V2.RBAC ShadowRules {
      get { return shadowRules_; }
      set {
        shadowRules_ = value;
      }
    }

    /// <summary>Field number for the "stat_prefix" field.</summary>
    public const int StatPrefixFieldNumber = 3;
    private string statPrefix_ = "";
    /// <summary>
    /// The prefix to use when emitting statistics.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string StatPrefix {
      get { return statPrefix_; }
      set {
        statPrefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "enforcement_type" field.</summary>
    public const int EnforcementTypeFieldNumber = 4;
    private global::Envoy.Config.Filter.Network.Rbac.V2.RBAC.Types.EnforcementType enforcementType_ = global::Envoy.Config.Filter.Network.Rbac.V2.RBAC.Types.EnforcementType.OneTimeOnFirstByte;
    /// <summary>
    /// RBAC enforcement strategy. By default RBAC will be enforced only once
    /// when the first byte of data arrives from the downstream. When used in
    /// conjunction with filters that emit dynamic metadata after decoding
    /// every payload (e.g., Mongo, MySQL, Kafka) set the enforcement type to
    /// CONTINUOUS to enforce RBAC policies on every message boundary.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Config.Filter.Network.Rbac.V2.RBAC.Types.EnforcementType EnforcementType {
      get { return enforcementType_; }
      set {
        enforcementType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RBAC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RBAC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Rules, other.Rules)) return false;
      if (!object.Equals(ShadowRules, other.ShadowRules)) return false;
      if (StatPrefix != other.StatPrefix) return false;
      if (EnforcementType != other.EnforcementType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (rules_ != null) hash ^= Rules.GetHashCode();
      if (shadowRules_ != null) hash ^= ShadowRules.GetHashCode();
      if (StatPrefix.Length != 0) hash ^= StatPrefix.GetHashCode();
      if (EnforcementType != global::Envoy.Config.Filter.Network.Rbac.V2.RBAC.Types.EnforcementType.OneTimeOnFirstByte) hash ^= EnforcementType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (rules_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Rules);
      }
      if (shadowRules_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ShadowRules);
      }
      if (StatPrefix.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(StatPrefix);
      }
      if (EnforcementType != global::Envoy.Config.Filter.Network.Rbac.V2.RBAC.Types.EnforcementType.OneTimeOnFirstByte) {
        output.WriteRawTag(32);
        output.WriteEnum((int) EnforcementType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (rules_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Rules);
      }
      if (shadowRules_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ShadowRules);
      }
      if (StatPrefix.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(StatPrefix);
      }
      if (EnforcementType != global::Envoy.Config.Filter.Network.Rbac.V2.RBAC.Types.EnforcementType.OneTimeOnFirstByte) {
        output.WriteRawTag(32);
        output.WriteEnum((int) EnforcementType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (rules_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rules);
      }
      if (shadowRules_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ShadowRules);
      }
      if (StatPrefix.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StatPrefix);
      }
      if (EnforcementType != global::Envoy.Config.Filter.Network.Rbac.V2.RBAC.Types.EnforcementType.OneTimeOnFirstByte) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EnforcementType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RBAC other) {
      if (other == null) {
        return;
      }
      if (other.rules_ != null) {
        if (rules_ == null) {
          Rules = new global::Envoy.Config.Rbac.V2.RBAC();
        }
        Rules.MergeFrom(other.Rules);
      }
      if (other.shadowRules_ != null) {
        if (shadowRules_ == null) {
          ShadowRules = new global::Envoy.Config.Rbac.V2.RBAC();
        }
        ShadowRules.MergeFrom(other.ShadowRules);
      }
      if (other.StatPrefix.Length != 0) {
        StatPrefix = other.StatPrefix;
      }
      if (other.EnforcementType != global::Envoy.Config.Filter.Network.Rbac.V2.RBAC.Types.EnforcementType.OneTimeOnFirstByte) {
        EnforcementType = other.EnforcementType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (rules_ == null) {
              Rules = new global::Envoy.Config.Rbac.V2.RBAC();
            }
            input.ReadMessage(Rules);
            break;
          }
          case 18: {
            if (shadowRules_ == null) {
              ShadowRules = new global::Envoy.Config.Rbac.V2.RBAC();
            }
            input.ReadMessage(ShadowRules);
            break;
          }
          case 26: {
            StatPrefix = input.ReadString();
            break;
          }
          case 32: {
            EnforcementType = (global::Envoy.Config.Filter.Network.Rbac.V2.RBAC.Types.EnforcementType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (rules_ == null) {
              Rules = new global::Envoy.Config.Rbac.V2.RBAC();
            }
            input.ReadMessage(Rules);
            break;
          }
          case 18: {
            if (shadowRules_ == null) {
              ShadowRules = new global::Envoy.Config.Rbac.V2.RBAC();
            }
            input.ReadMessage(ShadowRules);
            break;
          }
          case 26: {
            StatPrefix = input.ReadString();
            break;
          }
          case 32: {
            EnforcementType = (global::Envoy.Config.Filter.Network.Rbac.V2.RBAC.Types.EnforcementType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the RBAC message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum EnforcementType {
        /// <summary>
        /// Apply RBAC policies when the first byte of data arrives on the connection.
        /// </summary>
        [pbr::OriginalName("ONE_TIME_ON_FIRST_BYTE")] OneTimeOnFirstByte = 0,
        /// <summary>
        /// Continuously apply RBAC policies as data arrives. Use this mode when
        /// using RBAC with message oriented protocols such as Mongo, MySQL, Kafka,
        /// etc. when the protocol decoders emit dynamic metadata such as the
        /// resources being accessed and the operations on the resources.
        /// </summary>
        [pbr::OriginalName("CONTINUOUS")] Continuous = 1,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
