// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/config/listener/v3/quic_config.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Config.Listener.V3 {

  /// <summary>Holder for reflection information generated from envoy/config/listener/v3/quic_config.proto</summary>
  public static partial class QuicConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for envoy/config/listener/v3/quic_config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static QuicConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiplbnZveS9jb25maWcvbGlzdGVuZXIvdjMvcXVpY19jb25maWcucHJvdG8S",
            "GGVudm95LmNvbmZpZy5saXN0ZW5lci52MxofZW52b3kvY29uZmlnL2NvcmUv",
            "djMvYmFzZS5wcm90bxokZW52b3kvY29uZmlnL2NvcmUvdjMvZXh0ZW5zaW9u",
            "LnByb3RvGiNlbnZveS9jb25maWcvY29yZS92My9wcm90b2NvbC5wcm90bxoe",
            "Z29vZ2xlL3Byb3RvYnVmL2R1cmF0aW9uLnByb3RvGh5nb29nbGUvcHJvdG9i",
            "dWYvd3JhcHBlcnMucHJvdG8aHXVkcGEvYW5ub3RhdGlvbnMvc3RhdHVzLnBy",
            "b3RvGiF1ZHBhL2Fubm90YXRpb25zL3ZlcnNpb25pbmcucHJvdG8aF3ZhbGlk",
            "YXRlL3ZhbGlkYXRlLnByb3RvIqcEChNRdWljUHJvdG9jb2xPcHRpb25zEkgK",
            "FXF1aWNfcHJvdG9jb2xfb3B0aW9ucxgBIAEoCzIpLmVudm95LmNvbmZpZy5j",
            "b3JlLnYzLlF1aWNQcm90b2NvbE9wdGlvbnMSLwoMaWRsZV90aW1lb3V0GAIg",
            "ASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uEjsKGGNyeXB0b19oYW5k",
            "c2hha2VfdGltZW91dBgDIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlv",
            "bhI5CgdlbmFibGVkGAQgASgLMiguZW52b3kuY29uZmlnLmNvcmUudjMuUnVu",
            "dGltZUZlYXR1cmVGbGFnElgKKXBhY2tldHNfdG9fcmVhZF90b19jb25uZWN0",
            "aW9uX2NvdW50X3JhdGlvGAUgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlVJbnQz",
            "MlZhbHVlQgf6QgQqAigBEkgKFGNyeXB0b19zdHJlYW1fY29uZmlnGAYgASgL",
            "MiouZW52b3kuY29uZmlnLmNvcmUudjMuVHlwZWRFeHRlbnNpb25Db25maWcS",
            "RwoTcHJvb2Zfc291cmNlX2NvbmZpZxgHIAEoCzIqLmVudm95LmNvbmZpZy5j",
            "b3JlLnYzLlR5cGVkRXh0ZW5zaW9uQ29uZmlnOjCaxYgeKwopZW52b3kuYXBp",
            "LnYyLmxpc3RlbmVyLlF1aWNQcm90b2NvbE9wdGlvbnNCQwomaW8uZW52b3lw",
            "cm94eS5lbnZveS5jb25maWcubGlzdGVuZXIudjNCD1F1aWNDb25maWdQcm90",
            "b1ABuoDI0QYCEAJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Envoy.Config.Core.V3.BaseReflection.Descriptor, global::Envoy.Config.Core.V3.ExtensionReflection.Descriptor, global::Envoy.Config.Core.V3.ProtocolReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Udpa.Annotations.StatusReflection.Descriptor, global::Udpa.Annotations.VersioningReflection.Descriptor, global::Validate.ValidateReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Listener.V3.QuicProtocolOptions), global::Envoy.Config.Listener.V3.QuicProtocolOptions.Parser, new[]{ "QuicProtocolOptions_", "IdleTimeout", "CryptoHandshakeTimeout", "Enabled", "PacketsToReadToConnectionCountRatio", "CryptoStreamConfig", "ProofSourceConfig" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Configuration specific to the UDP QUIC listener.
  /// [#next-free-field: 8]
  /// </summary>
  public sealed partial class QuicProtocolOptions : pb::IMessage<QuicProtocolOptions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<QuicProtocolOptions> _parser = new pb::MessageParser<QuicProtocolOptions>(() => new QuicProtocolOptions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<QuicProtocolOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Listener.V3.QuicConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public QuicProtocolOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public QuicProtocolOptions(QuicProtocolOptions other) : this() {
      quicProtocolOptions_ = other.quicProtocolOptions_ != null ? other.quicProtocolOptions_.Clone() : null;
      idleTimeout_ = other.idleTimeout_ != null ? other.idleTimeout_.Clone() : null;
      cryptoHandshakeTimeout_ = other.cryptoHandshakeTimeout_ != null ? other.cryptoHandshakeTimeout_.Clone() : null;
      enabled_ = other.enabled_ != null ? other.enabled_.Clone() : null;
      PacketsToReadToConnectionCountRatio = other.PacketsToReadToConnectionCountRatio;
      cryptoStreamConfig_ = other.cryptoStreamConfig_ != null ? other.cryptoStreamConfig_.Clone() : null;
      proofSourceConfig_ = other.proofSourceConfig_ != null ? other.proofSourceConfig_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public QuicProtocolOptions Clone() {
      return new QuicProtocolOptions(this);
    }

    /// <summary>Field number for the "quic_protocol_options" field.</summary>
    public const int QuicProtocolOptions_FieldNumber = 1;
    private global::Envoy.Config.Core.V3.QuicProtocolOptions quicProtocolOptions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Config.Core.V3.QuicProtocolOptions QuicProtocolOptions_ {
      get { return quicProtocolOptions_; }
      set {
        quicProtocolOptions_ = value;
      }
    }

    /// <summary>Field number for the "idle_timeout" field.</summary>
    public const int IdleTimeoutFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Duration idleTimeout_;
    /// <summary>
    /// Maximum number of milliseconds that connection will be alive when there is
    /// no network activity. 300000ms if not specified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Duration IdleTimeout {
      get { return idleTimeout_; }
      set {
        idleTimeout_ = value;
      }
    }

    /// <summary>Field number for the "crypto_handshake_timeout" field.</summary>
    public const int CryptoHandshakeTimeoutFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Duration cryptoHandshakeTimeout_;
    /// <summary>
    /// Connection timeout in milliseconds before the crypto handshake is finished.
    /// 20000ms if not specified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Duration CryptoHandshakeTimeout {
      get { return cryptoHandshakeTimeout_; }
      set {
        cryptoHandshakeTimeout_ = value;
      }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 4;
    private global::Envoy.Config.Core.V3.RuntimeFeatureFlag enabled_;
    /// <summary>
    /// Runtime flag that controls whether the listener is enabled or not. If not specified, defaults
    /// to enabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Config.Core.V3.RuntimeFeatureFlag Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "packets_to_read_to_connection_count_ratio" field.</summary>
    public const int PacketsToReadToConnectionCountRatioFieldNumber = 5;
    private static readonly pb::FieldCodec<uint?> _single_packetsToReadToConnectionCountRatio_codec = pb::FieldCodec.ForStructWrapper<uint>(42);
    private uint? packetsToReadToConnectionCountRatio_;
    /// <summary>
    /// A multiplier to number of connections which is used to determine how many packets to read per
    /// event loop. A reasonable number should allow the listener to process enough payload but not
    /// starve TCP and other UDP sockets and also prevent long event loop duration.
    /// The default value is 32. This means if there are N QUIC connections, the total number of
    /// packets to read in each read event will be 32 * N.
    /// The actual number of packets to read in total by the UDP listener is also
    /// bound by 6000, regardless of this field or how many connections there are.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint? PacketsToReadToConnectionCountRatio {
      get { return packetsToReadToConnectionCountRatio_; }
      set {
        packetsToReadToConnectionCountRatio_ = value;
      }
    }


    /// <summary>Field number for the "crypto_stream_config" field.</summary>
    public const int CryptoStreamConfigFieldNumber = 6;
    private global::Envoy.Config.Core.V3.TypedExtensionConfig cryptoStreamConfig_;
    /// <summary>
    /// Configure which implementation of `quic::QuicCryptoClientStreamBase` to be used for this listener.
    /// If not specified the :ref:`QUICHE default one configured by &lt;envoy_v3_api_msg_extensions.quic.crypto_stream.v3.CryptoServerStreamConfig>` will be used.
    /// [#extension-category: envoy.quic.server.crypto_stream]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Config.Core.V3.TypedExtensionConfig CryptoStreamConfig {
      get { return cryptoStreamConfig_; }
      set {
        cryptoStreamConfig_ = value;
      }
    }

    /// <summary>Field number for the "proof_source_config" field.</summary>
    public const int ProofSourceConfigFieldNumber = 7;
    private global::Envoy.Config.Core.V3.TypedExtensionConfig proofSourceConfig_;
    /// <summary>
    /// Configure which implementation of `quic::ProofSource` to be used for this listener.
    /// If not specified the :ref:`default one configured by &lt;envoy_v3_api_msg_extensions.quic.proof_source.v3.ProofSourceConfig>` will be used.
    /// [#extension-category: envoy.quic.proof_source]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Config.Core.V3.TypedExtensionConfig ProofSourceConfig {
      get { return proofSourceConfig_; }
      set {
        proofSourceConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as QuicProtocolOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(QuicProtocolOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(QuicProtocolOptions_, other.QuicProtocolOptions_)) return false;
      if (!object.Equals(IdleTimeout, other.IdleTimeout)) return false;
      if (!object.Equals(CryptoHandshakeTimeout, other.CryptoHandshakeTimeout)) return false;
      if (!object.Equals(Enabled, other.Enabled)) return false;
      if (PacketsToReadToConnectionCountRatio != other.PacketsToReadToConnectionCountRatio) return false;
      if (!object.Equals(CryptoStreamConfig, other.CryptoStreamConfig)) return false;
      if (!object.Equals(ProofSourceConfig, other.ProofSourceConfig)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (quicProtocolOptions_ != null) hash ^= QuicProtocolOptions_.GetHashCode();
      if (idleTimeout_ != null) hash ^= IdleTimeout.GetHashCode();
      if (cryptoHandshakeTimeout_ != null) hash ^= CryptoHandshakeTimeout.GetHashCode();
      if (enabled_ != null) hash ^= Enabled.GetHashCode();
      if (packetsToReadToConnectionCountRatio_ != null) hash ^= PacketsToReadToConnectionCountRatio.GetHashCode();
      if (cryptoStreamConfig_ != null) hash ^= CryptoStreamConfig.GetHashCode();
      if (proofSourceConfig_ != null) hash ^= ProofSourceConfig.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (quicProtocolOptions_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(QuicProtocolOptions_);
      }
      if (idleTimeout_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(IdleTimeout);
      }
      if (cryptoHandshakeTimeout_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CryptoHandshakeTimeout);
      }
      if (enabled_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Enabled);
      }
      if (packetsToReadToConnectionCountRatio_ != null) {
        _single_packetsToReadToConnectionCountRatio_codec.WriteTagAndValue(output, PacketsToReadToConnectionCountRatio);
      }
      if (cryptoStreamConfig_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(CryptoStreamConfig);
      }
      if (proofSourceConfig_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ProofSourceConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (quicProtocolOptions_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(QuicProtocolOptions_);
      }
      if (idleTimeout_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(IdleTimeout);
      }
      if (cryptoHandshakeTimeout_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CryptoHandshakeTimeout);
      }
      if (enabled_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Enabled);
      }
      if (packetsToReadToConnectionCountRatio_ != null) {
        _single_packetsToReadToConnectionCountRatio_codec.WriteTagAndValue(ref output, PacketsToReadToConnectionCountRatio);
      }
      if (cryptoStreamConfig_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(CryptoStreamConfig);
      }
      if (proofSourceConfig_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ProofSourceConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (quicProtocolOptions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QuicProtocolOptions_);
      }
      if (idleTimeout_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IdleTimeout);
      }
      if (cryptoHandshakeTimeout_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CryptoHandshakeTimeout);
      }
      if (enabled_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Enabled);
      }
      if (packetsToReadToConnectionCountRatio_ != null) {
        size += _single_packetsToReadToConnectionCountRatio_codec.CalculateSizeWithTag(PacketsToReadToConnectionCountRatio);
      }
      if (cryptoStreamConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CryptoStreamConfig);
      }
      if (proofSourceConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProofSourceConfig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(QuicProtocolOptions other) {
      if (other == null) {
        return;
      }
      if (other.quicProtocolOptions_ != null) {
        if (quicProtocolOptions_ == null) {
          QuicProtocolOptions_ = new global::Envoy.Config.Core.V3.QuicProtocolOptions();
        }
        QuicProtocolOptions_.MergeFrom(other.QuicProtocolOptions_);
      }
      if (other.idleTimeout_ != null) {
        if (idleTimeout_ == null) {
          IdleTimeout = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        IdleTimeout.MergeFrom(other.IdleTimeout);
      }
      if (other.cryptoHandshakeTimeout_ != null) {
        if (cryptoHandshakeTimeout_ == null) {
          CryptoHandshakeTimeout = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        CryptoHandshakeTimeout.MergeFrom(other.CryptoHandshakeTimeout);
      }
      if (other.enabled_ != null) {
        if (enabled_ == null) {
          Enabled = new global::Envoy.Config.Core.V3.RuntimeFeatureFlag();
        }
        Enabled.MergeFrom(other.Enabled);
      }
      if (other.packetsToReadToConnectionCountRatio_ != null) {
        if (packetsToReadToConnectionCountRatio_ == null || other.PacketsToReadToConnectionCountRatio != 0) {
          PacketsToReadToConnectionCountRatio = other.PacketsToReadToConnectionCountRatio;
        }
      }
      if (other.cryptoStreamConfig_ != null) {
        if (cryptoStreamConfig_ == null) {
          CryptoStreamConfig = new global::Envoy.Config.Core.V3.TypedExtensionConfig();
        }
        CryptoStreamConfig.MergeFrom(other.CryptoStreamConfig);
      }
      if (other.proofSourceConfig_ != null) {
        if (proofSourceConfig_ == null) {
          ProofSourceConfig = new global::Envoy.Config.Core.V3.TypedExtensionConfig();
        }
        ProofSourceConfig.MergeFrom(other.ProofSourceConfig);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (quicProtocolOptions_ == null) {
              QuicProtocolOptions_ = new global::Envoy.Config.Core.V3.QuicProtocolOptions();
            }
            input.ReadMessage(QuicProtocolOptions_);
            break;
          }
          case 18: {
            if (idleTimeout_ == null) {
              IdleTimeout = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(IdleTimeout);
            break;
          }
          case 26: {
            if (cryptoHandshakeTimeout_ == null) {
              CryptoHandshakeTimeout = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(CryptoHandshakeTimeout);
            break;
          }
          case 34: {
            if (enabled_ == null) {
              Enabled = new global::Envoy.Config.Core.V3.RuntimeFeatureFlag();
            }
            input.ReadMessage(Enabled);
            break;
          }
          case 42: {
            uint? value = _single_packetsToReadToConnectionCountRatio_codec.Read(input);
            if (packetsToReadToConnectionCountRatio_ == null || value != 0) {
              PacketsToReadToConnectionCountRatio = value;
            }
            break;
          }
          case 50: {
            if (cryptoStreamConfig_ == null) {
              CryptoStreamConfig = new global::Envoy.Config.Core.V3.TypedExtensionConfig();
            }
            input.ReadMessage(CryptoStreamConfig);
            break;
          }
          case 58: {
            if (proofSourceConfig_ == null) {
              ProofSourceConfig = new global::Envoy.Config.Core.V3.TypedExtensionConfig();
            }
            input.ReadMessage(ProofSourceConfig);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (quicProtocolOptions_ == null) {
              QuicProtocolOptions_ = new global::Envoy.Config.Core.V3.QuicProtocolOptions();
            }
            input.ReadMessage(QuicProtocolOptions_);
            break;
          }
          case 18: {
            if (idleTimeout_ == null) {
              IdleTimeout = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(IdleTimeout);
            break;
          }
          case 26: {
            if (cryptoHandshakeTimeout_ == null) {
              CryptoHandshakeTimeout = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(CryptoHandshakeTimeout);
            break;
          }
          case 34: {
            if (enabled_ == null) {
              Enabled = new global::Envoy.Config.Core.V3.RuntimeFeatureFlag();
            }
            input.ReadMessage(Enabled);
            break;
          }
          case 42: {
            uint? value = _single_packetsToReadToConnectionCountRatio_codec.Read(ref input);
            if (packetsToReadToConnectionCountRatio_ == null || value != 0) {
              PacketsToReadToConnectionCountRatio = value;
            }
            break;
          }
          case 50: {
            if (cryptoStreamConfig_ == null) {
              CryptoStreamConfig = new global::Envoy.Config.Core.V3.TypedExtensionConfig();
            }
            input.ReadMessage(CryptoStreamConfig);
            break;
          }
          case 58: {
            if (proofSourceConfig_ == null) {
              ProofSourceConfig = new global::Envoy.Config.Core.V3.TypedExtensionConfig();
            }
            input.ReadMessage(ProofSourceConfig);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
