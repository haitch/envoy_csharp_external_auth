// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/api/v2/auth/tls.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Api.V2.Auth {

  /// <summary>Holder for reflection information generated from envoy/api/v2/auth/tls.proto</summary>
  public static partial class TlsReflection {

    #region Descriptor
    /// <summary>File descriptor for envoy/api/v2/auth/tls.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TlsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChtlbnZveS9hcGkvdjIvYXV0aC90bHMucHJvdG8SEWVudm95LmFwaS52Mi5h",
            "dXRoGh5lbnZveS9hcGkvdjIvYXV0aC9jb21tb24ucHJvdG8aHmVudm95L2Fw",
            "aS92Mi9hdXRoL3NlY3JldC5wcm90bxoeZ29vZ2xlL3Byb3RvYnVmL2R1cmF0",
            "aW9uLnByb3RvGh5nb29nbGUvcHJvdG9idWYvd3JhcHBlcnMucHJvdG8aHnVk",
            "cGEvYW5ub3RhdGlvbnMvbWlncmF0ZS5wcm90bxoddWRwYS9hbm5vdGF0aW9u",
            "cy9zdGF0dXMucHJvdG8aF3ZhbGlkYXRlL3ZhbGlkYXRlLnByb3RvIsEBChJV",
            "cHN0cmVhbVRsc0NvbnRleHQSPwoSY29tbW9uX3Rsc19jb250ZXh0GAEgASgL",
            "MiMuZW52b3kuYXBpLnYyLmF1dGguQ29tbW9uVGxzQ29udGV4dBIVCgNzbmkY",
            "AiABKAlCCPpCBXIDKP8BEhsKE2FsbG93X3JlbmVnb3RpYXRpb24YAyABKAgS",
            "NgoQbWF4X3Nlc3Npb25fa2V5cxgEIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5V",
            "SW50MzJWYWx1ZSL3AwoURG93bnN0cmVhbVRsc0NvbnRleHQSPwoSY29tbW9u",
            "X3Rsc19jb250ZXh0GAEgASgLMiMuZW52b3kuYXBpLnYyLmF1dGguQ29tbW9u",
            "VGxzQ29udGV4dBI+ChpyZXF1aXJlX2NsaWVudF9jZXJ0aWZpY2F0ZRgCIAEo",
            "CzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWUSLwoLcmVxdWlyZV9zbmkY",
            "AyABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlEkYKE3Nlc3Npb25f",
            "dGlja2V0X2tleXMYBCABKAsyJy5lbnZveS5hcGkudjIuYXV0aC5UbHNTZXNz",
            "aW9uVGlja2V0S2V5c0gAElMKJXNlc3Npb25fdGlja2V0X2tleXNfc2RzX3Nl",
            "Y3JldF9jb25maWcYBSABKAsyIi5lbnZveS5hcGkudjIuYXV0aC5TZHNTZWNy",
            "ZXRDb25maWdIABIuCiRkaXNhYmxlX3N0YXRlbGVzc19zZXNzaW9uX3Jlc3Vt",
            "cHRpb24YByABKAhIABJECg9zZXNzaW9uX3RpbWVvdXQYBiABKAsyGS5nb29n",
            "bGUucHJvdG9idWYuRHVyYXRpb25CEPpCDaoBChoGCICAgIAQMgBCGgoYc2Vz",
            "c2lvbl90aWNrZXRfa2V5c190eXBlIpAGChBDb21tb25UbHNDb250ZXh0EjQK",
            "CnRsc19wYXJhbXMYASABKAsyIC5lbnZveS5hcGkudjIuYXV0aC5UbHNQYXJh",
            "bWV0ZXJzEjsKEHRsc19jZXJ0aWZpY2F0ZXMYAiADKAsyIS5lbnZveS5hcGku",
            "djIuYXV0aC5UbHNDZXJ0aWZpY2F0ZRJYCiJ0bHNfY2VydGlmaWNhdGVfc2Rz",
            "X3NlY3JldF9jb25maWdzGAYgAygLMiIuZW52b3kuYXBpLnYyLmF1dGguU2Rz",
            "U2VjcmV0Q29uZmlnQgj6QgWSAQIQARJNChJ2YWxpZGF0aW9uX2NvbnRleHQY",
            "AyABKAsyLy5lbnZveS5hcGkudjIuYXV0aC5DZXJ0aWZpY2F0ZVZhbGlkYXRp",
            "b25Db250ZXh0SAASUgokdmFsaWRhdGlvbl9jb250ZXh0X3Nkc19zZWNyZXRf",
            "Y29uZmlnGAcgASgLMiIuZW52b3kuYXBpLnYyLmF1dGguU2RzU2VjcmV0Q29u",
            "ZmlnSAASbwobY29tYmluZWRfdmFsaWRhdGlvbl9jb250ZXh0GAggASgLMkgu",
            "ZW52b3kuYXBpLnYyLmF1dGguQ29tbW9uVGxzQ29udGV4dC5Db21iaW5lZENl",
            "cnRpZmljYXRlVmFsaWRhdGlvbkNvbnRleHRIABIWCg5hbHBuX3Byb3RvY29s",
            "cxgEIAMoCRrhAQokQ29tYmluZWRDZXJ0aWZpY2F0ZVZhbGlkYXRpb25Db250",
            "ZXh0El0KGmRlZmF1bHRfdmFsaWRhdGlvbl9jb250ZXh0GAEgASgLMi8uZW52",
            "b3kuYXBpLnYyLmF1dGguQ2VydGlmaWNhdGVWYWxpZGF0aW9uQ29udGV4dEII",
            "+kIFigECEAESWgokdmFsaWRhdGlvbl9jb250ZXh0X3Nkc19zZWNyZXRfY29u",
            "ZmlnGAIgASgLMiIuZW52b3kuYXBpLnYyLmF1dGguU2RzU2VjcmV0Q29uZmln",
            "Qgj6QgWKAQIQAUIZChd2YWxpZGF0aW9uX2NvbnRleHRfdHlwZUoECAUQBkJm",
            "Ch9pby5lbnZveXByb3h5LmVudm95LmFwaS52Mi5hdXRoQghUbHNQcm90b1AB",
            "8pj+jwUrEillbnZveS5leHRlbnNpb25zLnRyYW5zcG9ydF9zb2NrZXRzLnRs",
            "cy52M7qAyNEGAhABYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Envoy.Api.V2.Auth.CommonReflection.Descriptor, global::Envoy.Api.V2.Auth.SecretReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Udpa.Annotations.MigrateReflection.Descriptor, global::Udpa.Annotations.StatusReflection.Descriptor, global::Validate.ValidateReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V2.Auth.UpstreamTlsContext), global::Envoy.Api.V2.Auth.UpstreamTlsContext.Parser, new[]{ "CommonTlsContext", "Sni", "AllowRenegotiation", "MaxSessionKeys" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V2.Auth.DownstreamTlsContext), global::Envoy.Api.V2.Auth.DownstreamTlsContext.Parser, new[]{ "CommonTlsContext", "RequireClientCertificate", "RequireSni", "SessionTicketKeys", "SessionTicketKeysSdsSecretConfig", "DisableStatelessSessionResumption", "SessionTimeout" }, new[]{ "SessionTicketKeysType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V2.Auth.CommonTlsContext), global::Envoy.Api.V2.Auth.CommonTlsContext.Parser, new[]{ "TlsParams", "TlsCertificates", "TlsCertificateSdsSecretConfigs", "ValidationContext", "ValidationContextSdsSecretConfig", "CombinedValidationContext", "AlpnProtocols" }, new[]{ "ValidationContextType" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V2.Auth.CommonTlsContext.Types.CombinedCertificateValidationContext), global::Envoy.Api.V2.Auth.CommonTlsContext.Types.CombinedCertificateValidationContext.Parser, new[]{ "DefaultValidationContext", "ValidationContextSdsSecretConfig" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class UpstreamTlsContext : pb::IMessage<UpstreamTlsContext>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UpstreamTlsContext> _parser = new pb::MessageParser<UpstreamTlsContext>(() => new UpstreamTlsContext());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UpstreamTlsContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V2.Auth.TlsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UpstreamTlsContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UpstreamTlsContext(UpstreamTlsContext other) : this() {
      commonTlsContext_ = other.commonTlsContext_ != null ? other.commonTlsContext_.Clone() : null;
      sni_ = other.sni_;
      allowRenegotiation_ = other.allowRenegotiation_;
      MaxSessionKeys = other.MaxSessionKeys;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UpstreamTlsContext Clone() {
      return new UpstreamTlsContext(this);
    }

    /// <summary>Field number for the "common_tls_context" field.</summary>
    public const int CommonTlsContextFieldNumber = 1;
    private global::Envoy.Api.V2.Auth.CommonTlsContext commonTlsContext_;
    /// <summary>
    /// Common TLS context settings.
    ///
    /// .. attention::
    ///
    ///   Server certificate verification is not enabled by default. Configure
    ///   :ref:`trusted_ca&lt;envoy_api_field_auth.CertificateValidationContext.trusted_ca>` to enable
    ///   verification.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Api.V2.Auth.CommonTlsContext CommonTlsContext {
      get { return commonTlsContext_; }
      set {
        commonTlsContext_ = value;
      }
    }

    /// <summary>Field number for the "sni" field.</summary>
    public const int SniFieldNumber = 2;
    private string sni_ = "";
    /// <summary>
    /// SNI string to use when creating TLS backend connections.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Sni {
      get { return sni_; }
      set {
        sni_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "allow_renegotiation" field.</summary>
    public const int AllowRenegotiationFieldNumber = 3;
    private bool allowRenegotiation_;
    /// <summary>
    /// If true, server-initiated TLS renegotiation will be allowed.
    ///
    /// .. attention::
    ///
    ///   TLS renegotiation is considered insecure and shouldn't be used unless absolutely necessary.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AllowRenegotiation {
      get { return allowRenegotiation_; }
      set {
        allowRenegotiation_ = value;
      }
    }

    /// <summary>Field number for the "max_session_keys" field.</summary>
    public const int MaxSessionKeysFieldNumber = 4;
    private static readonly pb::FieldCodec<uint?> _single_maxSessionKeys_codec = pb::FieldCodec.ForStructWrapper<uint>(34);
    private uint? maxSessionKeys_;
    /// <summary>
    /// Maximum number of session keys (Pre-Shared Keys for TLSv1.3+, Session IDs and Session Tickets
    /// for TLSv1.2 and older) to store for the purpose of session resumption.
    ///
    /// Defaults to 1, setting this to 0 disables session resumption.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint? MaxSessionKeys {
      get { return maxSessionKeys_; }
      set {
        maxSessionKeys_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UpstreamTlsContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UpstreamTlsContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CommonTlsContext, other.CommonTlsContext)) return false;
      if (Sni != other.Sni) return false;
      if (AllowRenegotiation != other.AllowRenegotiation) return false;
      if (MaxSessionKeys != other.MaxSessionKeys) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (commonTlsContext_ != null) hash ^= CommonTlsContext.GetHashCode();
      if (Sni.Length != 0) hash ^= Sni.GetHashCode();
      if (AllowRenegotiation != false) hash ^= AllowRenegotiation.GetHashCode();
      if (maxSessionKeys_ != null) hash ^= MaxSessionKeys.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (commonTlsContext_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CommonTlsContext);
      }
      if (Sni.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Sni);
      }
      if (AllowRenegotiation != false) {
        output.WriteRawTag(24);
        output.WriteBool(AllowRenegotiation);
      }
      if (maxSessionKeys_ != null) {
        _single_maxSessionKeys_codec.WriteTagAndValue(output, MaxSessionKeys);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (commonTlsContext_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CommonTlsContext);
      }
      if (Sni.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Sni);
      }
      if (AllowRenegotiation != false) {
        output.WriteRawTag(24);
        output.WriteBool(AllowRenegotiation);
      }
      if (maxSessionKeys_ != null) {
        _single_maxSessionKeys_codec.WriteTagAndValue(ref output, MaxSessionKeys);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (commonTlsContext_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CommonTlsContext);
      }
      if (Sni.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sni);
      }
      if (AllowRenegotiation != false) {
        size += 1 + 1;
      }
      if (maxSessionKeys_ != null) {
        size += _single_maxSessionKeys_codec.CalculateSizeWithTag(MaxSessionKeys);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UpstreamTlsContext other) {
      if (other == null) {
        return;
      }
      if (other.commonTlsContext_ != null) {
        if (commonTlsContext_ == null) {
          CommonTlsContext = new global::Envoy.Api.V2.Auth.CommonTlsContext();
        }
        CommonTlsContext.MergeFrom(other.CommonTlsContext);
      }
      if (other.Sni.Length != 0) {
        Sni = other.Sni;
      }
      if (other.AllowRenegotiation != false) {
        AllowRenegotiation = other.AllowRenegotiation;
      }
      if (other.maxSessionKeys_ != null) {
        if (maxSessionKeys_ == null || other.MaxSessionKeys != 0) {
          MaxSessionKeys = other.MaxSessionKeys;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (commonTlsContext_ == null) {
              CommonTlsContext = new global::Envoy.Api.V2.Auth.CommonTlsContext();
            }
            input.ReadMessage(CommonTlsContext);
            break;
          }
          case 18: {
            Sni = input.ReadString();
            break;
          }
          case 24: {
            AllowRenegotiation = input.ReadBool();
            break;
          }
          case 34: {
            uint? value = _single_maxSessionKeys_codec.Read(input);
            if (maxSessionKeys_ == null || value != 0) {
              MaxSessionKeys = value;
            }
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (commonTlsContext_ == null) {
              CommonTlsContext = new global::Envoy.Api.V2.Auth.CommonTlsContext();
            }
            input.ReadMessage(CommonTlsContext);
            break;
          }
          case 18: {
            Sni = input.ReadString();
            break;
          }
          case 24: {
            AllowRenegotiation = input.ReadBool();
            break;
          }
          case 34: {
            uint? value = _single_maxSessionKeys_codec.Read(ref input);
            if (maxSessionKeys_ == null || value != 0) {
              MaxSessionKeys = value;
            }
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// [#next-free-field: 8]
  /// </summary>
  public sealed partial class DownstreamTlsContext : pb::IMessage<DownstreamTlsContext>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DownstreamTlsContext> _parser = new pb::MessageParser<DownstreamTlsContext>(() => new DownstreamTlsContext());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DownstreamTlsContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V2.Auth.TlsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DownstreamTlsContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DownstreamTlsContext(DownstreamTlsContext other) : this() {
      commonTlsContext_ = other.commonTlsContext_ != null ? other.commonTlsContext_.Clone() : null;
      RequireClientCertificate = other.RequireClientCertificate;
      RequireSni = other.RequireSni;
      sessionTimeout_ = other.sessionTimeout_ != null ? other.sessionTimeout_.Clone() : null;
      switch (other.SessionTicketKeysTypeCase) {
        case SessionTicketKeysTypeOneofCase.SessionTicketKeys:
          SessionTicketKeys = other.SessionTicketKeys.Clone();
          break;
        case SessionTicketKeysTypeOneofCase.SessionTicketKeysSdsSecretConfig:
          SessionTicketKeysSdsSecretConfig = other.SessionTicketKeysSdsSecretConfig.Clone();
          break;
        case SessionTicketKeysTypeOneofCase.DisableStatelessSessionResumption:
          DisableStatelessSessionResumption = other.DisableStatelessSessionResumption;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DownstreamTlsContext Clone() {
      return new DownstreamTlsContext(this);
    }

    /// <summary>Field number for the "common_tls_context" field.</summary>
    public const int CommonTlsContextFieldNumber = 1;
    private global::Envoy.Api.V2.Auth.CommonTlsContext commonTlsContext_;
    /// <summary>
    /// Common TLS context settings.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Api.V2.Auth.CommonTlsContext CommonTlsContext {
      get { return commonTlsContext_; }
      set {
        commonTlsContext_ = value;
      }
    }

    /// <summary>Field number for the "require_client_certificate" field.</summary>
    public const int RequireClientCertificateFieldNumber = 2;
    private static readonly pb::FieldCodec<bool?> _single_requireClientCertificate_codec = pb::FieldCodec.ForStructWrapper<bool>(18);
    private bool? requireClientCertificate_;
    /// <summary>
    /// If specified, Envoy will reject connections without a valid client
    /// certificate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool? RequireClientCertificate {
      get { return requireClientCertificate_; }
      set {
        requireClientCertificate_ = value;
      }
    }


    /// <summary>Field number for the "require_sni" field.</summary>
    public const int RequireSniFieldNumber = 3;
    private static readonly pb::FieldCodec<bool?> _single_requireSni_codec = pb::FieldCodec.ForStructWrapper<bool>(26);
    private bool? requireSni_;
    /// <summary>
    /// If specified, Envoy will reject connections without a valid and matching SNI.
    /// [#not-implemented-hide:]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool? RequireSni {
      get { return requireSni_; }
      set {
        requireSni_ = value;
      }
    }


    /// <summary>Field number for the "session_ticket_keys" field.</summary>
    public const int SessionTicketKeysFieldNumber = 4;
    /// <summary>
    /// TLS session ticket key settings.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Api.V2.Auth.TlsSessionTicketKeys SessionTicketKeys {
      get { return sessionTicketKeysTypeCase_ == SessionTicketKeysTypeOneofCase.SessionTicketKeys ? (global::Envoy.Api.V2.Auth.TlsSessionTicketKeys) sessionTicketKeysType_ : null; }
      set {
        sessionTicketKeysType_ = value;
        sessionTicketKeysTypeCase_ = value == null ? SessionTicketKeysTypeOneofCase.None : SessionTicketKeysTypeOneofCase.SessionTicketKeys;
      }
    }

    /// <summary>Field number for the "session_ticket_keys_sds_secret_config" field.</summary>
    public const int SessionTicketKeysSdsSecretConfigFieldNumber = 5;
    /// <summary>
    /// Config for fetching TLS session ticket keys via SDS API.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Api.V2.Auth.SdsSecretConfig SessionTicketKeysSdsSecretConfig {
      get { return sessionTicketKeysTypeCase_ == SessionTicketKeysTypeOneofCase.SessionTicketKeysSdsSecretConfig ? (global::Envoy.Api.V2.Auth.SdsSecretConfig) sessionTicketKeysType_ : null; }
      set {
        sessionTicketKeysType_ = value;
        sessionTicketKeysTypeCase_ = value == null ? SessionTicketKeysTypeOneofCase.None : SessionTicketKeysTypeOneofCase.SessionTicketKeysSdsSecretConfig;
      }
    }

    /// <summary>Field number for the "disable_stateless_session_resumption" field.</summary>
    public const int DisableStatelessSessionResumptionFieldNumber = 7;
    /// <summary>
    /// Config for controlling stateless TLS session resumption: setting this to true will cause the TLS
    /// server to not issue TLS session tickets for the purposes of stateless TLS session resumption.
    /// If set to false, the TLS server will issue TLS session tickets and encrypt/decrypt them using
    /// the keys specified through either :ref:`session_ticket_keys &lt;envoy_api_field_auth.DownstreamTlsContext.session_ticket_keys>`
    /// or :ref:`session_ticket_keys_sds_secret_config &lt;envoy_api_field_auth.DownstreamTlsContext.session_ticket_keys_sds_secret_config>`.
    /// If this config is set to false and no keys are explicitly configured, the TLS server will issue
    /// TLS session tickets and encrypt/decrypt them using an internally-generated and managed key, with the
    /// implication that sessions cannot be resumed across hot restarts or on different hosts.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DisableStatelessSessionResumption {
      get { return sessionTicketKeysTypeCase_ == SessionTicketKeysTypeOneofCase.DisableStatelessSessionResumption ? (bool) sessionTicketKeysType_ : false; }
      set {
        sessionTicketKeysType_ = value;
        sessionTicketKeysTypeCase_ = SessionTicketKeysTypeOneofCase.DisableStatelessSessionResumption;
      }
    }

    /// <summary>Field number for the "session_timeout" field.</summary>
    public const int SessionTimeoutFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Duration sessionTimeout_;
    /// <summary>
    /// If specified, session_timeout will change maximum lifetime (in seconds) of TLS session
    /// Currently this value is used as a hint to `TLS session ticket lifetime (for TLSv1.2)
    /// &lt;https://tools.ietf.org/html/rfc5077#section-5.6>`
    /// only seconds could be specified (fractional seconds are going to be ignored).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Duration SessionTimeout {
      get { return sessionTimeout_; }
      set {
        sessionTimeout_ = value;
      }
    }

    private object sessionTicketKeysType_;
    /// <summary>Enum of possible cases for the "session_ticket_keys_type" oneof.</summary>
    public enum SessionTicketKeysTypeOneofCase {
      None = 0,
      SessionTicketKeys = 4,
      SessionTicketKeysSdsSecretConfig = 5,
      DisableStatelessSessionResumption = 7,
    }
    private SessionTicketKeysTypeOneofCase sessionTicketKeysTypeCase_ = SessionTicketKeysTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SessionTicketKeysTypeOneofCase SessionTicketKeysTypeCase {
      get { return sessionTicketKeysTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSessionTicketKeysType() {
      sessionTicketKeysTypeCase_ = SessionTicketKeysTypeOneofCase.None;
      sessionTicketKeysType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DownstreamTlsContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DownstreamTlsContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CommonTlsContext, other.CommonTlsContext)) return false;
      if (RequireClientCertificate != other.RequireClientCertificate) return false;
      if (RequireSni != other.RequireSni) return false;
      if (!object.Equals(SessionTicketKeys, other.SessionTicketKeys)) return false;
      if (!object.Equals(SessionTicketKeysSdsSecretConfig, other.SessionTicketKeysSdsSecretConfig)) return false;
      if (DisableStatelessSessionResumption != other.DisableStatelessSessionResumption) return false;
      if (!object.Equals(SessionTimeout, other.SessionTimeout)) return false;
      if (SessionTicketKeysTypeCase != other.SessionTicketKeysTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (commonTlsContext_ != null) hash ^= CommonTlsContext.GetHashCode();
      if (requireClientCertificate_ != null) hash ^= RequireClientCertificate.GetHashCode();
      if (requireSni_ != null) hash ^= RequireSni.GetHashCode();
      if (sessionTicketKeysTypeCase_ == SessionTicketKeysTypeOneofCase.SessionTicketKeys) hash ^= SessionTicketKeys.GetHashCode();
      if (sessionTicketKeysTypeCase_ == SessionTicketKeysTypeOneofCase.SessionTicketKeysSdsSecretConfig) hash ^= SessionTicketKeysSdsSecretConfig.GetHashCode();
      if (sessionTicketKeysTypeCase_ == SessionTicketKeysTypeOneofCase.DisableStatelessSessionResumption) hash ^= DisableStatelessSessionResumption.GetHashCode();
      if (sessionTimeout_ != null) hash ^= SessionTimeout.GetHashCode();
      hash ^= (int) sessionTicketKeysTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (commonTlsContext_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CommonTlsContext);
      }
      if (requireClientCertificate_ != null) {
        _single_requireClientCertificate_codec.WriteTagAndValue(output, RequireClientCertificate);
      }
      if (requireSni_ != null) {
        _single_requireSni_codec.WriteTagAndValue(output, RequireSni);
      }
      if (sessionTicketKeysTypeCase_ == SessionTicketKeysTypeOneofCase.SessionTicketKeys) {
        output.WriteRawTag(34);
        output.WriteMessage(SessionTicketKeys);
      }
      if (sessionTicketKeysTypeCase_ == SessionTicketKeysTypeOneofCase.SessionTicketKeysSdsSecretConfig) {
        output.WriteRawTag(42);
        output.WriteMessage(SessionTicketKeysSdsSecretConfig);
      }
      if (sessionTimeout_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(SessionTimeout);
      }
      if (sessionTicketKeysTypeCase_ == SessionTicketKeysTypeOneofCase.DisableStatelessSessionResumption) {
        output.WriteRawTag(56);
        output.WriteBool(DisableStatelessSessionResumption);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (commonTlsContext_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CommonTlsContext);
      }
      if (requireClientCertificate_ != null) {
        _single_requireClientCertificate_codec.WriteTagAndValue(ref output, RequireClientCertificate);
      }
      if (requireSni_ != null) {
        _single_requireSni_codec.WriteTagAndValue(ref output, RequireSni);
      }
      if (sessionTicketKeysTypeCase_ == SessionTicketKeysTypeOneofCase.SessionTicketKeys) {
        output.WriteRawTag(34);
        output.WriteMessage(SessionTicketKeys);
      }
      if (sessionTicketKeysTypeCase_ == SessionTicketKeysTypeOneofCase.SessionTicketKeysSdsSecretConfig) {
        output.WriteRawTag(42);
        output.WriteMessage(SessionTicketKeysSdsSecretConfig);
      }
      if (sessionTimeout_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(SessionTimeout);
      }
      if (sessionTicketKeysTypeCase_ == SessionTicketKeysTypeOneofCase.DisableStatelessSessionResumption) {
        output.WriteRawTag(56);
        output.WriteBool(DisableStatelessSessionResumption);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (commonTlsContext_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CommonTlsContext);
      }
      if (requireClientCertificate_ != null) {
        size += _single_requireClientCertificate_codec.CalculateSizeWithTag(RequireClientCertificate);
      }
      if (requireSni_ != null) {
        size += _single_requireSni_codec.CalculateSizeWithTag(RequireSni);
      }
      if (sessionTicketKeysTypeCase_ == SessionTicketKeysTypeOneofCase.SessionTicketKeys) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SessionTicketKeys);
      }
      if (sessionTicketKeysTypeCase_ == SessionTicketKeysTypeOneofCase.SessionTicketKeysSdsSecretConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SessionTicketKeysSdsSecretConfig);
      }
      if (sessionTicketKeysTypeCase_ == SessionTicketKeysTypeOneofCase.DisableStatelessSessionResumption) {
        size += 1 + 1;
      }
      if (sessionTimeout_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SessionTimeout);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DownstreamTlsContext other) {
      if (other == null) {
        return;
      }
      if (other.commonTlsContext_ != null) {
        if (commonTlsContext_ == null) {
          CommonTlsContext = new global::Envoy.Api.V2.Auth.CommonTlsContext();
        }
        CommonTlsContext.MergeFrom(other.CommonTlsContext);
      }
      if (other.requireClientCertificate_ != null) {
        if (requireClientCertificate_ == null || other.RequireClientCertificate != false) {
          RequireClientCertificate = other.RequireClientCertificate;
        }
      }
      if (other.requireSni_ != null) {
        if (requireSni_ == null || other.RequireSni != false) {
          RequireSni = other.RequireSni;
        }
      }
      if (other.sessionTimeout_ != null) {
        if (sessionTimeout_ == null) {
          SessionTimeout = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        SessionTimeout.MergeFrom(other.SessionTimeout);
      }
      switch (other.SessionTicketKeysTypeCase) {
        case SessionTicketKeysTypeOneofCase.SessionTicketKeys:
          if (SessionTicketKeys == null) {
            SessionTicketKeys = new global::Envoy.Api.V2.Auth.TlsSessionTicketKeys();
          }
          SessionTicketKeys.MergeFrom(other.SessionTicketKeys);
          break;
        case SessionTicketKeysTypeOneofCase.SessionTicketKeysSdsSecretConfig:
          if (SessionTicketKeysSdsSecretConfig == null) {
            SessionTicketKeysSdsSecretConfig = new global::Envoy.Api.V2.Auth.SdsSecretConfig();
          }
          SessionTicketKeysSdsSecretConfig.MergeFrom(other.SessionTicketKeysSdsSecretConfig);
          break;
        case SessionTicketKeysTypeOneofCase.DisableStatelessSessionResumption:
          DisableStatelessSessionResumption = other.DisableStatelessSessionResumption;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (commonTlsContext_ == null) {
              CommonTlsContext = new global::Envoy.Api.V2.Auth.CommonTlsContext();
            }
            input.ReadMessage(CommonTlsContext);
            break;
          }
          case 18: {
            bool? value = _single_requireClientCertificate_codec.Read(input);
            if (requireClientCertificate_ == null || value != false) {
              RequireClientCertificate = value;
            }
            break;
          }
          case 26: {
            bool? value = _single_requireSni_codec.Read(input);
            if (requireSni_ == null || value != false) {
              RequireSni = value;
            }
            break;
          }
          case 34: {
            global::Envoy.Api.V2.Auth.TlsSessionTicketKeys subBuilder = new global::Envoy.Api.V2.Auth.TlsSessionTicketKeys();
            if (sessionTicketKeysTypeCase_ == SessionTicketKeysTypeOneofCase.SessionTicketKeys) {
              subBuilder.MergeFrom(SessionTicketKeys);
            }
            input.ReadMessage(subBuilder);
            SessionTicketKeys = subBuilder;
            break;
          }
          case 42: {
            global::Envoy.Api.V2.Auth.SdsSecretConfig subBuilder = new global::Envoy.Api.V2.Auth.SdsSecretConfig();
            if (sessionTicketKeysTypeCase_ == SessionTicketKeysTypeOneofCase.SessionTicketKeysSdsSecretConfig) {
              subBuilder.MergeFrom(SessionTicketKeysSdsSecretConfig);
            }
            input.ReadMessage(subBuilder);
            SessionTicketKeysSdsSecretConfig = subBuilder;
            break;
          }
          case 50: {
            if (sessionTimeout_ == null) {
              SessionTimeout = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(SessionTimeout);
            break;
          }
          case 56: {
            DisableStatelessSessionResumption = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (commonTlsContext_ == null) {
              CommonTlsContext = new global::Envoy.Api.V2.Auth.CommonTlsContext();
            }
            input.ReadMessage(CommonTlsContext);
            break;
          }
          case 18: {
            bool? value = _single_requireClientCertificate_codec.Read(ref input);
            if (requireClientCertificate_ == null || value != false) {
              RequireClientCertificate = value;
            }
            break;
          }
          case 26: {
            bool? value = _single_requireSni_codec.Read(ref input);
            if (requireSni_ == null || value != false) {
              RequireSni = value;
            }
            break;
          }
          case 34: {
            global::Envoy.Api.V2.Auth.TlsSessionTicketKeys subBuilder = new global::Envoy.Api.V2.Auth.TlsSessionTicketKeys();
            if (sessionTicketKeysTypeCase_ == SessionTicketKeysTypeOneofCase.SessionTicketKeys) {
              subBuilder.MergeFrom(SessionTicketKeys);
            }
            input.ReadMessage(subBuilder);
            SessionTicketKeys = subBuilder;
            break;
          }
          case 42: {
            global::Envoy.Api.V2.Auth.SdsSecretConfig subBuilder = new global::Envoy.Api.V2.Auth.SdsSecretConfig();
            if (sessionTicketKeysTypeCase_ == SessionTicketKeysTypeOneofCase.SessionTicketKeysSdsSecretConfig) {
              subBuilder.MergeFrom(SessionTicketKeysSdsSecretConfig);
            }
            input.ReadMessage(subBuilder);
            SessionTicketKeysSdsSecretConfig = subBuilder;
            break;
          }
          case 50: {
            if (sessionTimeout_ == null) {
              SessionTimeout = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(SessionTimeout);
            break;
          }
          case 56: {
            DisableStatelessSessionResumption = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// TLS context shared by both client and server TLS contexts.
  /// [#next-free-field: 9]
  /// </summary>
  public sealed partial class CommonTlsContext : pb::IMessage<CommonTlsContext>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CommonTlsContext> _parser = new pb::MessageParser<CommonTlsContext>(() => new CommonTlsContext());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CommonTlsContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V2.Auth.TlsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CommonTlsContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CommonTlsContext(CommonTlsContext other) : this() {
      tlsParams_ = other.tlsParams_ != null ? other.tlsParams_.Clone() : null;
      tlsCertificates_ = other.tlsCertificates_.Clone();
      tlsCertificateSdsSecretConfigs_ = other.tlsCertificateSdsSecretConfigs_.Clone();
      alpnProtocols_ = other.alpnProtocols_.Clone();
      switch (other.ValidationContextTypeCase) {
        case ValidationContextTypeOneofCase.ValidationContext:
          ValidationContext = other.ValidationContext.Clone();
          break;
        case ValidationContextTypeOneofCase.ValidationContextSdsSecretConfig:
          ValidationContextSdsSecretConfig = other.ValidationContextSdsSecretConfig.Clone();
          break;
        case ValidationContextTypeOneofCase.CombinedValidationContext:
          CombinedValidationContext = other.CombinedValidationContext.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CommonTlsContext Clone() {
      return new CommonTlsContext(this);
    }

    /// <summary>Field number for the "tls_params" field.</summary>
    public const int TlsParamsFieldNumber = 1;
    private global::Envoy.Api.V2.Auth.TlsParameters tlsParams_;
    /// <summary>
    /// TLS protocol versions, cipher suites etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Api.V2.Auth.TlsParameters TlsParams {
      get { return tlsParams_; }
      set {
        tlsParams_ = value;
      }
    }

    /// <summary>Field number for the "tls_certificates" field.</summary>
    public const int TlsCertificatesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Envoy.Api.V2.Auth.TlsCertificate> _repeated_tlsCertificates_codec
        = pb::FieldCodec.ForMessage(18, global::Envoy.Api.V2.Auth.TlsCertificate.Parser);
    private readonly pbc::RepeatedField<global::Envoy.Api.V2.Auth.TlsCertificate> tlsCertificates_ = new pbc::RepeatedField<global::Envoy.Api.V2.Auth.TlsCertificate>();
    /// <summary>
    /// :ref:`Multiple TLS certificates &lt;arch_overview_ssl_cert_select>` can be associated with the
    /// same context to allow both RSA and ECDSA certificates.
    ///
    /// Only a single TLS certificate is supported in client contexts. In server contexts, the first
    /// RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
    /// used for clients that support ECDSA.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Envoy.Api.V2.Auth.TlsCertificate> TlsCertificates {
      get { return tlsCertificates_; }
    }

    /// <summary>Field number for the "tls_certificate_sds_secret_configs" field.</summary>
    public const int TlsCertificateSdsSecretConfigsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Envoy.Api.V2.Auth.SdsSecretConfig> _repeated_tlsCertificateSdsSecretConfigs_codec
        = pb::FieldCodec.ForMessage(50, global::Envoy.Api.V2.Auth.SdsSecretConfig.Parser);
    private readonly pbc::RepeatedField<global::Envoy.Api.V2.Auth.SdsSecretConfig> tlsCertificateSdsSecretConfigs_ = new pbc::RepeatedField<global::Envoy.Api.V2.Auth.SdsSecretConfig>();
    /// <summary>
    /// Configs for fetching TLS certificates via SDS API.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Envoy.Api.V2.Auth.SdsSecretConfig> TlsCertificateSdsSecretConfigs {
      get { return tlsCertificateSdsSecretConfigs_; }
    }

    /// <summary>Field number for the "validation_context" field.</summary>
    public const int ValidationContextFieldNumber = 3;
    /// <summary>
    /// How to validate peer certificates.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Api.V2.Auth.CertificateValidationContext ValidationContext {
      get { return validationContextTypeCase_ == ValidationContextTypeOneofCase.ValidationContext ? (global::Envoy.Api.V2.Auth.CertificateValidationContext) validationContextType_ : null; }
      set {
        validationContextType_ = value;
        validationContextTypeCase_ = value == null ? ValidationContextTypeOneofCase.None : ValidationContextTypeOneofCase.ValidationContext;
      }
    }

    /// <summary>Field number for the "validation_context_sds_secret_config" field.</summary>
    public const int ValidationContextSdsSecretConfigFieldNumber = 7;
    /// <summary>
    /// Config for fetching validation context via SDS API.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Api.V2.Auth.SdsSecretConfig ValidationContextSdsSecretConfig {
      get { return validationContextTypeCase_ == ValidationContextTypeOneofCase.ValidationContextSdsSecretConfig ? (global::Envoy.Api.V2.Auth.SdsSecretConfig) validationContextType_ : null; }
      set {
        validationContextType_ = value;
        validationContextTypeCase_ = value == null ? ValidationContextTypeOneofCase.None : ValidationContextTypeOneofCase.ValidationContextSdsSecretConfig;
      }
    }

    /// <summary>Field number for the "combined_validation_context" field.</summary>
    public const int CombinedValidationContextFieldNumber = 8;
    /// <summary>
    /// Combined certificate validation context holds a default CertificateValidationContext
    /// and SDS config. When SDS server returns dynamic CertificateValidationContext, both dynamic
    /// and default CertificateValidationContext are merged into a new CertificateValidationContext
    /// for validation. This merge is done by Message::MergeFrom(), so dynamic
    /// CertificateValidationContext overwrites singular fields in default
    /// CertificateValidationContext, and concatenates repeated fields to default
    /// CertificateValidationContext, and logical OR is applied to boolean fields.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Api.V2.Auth.CommonTlsContext.Types.CombinedCertificateValidationContext CombinedValidationContext {
      get { return validationContextTypeCase_ == ValidationContextTypeOneofCase.CombinedValidationContext ? (global::Envoy.Api.V2.Auth.CommonTlsContext.Types.CombinedCertificateValidationContext) validationContextType_ : null; }
      set {
        validationContextType_ = value;
        validationContextTypeCase_ = value == null ? ValidationContextTypeOneofCase.None : ValidationContextTypeOneofCase.CombinedValidationContext;
      }
    }

    /// <summary>Field number for the "alpn_protocols" field.</summary>
    public const int AlpnProtocolsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_alpnProtocols_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> alpnProtocols_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Supplies the list of ALPN protocols that the listener should expose. In
    /// practice this is likely to be set to one of two values (see the
    /// :ref:`codec_type
    /// &lt;envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.codec_type>`
    /// parameter in the HTTP connection manager for more information):
    ///
    /// * "h2,http/1.1" If the listener is going to support both HTTP/2 and HTTP/1.1.
    /// * "http/1.1" If the listener is only going to support HTTP/1.1.
    ///
    /// There is no default for this parameter. If empty, Envoy will not expose ALPN.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> AlpnProtocols {
      get { return alpnProtocols_; }
    }

    private object validationContextType_;
    /// <summary>Enum of possible cases for the "validation_context_type" oneof.</summary>
    public enum ValidationContextTypeOneofCase {
      None = 0,
      ValidationContext = 3,
      ValidationContextSdsSecretConfig = 7,
      CombinedValidationContext = 8,
    }
    private ValidationContextTypeOneofCase validationContextTypeCase_ = ValidationContextTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ValidationContextTypeOneofCase ValidationContextTypeCase {
      get { return validationContextTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearValidationContextType() {
      validationContextTypeCase_ = ValidationContextTypeOneofCase.None;
      validationContextType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CommonTlsContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CommonTlsContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TlsParams, other.TlsParams)) return false;
      if(!tlsCertificates_.Equals(other.tlsCertificates_)) return false;
      if(!tlsCertificateSdsSecretConfigs_.Equals(other.tlsCertificateSdsSecretConfigs_)) return false;
      if (!object.Equals(ValidationContext, other.ValidationContext)) return false;
      if (!object.Equals(ValidationContextSdsSecretConfig, other.ValidationContextSdsSecretConfig)) return false;
      if (!object.Equals(CombinedValidationContext, other.CombinedValidationContext)) return false;
      if(!alpnProtocols_.Equals(other.alpnProtocols_)) return false;
      if (ValidationContextTypeCase != other.ValidationContextTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (tlsParams_ != null) hash ^= TlsParams.GetHashCode();
      hash ^= tlsCertificates_.GetHashCode();
      hash ^= tlsCertificateSdsSecretConfigs_.GetHashCode();
      if (validationContextTypeCase_ == ValidationContextTypeOneofCase.ValidationContext) hash ^= ValidationContext.GetHashCode();
      if (validationContextTypeCase_ == ValidationContextTypeOneofCase.ValidationContextSdsSecretConfig) hash ^= ValidationContextSdsSecretConfig.GetHashCode();
      if (validationContextTypeCase_ == ValidationContextTypeOneofCase.CombinedValidationContext) hash ^= CombinedValidationContext.GetHashCode();
      hash ^= alpnProtocols_.GetHashCode();
      hash ^= (int) validationContextTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (tlsParams_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TlsParams);
      }
      tlsCertificates_.WriteTo(output, _repeated_tlsCertificates_codec);
      if (validationContextTypeCase_ == ValidationContextTypeOneofCase.ValidationContext) {
        output.WriteRawTag(26);
        output.WriteMessage(ValidationContext);
      }
      alpnProtocols_.WriteTo(output, _repeated_alpnProtocols_codec);
      tlsCertificateSdsSecretConfigs_.WriteTo(output, _repeated_tlsCertificateSdsSecretConfigs_codec);
      if (validationContextTypeCase_ == ValidationContextTypeOneofCase.ValidationContextSdsSecretConfig) {
        output.WriteRawTag(58);
        output.WriteMessage(ValidationContextSdsSecretConfig);
      }
      if (validationContextTypeCase_ == ValidationContextTypeOneofCase.CombinedValidationContext) {
        output.WriteRawTag(66);
        output.WriteMessage(CombinedValidationContext);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (tlsParams_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TlsParams);
      }
      tlsCertificates_.WriteTo(ref output, _repeated_tlsCertificates_codec);
      if (validationContextTypeCase_ == ValidationContextTypeOneofCase.ValidationContext) {
        output.WriteRawTag(26);
        output.WriteMessage(ValidationContext);
      }
      alpnProtocols_.WriteTo(ref output, _repeated_alpnProtocols_codec);
      tlsCertificateSdsSecretConfigs_.WriteTo(ref output, _repeated_tlsCertificateSdsSecretConfigs_codec);
      if (validationContextTypeCase_ == ValidationContextTypeOneofCase.ValidationContextSdsSecretConfig) {
        output.WriteRawTag(58);
        output.WriteMessage(ValidationContextSdsSecretConfig);
      }
      if (validationContextTypeCase_ == ValidationContextTypeOneofCase.CombinedValidationContext) {
        output.WriteRawTag(66);
        output.WriteMessage(CombinedValidationContext);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (tlsParams_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TlsParams);
      }
      size += tlsCertificates_.CalculateSize(_repeated_tlsCertificates_codec);
      size += tlsCertificateSdsSecretConfigs_.CalculateSize(_repeated_tlsCertificateSdsSecretConfigs_codec);
      if (validationContextTypeCase_ == ValidationContextTypeOneofCase.ValidationContext) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ValidationContext);
      }
      if (validationContextTypeCase_ == ValidationContextTypeOneofCase.ValidationContextSdsSecretConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ValidationContextSdsSecretConfig);
      }
      if (validationContextTypeCase_ == ValidationContextTypeOneofCase.CombinedValidationContext) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CombinedValidationContext);
      }
      size += alpnProtocols_.CalculateSize(_repeated_alpnProtocols_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CommonTlsContext other) {
      if (other == null) {
        return;
      }
      if (other.tlsParams_ != null) {
        if (tlsParams_ == null) {
          TlsParams = new global::Envoy.Api.V2.Auth.TlsParameters();
        }
        TlsParams.MergeFrom(other.TlsParams);
      }
      tlsCertificates_.Add(other.tlsCertificates_);
      tlsCertificateSdsSecretConfigs_.Add(other.tlsCertificateSdsSecretConfigs_);
      alpnProtocols_.Add(other.alpnProtocols_);
      switch (other.ValidationContextTypeCase) {
        case ValidationContextTypeOneofCase.ValidationContext:
          if (ValidationContext == null) {
            ValidationContext = new global::Envoy.Api.V2.Auth.CertificateValidationContext();
          }
          ValidationContext.MergeFrom(other.ValidationContext);
          break;
        case ValidationContextTypeOneofCase.ValidationContextSdsSecretConfig:
          if (ValidationContextSdsSecretConfig == null) {
            ValidationContextSdsSecretConfig = new global::Envoy.Api.V2.Auth.SdsSecretConfig();
          }
          ValidationContextSdsSecretConfig.MergeFrom(other.ValidationContextSdsSecretConfig);
          break;
        case ValidationContextTypeOneofCase.CombinedValidationContext:
          if (CombinedValidationContext == null) {
            CombinedValidationContext = new global::Envoy.Api.V2.Auth.CommonTlsContext.Types.CombinedCertificateValidationContext();
          }
          CombinedValidationContext.MergeFrom(other.CombinedValidationContext);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (tlsParams_ == null) {
              TlsParams = new global::Envoy.Api.V2.Auth.TlsParameters();
            }
            input.ReadMessage(TlsParams);
            break;
          }
          case 18: {
            tlsCertificates_.AddEntriesFrom(input, _repeated_tlsCertificates_codec);
            break;
          }
          case 26: {
            global::Envoy.Api.V2.Auth.CertificateValidationContext subBuilder = new global::Envoy.Api.V2.Auth.CertificateValidationContext();
            if (validationContextTypeCase_ == ValidationContextTypeOneofCase.ValidationContext) {
              subBuilder.MergeFrom(ValidationContext);
            }
            input.ReadMessage(subBuilder);
            ValidationContext = subBuilder;
            break;
          }
          case 34: {
            alpnProtocols_.AddEntriesFrom(input, _repeated_alpnProtocols_codec);
            break;
          }
          case 50: {
            tlsCertificateSdsSecretConfigs_.AddEntriesFrom(input, _repeated_tlsCertificateSdsSecretConfigs_codec);
            break;
          }
          case 58: {
            global::Envoy.Api.V2.Auth.SdsSecretConfig subBuilder = new global::Envoy.Api.V2.Auth.SdsSecretConfig();
            if (validationContextTypeCase_ == ValidationContextTypeOneofCase.ValidationContextSdsSecretConfig) {
              subBuilder.MergeFrom(ValidationContextSdsSecretConfig);
            }
            input.ReadMessage(subBuilder);
            ValidationContextSdsSecretConfig = subBuilder;
            break;
          }
          case 66: {
            global::Envoy.Api.V2.Auth.CommonTlsContext.Types.CombinedCertificateValidationContext subBuilder = new global::Envoy.Api.V2.Auth.CommonTlsContext.Types.CombinedCertificateValidationContext();
            if (validationContextTypeCase_ == ValidationContextTypeOneofCase.CombinedValidationContext) {
              subBuilder.MergeFrom(CombinedValidationContext);
            }
            input.ReadMessage(subBuilder);
            CombinedValidationContext = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (tlsParams_ == null) {
              TlsParams = new global::Envoy.Api.V2.Auth.TlsParameters();
            }
            input.ReadMessage(TlsParams);
            break;
          }
          case 18: {
            tlsCertificates_.AddEntriesFrom(ref input, _repeated_tlsCertificates_codec);
            break;
          }
          case 26: {
            global::Envoy.Api.V2.Auth.CertificateValidationContext subBuilder = new global::Envoy.Api.V2.Auth.CertificateValidationContext();
            if (validationContextTypeCase_ == ValidationContextTypeOneofCase.ValidationContext) {
              subBuilder.MergeFrom(ValidationContext);
            }
            input.ReadMessage(subBuilder);
            ValidationContext = subBuilder;
            break;
          }
          case 34: {
            alpnProtocols_.AddEntriesFrom(ref input, _repeated_alpnProtocols_codec);
            break;
          }
          case 50: {
            tlsCertificateSdsSecretConfigs_.AddEntriesFrom(ref input, _repeated_tlsCertificateSdsSecretConfigs_codec);
            break;
          }
          case 58: {
            global::Envoy.Api.V2.Auth.SdsSecretConfig subBuilder = new global::Envoy.Api.V2.Auth.SdsSecretConfig();
            if (validationContextTypeCase_ == ValidationContextTypeOneofCase.ValidationContextSdsSecretConfig) {
              subBuilder.MergeFrom(ValidationContextSdsSecretConfig);
            }
            input.ReadMessage(subBuilder);
            ValidationContextSdsSecretConfig = subBuilder;
            break;
          }
          case 66: {
            global::Envoy.Api.V2.Auth.CommonTlsContext.Types.CombinedCertificateValidationContext subBuilder = new global::Envoy.Api.V2.Auth.CommonTlsContext.Types.CombinedCertificateValidationContext();
            if (validationContextTypeCase_ == ValidationContextTypeOneofCase.CombinedValidationContext) {
              subBuilder.MergeFrom(CombinedValidationContext);
            }
            input.ReadMessage(subBuilder);
            CombinedValidationContext = subBuilder;
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CommonTlsContext message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class CombinedCertificateValidationContext : pb::IMessage<CombinedCertificateValidationContext>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<CombinedCertificateValidationContext> _parser = new pb::MessageParser<CombinedCertificateValidationContext>(() => new CombinedCertificateValidationContext());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<CombinedCertificateValidationContext> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Envoy.Api.V2.Auth.CommonTlsContext.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public CombinedCertificateValidationContext() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public CombinedCertificateValidationContext(CombinedCertificateValidationContext other) : this() {
          defaultValidationContext_ = other.defaultValidationContext_ != null ? other.defaultValidationContext_.Clone() : null;
          validationContextSdsSecretConfig_ = other.validationContextSdsSecretConfig_ != null ? other.validationContextSdsSecretConfig_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public CombinedCertificateValidationContext Clone() {
          return new CombinedCertificateValidationContext(this);
        }

        /// <summary>Field number for the "default_validation_context" field.</summary>
        public const int DefaultValidationContextFieldNumber = 1;
        private global::Envoy.Api.V2.Auth.CertificateValidationContext defaultValidationContext_;
        /// <summary>
        /// How to validate peer certificates.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Envoy.Api.V2.Auth.CertificateValidationContext DefaultValidationContext {
          get { return defaultValidationContext_; }
          set {
            defaultValidationContext_ = value;
          }
        }

        /// <summary>Field number for the "validation_context_sds_secret_config" field.</summary>
        public const int ValidationContextSdsSecretConfigFieldNumber = 2;
        private global::Envoy.Api.V2.Auth.SdsSecretConfig validationContextSdsSecretConfig_;
        /// <summary>
        /// Config for fetching validation context via SDS API.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Envoy.Api.V2.Auth.SdsSecretConfig ValidationContextSdsSecretConfig {
          get { return validationContextSdsSecretConfig_; }
          set {
            validationContextSdsSecretConfig_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as CombinedCertificateValidationContext);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(CombinedCertificateValidationContext other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(DefaultValidationContext, other.DefaultValidationContext)) return false;
          if (!object.Equals(ValidationContextSdsSecretConfig, other.ValidationContextSdsSecretConfig)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (defaultValidationContext_ != null) hash ^= DefaultValidationContext.GetHashCode();
          if (validationContextSdsSecretConfig_ != null) hash ^= ValidationContextSdsSecretConfig.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (defaultValidationContext_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(DefaultValidationContext);
          }
          if (validationContextSdsSecretConfig_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(ValidationContextSdsSecretConfig);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (defaultValidationContext_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(DefaultValidationContext);
          }
          if (validationContextSdsSecretConfig_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(ValidationContextSdsSecretConfig);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (defaultValidationContext_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(DefaultValidationContext);
          }
          if (validationContextSdsSecretConfig_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ValidationContextSdsSecretConfig);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(CombinedCertificateValidationContext other) {
          if (other == null) {
            return;
          }
          if (other.defaultValidationContext_ != null) {
            if (defaultValidationContext_ == null) {
              DefaultValidationContext = new global::Envoy.Api.V2.Auth.CertificateValidationContext();
            }
            DefaultValidationContext.MergeFrom(other.DefaultValidationContext);
          }
          if (other.validationContextSdsSecretConfig_ != null) {
            if (validationContextSdsSecretConfig_ == null) {
              ValidationContextSdsSecretConfig = new global::Envoy.Api.V2.Auth.SdsSecretConfig();
            }
            ValidationContextSdsSecretConfig.MergeFrom(other.ValidationContextSdsSecretConfig);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (defaultValidationContext_ == null) {
                  DefaultValidationContext = new global::Envoy.Api.V2.Auth.CertificateValidationContext();
                }
                input.ReadMessage(DefaultValidationContext);
                break;
              }
              case 18: {
                if (validationContextSdsSecretConfig_ == null) {
                  ValidationContextSdsSecretConfig = new global::Envoy.Api.V2.Auth.SdsSecretConfig();
                }
                input.ReadMessage(ValidationContextSdsSecretConfig);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (defaultValidationContext_ == null) {
                  DefaultValidationContext = new global::Envoy.Api.V2.Auth.CertificateValidationContext();
                }
                input.ReadMessage(DefaultValidationContext);
                break;
              }
              case 18: {
                if (validationContextSdsSecretConfig_ == null) {
                  ValidationContextSdsSecretConfig = new global::Envoy.Api.V2.Auth.SdsSecretConfig();
                }
                input.ReadMessage(ValidationContextSdsSecretConfig);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
