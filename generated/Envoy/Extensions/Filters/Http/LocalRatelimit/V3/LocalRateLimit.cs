// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/extensions/filters/http/local_ratelimit/v3/local_rate_limit.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Extensions.Filters.Http.LocalRatelimit.V3 {

  /// <summary>Holder for reflection information generated from envoy/extensions/filters/http/local_ratelimit/v3/local_rate_limit.proto</summary>
  public static partial class LocalRateLimitReflection {

    #region Descriptor
    /// <summary>File descriptor for envoy/extensions/filters/http/local_ratelimit/v3/local_rate_limit.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LocalRateLimitReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CkdlbnZveS9leHRlbnNpb25zL2ZpbHRlcnMvaHR0cC9sb2NhbF9yYXRlbGlt",
            "aXQvdjMvbG9jYWxfcmF0ZV9saW1pdC5wcm90bxIwZW52b3kuZXh0ZW5zaW9u",
            "cy5maWx0ZXJzLmh0dHAubG9jYWxfcmF0ZWxpbWl0LnYzGh9lbnZveS9jb25m",
            "aWcvY29yZS92My9iYXNlLnByb3RvGjRlbnZveS9leHRlbnNpb25zL2NvbW1v",
            "bi9yYXRlbGltaXQvdjMvcmF0ZWxpbWl0LnByb3RvGh9lbnZveS90eXBlL3Yz",
            "L2h0dHBfc3RhdHVzLnByb3RvGiBlbnZveS90eXBlL3YzL3Rva2VuX2J1Y2tl",
            "dC5wcm90bxoddWRwYS9hbm5vdGF0aW9ucy9zdGF0dXMucHJvdG8aF3ZhbGlk",
            "YXRlL3ZhbGlkYXRlLnByb3RvIvYECg5Mb2NhbFJhdGVMaW1pdBIcCgtzdGF0",
            "X3ByZWZpeBgBIAEoCUIH+kIEcgIQARIpCgZzdGF0dXMYAiABKAsyGS5lbnZv",
            "eS50eXBlLnYzLkh0dHBTdGF0dXMSMAoMdG9rZW5fYnVja2V0GAMgASgLMhou",
            "ZW52b3kudHlwZS52My5Ub2tlbkJ1Y2tldBJGCg5maWx0ZXJfZW5hYmxlZBgE",
            "IAEoCzIuLmVudm95LmNvbmZpZy5jb3JlLnYzLlJ1bnRpbWVGcmFjdGlvbmFs",
            "UGVyY2VudBJHCg9maWx0ZXJfZW5mb3JjZWQYBSABKAsyLi5lbnZveS5jb25m",
            "aWcuY29yZS52My5SdW50aW1lRnJhY3Rpb25hbFBlcmNlbnQSYwoocmVxdWVz",
            "dF9oZWFkZXJzX3RvX2FkZF93aGVuX25vdF9lbmZvcmNlZBgKIAMoCzInLmVu",
            "dm95LmNvbmZpZy5jb3JlLnYzLkhlYWRlclZhbHVlT3B0aW9uQgj6QgWSAQIQ",
            "ChJSChdyZXNwb25zZV9oZWFkZXJzX3RvX2FkZBgGIAMoCzInLmVudm95LmNv",
            "bmZpZy5jb3JlLnYzLkhlYWRlclZhbHVlT3B0aW9uQgj6QgWSAQIQChJTCgtk",
            "ZXNjcmlwdG9ycxgIIAMoCzI+LmVudm95LmV4dGVuc2lvbnMuY29tbW9uLnJh",
            "dGVsaW1pdC52My5Mb2NhbFJhdGVMaW1pdERlc2NyaXB0b3ISFgoFc3RhZ2UY",
            "CSABKA1CB/pCBCoCGAoSMgoqbG9jYWxfcmF0ZV9saW1pdF9wZXJfZG93bnN0",
            "cmVhbV9jb25uZWN0aW9uGAsgASgIQl8KPmlvLmVudm95cHJveHkuZW52b3ku",
            "ZXh0ZW5zaW9ucy5maWx0ZXJzLmh0dHAubG9jYWxfcmF0ZWxpbWl0LnYzQhNM",
            "b2NhbFJhdGVMaW1pdFByb3RvUAG6gMjRBgIQAmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Envoy.Config.Core.V3.BaseReflection.Descriptor, global::Envoy.Extensions.Common.Ratelimit.V3.RatelimitReflection.Descriptor, global::Envoy.Type.V3.HttpStatusReflection.Descriptor, global::Envoy.Type.V3.TokenBucketReflection.Descriptor, global::Udpa.Annotations.StatusReflection.Descriptor, global::Validate.ValidateReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Extensions.Filters.Http.LocalRatelimit.V3.LocalRateLimit), global::Envoy.Extensions.Filters.Http.LocalRatelimit.V3.LocalRateLimit.Parser, new[]{ "StatPrefix", "Status", "TokenBucket", "FilterEnabled", "FilterEnforced", "RequestHeadersToAddWhenNotEnforced", "ResponseHeadersToAdd", "Descriptors", "Stage", "LocalRateLimitPerDownstreamConnection" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// [#next-free-field: 12]
  /// </summary>
  public sealed partial class LocalRateLimit : pb::IMessage<LocalRateLimit>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LocalRateLimit> _parser = new pb::MessageParser<LocalRateLimit>(() => new LocalRateLimit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<LocalRateLimit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Extensions.Filters.Http.LocalRatelimit.V3.LocalRateLimitReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LocalRateLimit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LocalRateLimit(LocalRateLimit other) : this() {
      statPrefix_ = other.statPrefix_;
      status_ = other.status_ != null ? other.status_.Clone() : null;
      tokenBucket_ = other.tokenBucket_ != null ? other.tokenBucket_.Clone() : null;
      filterEnabled_ = other.filterEnabled_ != null ? other.filterEnabled_.Clone() : null;
      filterEnforced_ = other.filterEnforced_ != null ? other.filterEnforced_.Clone() : null;
      requestHeadersToAddWhenNotEnforced_ = other.requestHeadersToAddWhenNotEnforced_.Clone();
      responseHeadersToAdd_ = other.responseHeadersToAdd_.Clone();
      descriptors_ = other.descriptors_.Clone();
      stage_ = other.stage_;
      localRateLimitPerDownstreamConnection_ = other.localRateLimitPerDownstreamConnection_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LocalRateLimit Clone() {
      return new LocalRateLimit(this);
    }

    /// <summary>Field number for the "stat_prefix" field.</summary>
    public const int StatPrefixFieldNumber = 1;
    private string statPrefix_ = "";
    /// <summary>
    /// The human readable prefix to use when emitting stats.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string StatPrefix {
      get { return statPrefix_; }
      set {
        statPrefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::Envoy.Type.V3.HttpStatus status_;
    /// <summary>
    /// This field allows for a custom HTTP response status code to the downstream client when
    /// the request has been rate limited.
    /// Defaults to 429 (TooManyRequests).
    ///
    /// .. note::
    ///   If this is set to &lt; 400, 429 will be used instead.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Type.V3.HttpStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "token_bucket" field.</summary>
    public const int TokenBucketFieldNumber = 3;
    private global::Envoy.Type.V3.TokenBucket tokenBucket_;
    /// <summary>
    /// The token bucket configuration to use for rate limiting requests that are processed by this
    /// filter. Each request processed by the filter consumes a single token. If the token is available,
    /// the request will be allowed. If no tokens are available, the request will receive the configured
    /// rate limit status.
    ///
    /// .. note::
    ///   It's fine for the token bucket to be unset for the global configuration since the rate limit
    ///   can be applied at a the virtual host or route level. Thus, the token bucket must be set
    ///   for the per route configuration otherwise the config will be rejected.
    ///
    /// .. note::
    ///   When using per route configuration, the bucket becomes unique to that route.
    ///
    /// .. note::
    ///   In the current implementation the token bucket's :ref:`fill_interval
    ///   &lt;envoy_v3_api_field_type.v3.TokenBucket.fill_interval>` must be >= 50ms to avoid too aggressive
    ///   refills.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Type.V3.TokenBucket TokenBucket {
      get { return tokenBucket_; }
      set {
        tokenBucket_ = value;
      }
    }

    /// <summary>Field number for the "filter_enabled" field.</summary>
    public const int FilterEnabledFieldNumber = 4;
    private global::Envoy.Config.Core.V3.RuntimeFractionalPercent filterEnabled_;
    /// <summary>
    /// If set, this will enable -- but not necessarily enforce -- the rate limit for the given
    /// fraction of requests.
    /// Defaults to 0% of requests for safety.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Config.Core.V3.RuntimeFractionalPercent FilterEnabled {
      get { return filterEnabled_; }
      set {
        filterEnabled_ = value;
      }
    }

    /// <summary>Field number for the "filter_enforced" field.</summary>
    public const int FilterEnforcedFieldNumber = 5;
    private global::Envoy.Config.Core.V3.RuntimeFractionalPercent filterEnforced_;
    /// <summary>
    /// If set, this will enforce the rate limit decisions for the given fraction of requests.
    ///
    /// Note: this only applies to the fraction of enabled requests.
    ///
    /// Defaults to 0% of requests for safety.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Config.Core.V3.RuntimeFractionalPercent FilterEnforced {
      get { return filterEnforced_; }
      set {
        filterEnforced_ = value;
      }
    }

    /// <summary>Field number for the "request_headers_to_add_when_not_enforced" field.</summary>
    public const int RequestHeadersToAddWhenNotEnforcedFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Envoy.Config.Core.V3.HeaderValueOption> _repeated_requestHeadersToAddWhenNotEnforced_codec
        = pb::FieldCodec.ForMessage(82, global::Envoy.Config.Core.V3.HeaderValueOption.Parser);
    private readonly pbc::RepeatedField<global::Envoy.Config.Core.V3.HeaderValueOption> requestHeadersToAddWhenNotEnforced_ = new pbc::RepeatedField<global::Envoy.Config.Core.V3.HeaderValueOption>();
    /// <summary>
    /// Specifies a list of HTTP headers that should be added to each request that
    /// has been rate limited and is also forwarded upstream. This can only occur when the
    /// filter is enabled but not enforced.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Envoy.Config.Core.V3.HeaderValueOption> RequestHeadersToAddWhenNotEnforced {
      get { return requestHeadersToAddWhenNotEnforced_; }
    }

    /// <summary>Field number for the "response_headers_to_add" field.</summary>
    public const int ResponseHeadersToAddFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Envoy.Config.Core.V3.HeaderValueOption> _repeated_responseHeadersToAdd_codec
        = pb::FieldCodec.ForMessage(50, global::Envoy.Config.Core.V3.HeaderValueOption.Parser);
    private readonly pbc::RepeatedField<global::Envoy.Config.Core.V3.HeaderValueOption> responseHeadersToAdd_ = new pbc::RepeatedField<global::Envoy.Config.Core.V3.HeaderValueOption>();
    /// <summary>
    /// Specifies a list of HTTP headers that should be added to each response for requests that
    /// have been rate limited. This occurs when the filter is either enabled or fully enforced.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Envoy.Config.Core.V3.HeaderValueOption> ResponseHeadersToAdd {
      get { return responseHeadersToAdd_; }
    }

    /// <summary>Field number for the "descriptors" field.</summary>
    public const int DescriptorsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Envoy.Extensions.Common.Ratelimit.V3.LocalRateLimitDescriptor> _repeated_descriptors_codec
        = pb::FieldCodec.ForMessage(66, global::Envoy.Extensions.Common.Ratelimit.V3.LocalRateLimitDescriptor.Parser);
    private readonly pbc::RepeatedField<global::Envoy.Extensions.Common.Ratelimit.V3.LocalRateLimitDescriptor> descriptors_ = new pbc::RepeatedField<global::Envoy.Extensions.Common.Ratelimit.V3.LocalRateLimitDescriptor>();
    /// <summary>
    /// The rate limit descriptor list to use in the local rate limit to override
    /// on. The rate limit descriptor is selected by the first full match from the
    /// request descriptors.
    ///
    /// Example on how to use ::ref:`this &lt;config_http_filters_local_rate_limit_descriptors>`
    ///
    /// .. note::
    ///
    ///   In the current implementation the descriptor's token bucket :ref:`fill_interval
    ///   &lt;envoy_v3_api_field_type.v3.TokenBucket.fill_interval>` must be a multiple
    ///   global :ref:`token bucket's&lt;envoy_v3_api_field_extensions.filters.http.local_ratelimit.v3.LocalRateLimit.token_bucket>` fill interval.
    ///
    ///   The descriptors must match verbatim for rate limiting to apply. There is no partial
    ///   match by a subset of descriptor entries in the current implementation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Envoy.Extensions.Common.Ratelimit.V3.LocalRateLimitDescriptor> Descriptors {
      get { return descriptors_; }
    }

    /// <summary>Field number for the "stage" field.</summary>
    public const int StageFieldNumber = 9;
    private uint stage_;
    /// <summary>
    /// Specifies the rate limit configurations to be applied with the same
    /// stage number. If not set, the default stage number is 0.
    ///
    /// .. note::
    ///
    ///  The filter supports a range of 0 - 10 inclusively for stage numbers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Stage {
      get { return stage_; }
      set {
        stage_ = value;
      }
    }

    /// <summary>Field number for the "local_rate_limit_per_downstream_connection" field.</summary>
    public const int LocalRateLimitPerDownstreamConnectionFieldNumber = 11;
    private bool localRateLimitPerDownstreamConnection_;
    /// <summary>
    /// Specifies the scope of the rate limiter's token bucket.
    /// If set to false, the token bucket is shared across all worker threads,
    /// thus the rate limits are applied per Envoy process.
    /// If set to true, a token bucket is allocated for each connection.
    /// Thus the rate limits are applied per connection thereby allowing
    /// one to rate limit requests on a per connection basis.
    /// If unspecified, the default value is false.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool LocalRateLimitPerDownstreamConnection {
      get { return localRateLimitPerDownstreamConnection_; }
      set {
        localRateLimitPerDownstreamConnection_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as LocalRateLimit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(LocalRateLimit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StatPrefix != other.StatPrefix) return false;
      if (!object.Equals(Status, other.Status)) return false;
      if (!object.Equals(TokenBucket, other.TokenBucket)) return false;
      if (!object.Equals(FilterEnabled, other.FilterEnabled)) return false;
      if (!object.Equals(FilterEnforced, other.FilterEnforced)) return false;
      if(!requestHeadersToAddWhenNotEnforced_.Equals(other.requestHeadersToAddWhenNotEnforced_)) return false;
      if(!responseHeadersToAdd_.Equals(other.responseHeadersToAdd_)) return false;
      if(!descriptors_.Equals(other.descriptors_)) return false;
      if (Stage != other.Stage) return false;
      if (LocalRateLimitPerDownstreamConnection != other.LocalRateLimitPerDownstreamConnection) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (StatPrefix.Length != 0) hash ^= StatPrefix.GetHashCode();
      if (status_ != null) hash ^= Status.GetHashCode();
      if (tokenBucket_ != null) hash ^= TokenBucket.GetHashCode();
      if (filterEnabled_ != null) hash ^= FilterEnabled.GetHashCode();
      if (filterEnforced_ != null) hash ^= FilterEnforced.GetHashCode();
      hash ^= requestHeadersToAddWhenNotEnforced_.GetHashCode();
      hash ^= responseHeadersToAdd_.GetHashCode();
      hash ^= descriptors_.GetHashCode();
      if (Stage != 0) hash ^= Stage.GetHashCode();
      if (LocalRateLimitPerDownstreamConnection != false) hash ^= LocalRateLimitPerDownstreamConnection.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (StatPrefix.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StatPrefix);
      }
      if (status_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Status);
      }
      if (tokenBucket_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TokenBucket);
      }
      if (filterEnabled_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(FilterEnabled);
      }
      if (filterEnforced_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(FilterEnforced);
      }
      responseHeadersToAdd_.WriteTo(output, _repeated_responseHeadersToAdd_codec);
      descriptors_.WriteTo(output, _repeated_descriptors_codec);
      if (Stage != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Stage);
      }
      requestHeadersToAddWhenNotEnforced_.WriteTo(output, _repeated_requestHeadersToAddWhenNotEnforced_codec);
      if (LocalRateLimitPerDownstreamConnection != false) {
        output.WriteRawTag(88);
        output.WriteBool(LocalRateLimitPerDownstreamConnection);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (StatPrefix.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StatPrefix);
      }
      if (status_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Status);
      }
      if (tokenBucket_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TokenBucket);
      }
      if (filterEnabled_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(FilterEnabled);
      }
      if (filterEnforced_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(FilterEnforced);
      }
      responseHeadersToAdd_.WriteTo(ref output, _repeated_responseHeadersToAdd_codec);
      descriptors_.WriteTo(ref output, _repeated_descriptors_codec);
      if (Stage != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Stage);
      }
      requestHeadersToAddWhenNotEnforced_.WriteTo(ref output, _repeated_requestHeadersToAddWhenNotEnforced_codec);
      if (LocalRateLimitPerDownstreamConnection != false) {
        output.WriteRawTag(88);
        output.WriteBool(LocalRateLimitPerDownstreamConnection);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (StatPrefix.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StatPrefix);
      }
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (tokenBucket_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TokenBucket);
      }
      if (filterEnabled_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FilterEnabled);
      }
      if (filterEnforced_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FilterEnforced);
      }
      size += requestHeadersToAddWhenNotEnforced_.CalculateSize(_repeated_requestHeadersToAddWhenNotEnforced_codec);
      size += responseHeadersToAdd_.CalculateSize(_repeated_responseHeadersToAdd_codec);
      size += descriptors_.CalculateSize(_repeated_descriptors_codec);
      if (Stage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Stage);
      }
      if (LocalRateLimitPerDownstreamConnection != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(LocalRateLimit other) {
      if (other == null) {
        return;
      }
      if (other.StatPrefix.Length != 0) {
        StatPrefix = other.StatPrefix;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Envoy.Type.V3.HttpStatus();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.tokenBucket_ != null) {
        if (tokenBucket_ == null) {
          TokenBucket = new global::Envoy.Type.V3.TokenBucket();
        }
        TokenBucket.MergeFrom(other.TokenBucket);
      }
      if (other.filterEnabled_ != null) {
        if (filterEnabled_ == null) {
          FilterEnabled = new global::Envoy.Config.Core.V3.RuntimeFractionalPercent();
        }
        FilterEnabled.MergeFrom(other.FilterEnabled);
      }
      if (other.filterEnforced_ != null) {
        if (filterEnforced_ == null) {
          FilterEnforced = new global::Envoy.Config.Core.V3.RuntimeFractionalPercent();
        }
        FilterEnforced.MergeFrom(other.FilterEnforced);
      }
      requestHeadersToAddWhenNotEnforced_.Add(other.requestHeadersToAddWhenNotEnforced_);
      responseHeadersToAdd_.Add(other.responseHeadersToAdd_);
      descriptors_.Add(other.descriptors_);
      if (other.Stage != 0) {
        Stage = other.Stage;
      }
      if (other.LocalRateLimitPerDownstreamConnection != false) {
        LocalRateLimitPerDownstreamConnection = other.LocalRateLimitPerDownstreamConnection;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            StatPrefix = input.ReadString();
            break;
          }
          case 18: {
            if (status_ == null) {
              Status = new global::Envoy.Type.V3.HttpStatus();
            }
            input.ReadMessage(Status);
            break;
          }
          case 26: {
            if (tokenBucket_ == null) {
              TokenBucket = new global::Envoy.Type.V3.TokenBucket();
            }
            input.ReadMessage(TokenBucket);
            break;
          }
          case 34: {
            if (filterEnabled_ == null) {
              FilterEnabled = new global::Envoy.Config.Core.V3.RuntimeFractionalPercent();
            }
            input.ReadMessage(FilterEnabled);
            break;
          }
          case 42: {
            if (filterEnforced_ == null) {
              FilterEnforced = new global::Envoy.Config.Core.V3.RuntimeFractionalPercent();
            }
            input.ReadMessage(FilterEnforced);
            break;
          }
          case 50: {
            responseHeadersToAdd_.AddEntriesFrom(input, _repeated_responseHeadersToAdd_codec);
            break;
          }
          case 66: {
            descriptors_.AddEntriesFrom(input, _repeated_descriptors_codec);
            break;
          }
          case 72: {
            Stage = input.ReadUInt32();
            break;
          }
          case 82: {
            requestHeadersToAddWhenNotEnforced_.AddEntriesFrom(input, _repeated_requestHeadersToAddWhenNotEnforced_codec);
            break;
          }
          case 88: {
            LocalRateLimitPerDownstreamConnection = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            StatPrefix = input.ReadString();
            break;
          }
          case 18: {
            if (status_ == null) {
              Status = new global::Envoy.Type.V3.HttpStatus();
            }
            input.ReadMessage(Status);
            break;
          }
          case 26: {
            if (tokenBucket_ == null) {
              TokenBucket = new global::Envoy.Type.V3.TokenBucket();
            }
            input.ReadMessage(TokenBucket);
            break;
          }
          case 34: {
            if (filterEnabled_ == null) {
              FilterEnabled = new global::Envoy.Config.Core.V3.RuntimeFractionalPercent();
            }
            input.ReadMessage(FilterEnabled);
            break;
          }
          case 42: {
            if (filterEnforced_ == null) {
              FilterEnforced = new global::Envoy.Config.Core.V3.RuntimeFractionalPercent();
            }
            input.ReadMessage(FilterEnforced);
            break;
          }
          case 50: {
            responseHeadersToAdd_.AddEntriesFrom(ref input, _repeated_responseHeadersToAdd_codec);
            break;
          }
          case 66: {
            descriptors_.AddEntriesFrom(ref input, _repeated_descriptors_codec);
            break;
          }
          case 72: {
            Stage = input.ReadUInt32();
            break;
          }
          case 82: {
            requestHeadersToAddWhenNotEnforced_.AddEntriesFrom(ref input, _repeated_requestHeadersToAddWhenNotEnforced_codec);
            break;
          }
          case 88: {
            LocalRateLimitPerDownstreamConnection = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
