// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/extensions/rbac/matchers/upstream_ip_port/v3/upstream_ip_port_matcher.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Extensions.Rbac.Matchers.UpstreamIpPort.V3 {

  /// <summary>Holder for reflection information generated from envoy/extensions/rbac/matchers/upstream_ip_port/v3/upstream_ip_port_matcher.proto</summary>
  public static partial class UpstreamIpPortMatcherReflection {

    #region Descriptor
    /// <summary>File descriptor for envoy/extensions/rbac/matchers/upstream_ip_port/v3/upstream_ip_port_matcher.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static UpstreamIpPortMatcherReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ClFlbnZveS9leHRlbnNpb25zL3JiYWMvbWF0Y2hlcnMvdXBzdHJlYW1faXBf",
            "cG9ydC92My91cHN0cmVhbV9pcF9wb3J0X21hdGNoZXIucHJvdG8SMmVudm95",
            "LmV4dGVuc2lvbnMucmJhYy5tYXRjaGVycy51cHN0cmVhbV9pcF9wb3J0LnYz",
            "GiJlbnZveS9jb25maWcvY29yZS92My9hZGRyZXNzLnByb3RvGhllbnZveS90",
            "eXBlL3YzL3JhbmdlLnByb3RvGh11ZHBhL2Fubm90YXRpb25zL3N0YXR1cy5w",
            "cm90byKFAQoVVXBzdHJlYW1JcFBvcnRNYXRjaGVyEjQKC3Vwc3RyZWFtX2lw",
            "GAEgASgLMh8uZW52b3kuY29uZmlnLmNvcmUudjMuQ2lkclJhbmdlEjYKE3Vw",
            "c3RyZWFtX3BvcnRfcmFuZ2UYAiABKAsyGS5lbnZveS50eXBlLnYzLkludDY0",
            "UmFuZ2VCaApAaW8uZW52b3lwcm94eS5lbnZveS5leHRlbnNpb25zLnJiYWMu",
            "bWF0Y2hlcnMudXBzdHJlYW1faXBfcG9ydC52M0IaVXBzdHJlYW1JcFBvcnRN",
            "YXRjaGVyUHJvdG9QAbqAyNEGAhACYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Envoy.Config.Core.V3.AddressReflection.Descriptor, global::Envoy.Type.V3.RangeReflection.Descriptor, global::Udpa.Annotations.StatusReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Extensions.Rbac.Matchers.UpstreamIpPort.V3.UpstreamIpPortMatcher), global::Envoy.Extensions.Rbac.Matchers.UpstreamIpPort.V3.UpstreamIpPortMatcher.Parser, new[]{ "UpstreamIp", "UpstreamPortRange" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// This is configuration for matching upstream ip and port.
  /// Note that although both fields are optional, at least one of IP or port must be supplied. If only
  /// one is supplied the other is a wildcard match.
  /// This matcher requires a filter in the chain to have saved the upstream address in the
  /// filter state before the matcher is executed by RBAC filter. The state should be saved with key
  /// `envoy.stream.upstream_address` (See
  /// :repo:`upstream_address.h&lt;source/common/stream_info/upstream_address.h>`).
  /// Also, See :repo:`proxy_filter.cc&lt;
  /// source/extensions/filters/http/dynamic_forward_proxy/proxy_filter.cc>` for an example of a
  /// filter which populates the FilterState.
  /// </summary>
  public sealed partial class UpstreamIpPortMatcher : pb::IMessage<UpstreamIpPortMatcher>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UpstreamIpPortMatcher> _parser = new pb::MessageParser<UpstreamIpPortMatcher>(() => new UpstreamIpPortMatcher());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UpstreamIpPortMatcher> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Extensions.Rbac.Matchers.UpstreamIpPort.V3.UpstreamIpPortMatcherReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UpstreamIpPortMatcher() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UpstreamIpPortMatcher(UpstreamIpPortMatcher other) : this() {
      upstreamIp_ = other.upstreamIp_ != null ? other.upstreamIp_.Clone() : null;
      upstreamPortRange_ = other.upstreamPortRange_ != null ? other.upstreamPortRange_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UpstreamIpPortMatcher Clone() {
      return new UpstreamIpPortMatcher(this);
    }

    /// <summary>Field number for the "upstream_ip" field.</summary>
    public const int UpstreamIpFieldNumber = 1;
    private global::Envoy.Config.Core.V3.CidrRange upstreamIp_;
    /// <summary>
    /// A CIDR block that will be used to match the upstream IP.
    /// Both Ipv4 and Ipv6 ranges can be matched.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Config.Core.V3.CidrRange UpstreamIp {
      get { return upstreamIp_; }
      set {
        upstreamIp_ = value;
      }
    }

    /// <summary>Field number for the "upstream_port_range" field.</summary>
    public const int UpstreamPortRangeFieldNumber = 2;
    private global::Envoy.Type.V3.Int64Range upstreamPortRange_;
    /// <summary>
    /// A port range that will be used to match the upstream port.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Type.V3.Int64Range UpstreamPortRange {
      get { return upstreamPortRange_; }
      set {
        upstreamPortRange_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UpstreamIpPortMatcher);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UpstreamIpPortMatcher other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UpstreamIp, other.UpstreamIp)) return false;
      if (!object.Equals(UpstreamPortRange, other.UpstreamPortRange)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (upstreamIp_ != null) hash ^= UpstreamIp.GetHashCode();
      if (upstreamPortRange_ != null) hash ^= UpstreamPortRange.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (upstreamIp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UpstreamIp);
      }
      if (upstreamPortRange_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UpstreamPortRange);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (upstreamIp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UpstreamIp);
      }
      if (upstreamPortRange_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UpstreamPortRange);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (upstreamIp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpstreamIp);
      }
      if (upstreamPortRange_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpstreamPortRange);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UpstreamIpPortMatcher other) {
      if (other == null) {
        return;
      }
      if (other.upstreamIp_ != null) {
        if (upstreamIp_ == null) {
          UpstreamIp = new global::Envoy.Config.Core.V3.CidrRange();
        }
        UpstreamIp.MergeFrom(other.UpstreamIp);
      }
      if (other.upstreamPortRange_ != null) {
        if (upstreamPortRange_ == null) {
          UpstreamPortRange = new global::Envoy.Type.V3.Int64Range();
        }
        UpstreamPortRange.MergeFrom(other.UpstreamPortRange);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (upstreamIp_ == null) {
              UpstreamIp = new global::Envoy.Config.Core.V3.CidrRange();
            }
            input.ReadMessage(UpstreamIp);
            break;
          }
          case 18: {
            if (upstreamPortRange_ == null) {
              UpstreamPortRange = new global::Envoy.Type.V3.Int64Range();
            }
            input.ReadMessage(UpstreamPortRange);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (upstreamIp_ == null) {
              UpstreamIp = new global::Envoy.Config.Core.V3.CidrRange();
            }
            input.ReadMessage(UpstreamIp);
            break;
          }
          case 18: {
            if (upstreamPortRange_ == null) {
              UpstreamPortRange = new global::Envoy.Type.V3.Int64Range();
            }
            input.ReadMessage(UpstreamPortRange);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
