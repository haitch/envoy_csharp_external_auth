// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/extensions/matching/input_matchers/consistent_hashing/v3/consistent_hashing.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Extensions.Matching.InputMatchers.ConsistentHashing.V3 {

  /// <summary>Holder for reflection information generated from envoy/extensions/matching/input_matchers/consistent_hashing/v3/consistent_hashing.proto</summary>
  public static partial class ConsistentHashingReflection {

    #region Descriptor
    /// <summary>File descriptor for envoy/extensions/matching/input_matchers/consistent_hashing/v3/consistent_hashing.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConsistentHashingReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CldlbnZveS9leHRlbnNpb25zL21hdGNoaW5nL2lucHV0X21hdGNoZXJzL2Nv",
            "bnNpc3RlbnRfaGFzaGluZy92My9jb25zaXN0ZW50X2hhc2hpbmcucHJvdG8S",
            "PmVudm95LmV4dGVuc2lvbnMubWF0Y2hpbmcuaW5wdXRfbWF0Y2hlcnMuY29u",
            "c2lzdGVudF9oYXNoaW5nLnYzGh11ZHBhL2Fubm90YXRpb25zL3N0YXR1cy5w",
            "cm90bxoXdmFsaWRhdGUvdmFsaWRhdGUucHJvdG8iTQoRQ29uc2lzdGVudEhh",
            "c2hpbmcSEQoJdGhyZXNob2xkGAEgASgNEhcKBm1vZHVsbxgCIAEoDUIH+kIE",
            "KgIgABIMCgRzZWVkGAMgASgEQnAKTGlvLmVudm95cHJveHkuZW52b3kuZXh0",
            "ZW5zaW9ucy5tYXRjaGluZy5pbnB1dF9tYXRjaGVycy5jb25zaXN0ZW50X2hh",
            "c2hpbmcudjNCFkNvbnNpc3RlbnRIYXNoaW5nUHJvdG9QAbqAyNEGAhACYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Udpa.Annotations.StatusReflection.Descriptor, global::Validate.ValidateReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Extensions.Matching.InputMatchers.ConsistentHashing.V3.ConsistentHashing), global::Envoy.Extensions.Matching.InputMatchers.ConsistentHashing.V3.ConsistentHashing.Parser, new[]{ "Threshold", "Modulo", "Seed" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// The consistent hashing matchers computes a consistent hash from the input and matches if the resulting hash
  /// is within the configured threshold.
  /// More specifically, this matcher evaluates to true if hash(input, seed) % modulo >= threshold.
  /// Note that the consistency of the match result relies on the internal hash function (xxhash) remaining
  /// unchanged. While this is unlikely to happen intentionally, this could cause inconsistent match results
  /// between deployments.
  /// </summary>
  public sealed partial class ConsistentHashing : pb::IMessage<ConsistentHashing>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ConsistentHashing> _parser = new pb::MessageParser<ConsistentHashing>(() => new ConsistentHashing());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ConsistentHashing> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Extensions.Matching.InputMatchers.ConsistentHashing.V3.ConsistentHashingReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ConsistentHashing() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ConsistentHashing(ConsistentHashing other) : this() {
      threshold_ = other.threshold_;
      modulo_ = other.modulo_;
      seed_ = other.seed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ConsistentHashing Clone() {
      return new ConsistentHashing(this);
    }

    /// <summary>Field number for the "threshold" field.</summary>
    public const int ThresholdFieldNumber = 1;
    private uint threshold_;
    /// <summary>
    /// The threshold the resulting hash must be over in order for this matcher to evaluate to true.
    /// This value must be below the configured modulo value.
    /// Setting this to 0 is equivalent to this matcher always matching.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Threshold {
      get { return threshold_; }
      set {
        threshold_ = value;
      }
    }

    /// <summary>Field number for the "modulo" field.</summary>
    public const int ModuloFieldNumber = 2;
    private uint modulo_;
    /// <summary>
    /// The value to use for the modulus in the calculation. This effectively  bounds the hash output,
    /// specifying the range of possible values.
    /// This value must be above the configured threshold.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Modulo {
      get { return modulo_; }
      set {
        modulo_ = value;
      }
    }

    /// <summary>Field number for the "seed" field.</summary>
    public const int SeedFieldNumber = 3;
    private ulong seed_;
    /// <summary>
    /// Optional seed passed through the hash function. This allows using additional information when computing
    /// the hash value: by changing the seed value, a different partition of matching and non-matching inputs will
    /// be created that remains consistent for that seed value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Seed {
      get { return seed_; }
      set {
        seed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ConsistentHashing);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ConsistentHashing other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Threshold != other.Threshold) return false;
      if (Modulo != other.Modulo) return false;
      if (Seed != other.Seed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Threshold != 0) hash ^= Threshold.GetHashCode();
      if (Modulo != 0) hash ^= Modulo.GetHashCode();
      if (Seed != 0UL) hash ^= Seed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Threshold != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Threshold);
      }
      if (Modulo != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Modulo);
      }
      if (Seed != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Seed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Threshold != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Threshold);
      }
      if (Modulo != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Modulo);
      }
      if (Seed != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Seed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Threshold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Threshold);
      }
      if (Modulo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Modulo);
      }
      if (Seed != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Seed);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ConsistentHashing other) {
      if (other == null) {
        return;
      }
      if (other.Threshold != 0) {
        Threshold = other.Threshold;
      }
      if (other.Modulo != 0) {
        Modulo = other.Modulo;
      }
      if (other.Seed != 0UL) {
        Seed = other.Seed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Threshold = input.ReadUInt32();
            break;
          }
          case 16: {
            Modulo = input.ReadUInt32();
            break;
          }
          case 24: {
            Seed = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Threshold = input.ReadUInt32();
            break;
          }
          case 16: {
            Modulo = input.ReadUInt32();
            break;
          }
          case 24: {
            Seed = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
