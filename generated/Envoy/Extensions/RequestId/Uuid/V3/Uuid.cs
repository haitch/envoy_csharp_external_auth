// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/extensions/request_id/uuid/v3/uuid.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Extensions.RequestId.Uuid.V3 {

  /// <summary>Holder for reflection information generated from envoy/extensions/request_id/uuid/v3/uuid.proto</summary>
  public static partial class UuidReflection {

    #region Descriptor
    /// <summary>File descriptor for envoy/extensions/request_id/uuid/v3/uuid.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static UuidReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci5lbnZveS9leHRlbnNpb25zL3JlcXVlc3RfaWQvdXVpZC92My91dWlkLnBy",
            "b3RvEiNlbnZveS5leHRlbnNpb25zLnJlcXVlc3RfaWQudXVpZC52MxoeZ29v",
            "Z2xlL3Byb3RvYnVmL3dyYXBwZXJzLnByb3RvGh11ZHBhL2Fubm90YXRpb25z",
            "L3N0YXR1cy5wcm90byKTAQoTVXVpZFJlcXVlc3RJZENvbmZpZxI1ChFwYWNr",
            "X3RyYWNlX3JlYXNvbhgBIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFs",
            "dWUSRQohdXNlX3JlcXVlc3RfaWRfZm9yX3RyYWNlX3NhbXBsaW5nGAIgASgL",
            "MhouZ29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1ZUJICjFpby5lbnZveXByb3h5",
            "LmVudm95LmV4dGVuc2lvbnMucmVxdWVzdF9pZC51dWlkLnYzQglVdWlkUHJv",
            "dG9QAbqAyNEGAhACYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Udpa.Annotations.StatusReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Extensions.RequestId.Uuid.V3.UuidRequestIdConfig), global::Envoy.Extensions.RequestId.Uuid.V3.UuidRequestIdConfig.Parser, new[]{ "PackTraceReason", "UseRequestIdForTraceSampling" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Configuration for the default UUID request ID extension which has the following behavior:
  ///
  /// 1. Request ID is propagated using the :ref:`x-request-id
  ///    &lt;config_http_conn_man_headers_x-request-id>` header.
  ///
  /// 2. Request ID is a universally unique identifier `(UUID4)
  ///    &lt;https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)>`_.
  ///
  /// 3. Tracing decision (sampled, forced, etc) is set in 14th nibble of the UUID. By default this will
  ///    overwrite existing UUIDs received in the *x-request-id* header if the trace sampling decision
  ///    is changed. The 14th nibble of the UUID4 has been chosen because it is fixed to '4' by the
  ///    standard. Thus, '4' indicates a default UUID and no trace status. This nibble is swapped to:
  ///
  ///      a. '9': Sampled.
  ///      b. 'a': Force traced due to server-side override.
  ///      c. 'b': Force traced due to client-side request ID joining.
  ///
  ///    See the :ref:`x-request-id &lt;config_http_conn_man_headers_x-request-id>` documentation for
  ///    more information.
  /// </summary>
  public sealed partial class UuidRequestIdConfig : pb::IMessage<UuidRequestIdConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UuidRequestIdConfig> _parser = new pb::MessageParser<UuidRequestIdConfig>(() => new UuidRequestIdConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UuidRequestIdConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Extensions.RequestId.Uuid.V3.UuidReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UuidRequestIdConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UuidRequestIdConfig(UuidRequestIdConfig other) : this() {
      PackTraceReason = other.PackTraceReason;
      UseRequestIdForTraceSampling = other.UseRequestIdForTraceSampling;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UuidRequestIdConfig Clone() {
      return new UuidRequestIdConfig(this);
    }

    /// <summary>Field number for the "pack_trace_reason" field.</summary>
    public const int PackTraceReasonFieldNumber = 1;
    private static readonly pb::FieldCodec<bool?> _single_packTraceReason_codec = pb::FieldCodec.ForStructWrapper<bool>(10);
    private bool? packTraceReason_;
    /// <summary>
    /// Whether the implementation alters the UUID to contain the trace sampling decision as per the
    /// `UuidRequestIdConfig` message documentation. This defaults to true. If disabled no
    /// modification to the UUID will be performed. It is important to note that if disabled,
    /// stable sampling of traces, access logs, etc. will no longer work and only random sampling will
    /// be possible.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool? PackTraceReason {
      get { return packTraceReason_; }
      set {
        packTraceReason_ = value;
      }
    }


    /// <summary>Field number for the "use_request_id_for_trace_sampling" field.</summary>
    public const int UseRequestIdForTraceSamplingFieldNumber = 2;
    private static readonly pb::FieldCodec<bool?> _single_useRequestIdForTraceSampling_codec = pb::FieldCodec.ForStructWrapper<bool>(18);
    private bool? useRequestIdForTraceSampling_;
    /// <summary>
    /// Set whether to use :ref:`x-request-id&lt;config_http_conn_man_headers_x-request-id>` for sampling or not.
    /// This defaults to true. See the :ref:`context propagation &lt;arch_overview_tracing_context_propagation>`
    /// overview for more information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool? UseRequestIdForTraceSampling {
      get { return useRequestIdForTraceSampling_; }
      set {
        useRequestIdForTraceSampling_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UuidRequestIdConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UuidRequestIdConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PackTraceReason != other.PackTraceReason) return false;
      if (UseRequestIdForTraceSampling != other.UseRequestIdForTraceSampling) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (packTraceReason_ != null) hash ^= PackTraceReason.GetHashCode();
      if (useRequestIdForTraceSampling_ != null) hash ^= UseRequestIdForTraceSampling.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (packTraceReason_ != null) {
        _single_packTraceReason_codec.WriteTagAndValue(output, PackTraceReason);
      }
      if (useRequestIdForTraceSampling_ != null) {
        _single_useRequestIdForTraceSampling_codec.WriteTagAndValue(output, UseRequestIdForTraceSampling);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (packTraceReason_ != null) {
        _single_packTraceReason_codec.WriteTagAndValue(ref output, PackTraceReason);
      }
      if (useRequestIdForTraceSampling_ != null) {
        _single_useRequestIdForTraceSampling_codec.WriteTagAndValue(ref output, UseRequestIdForTraceSampling);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (packTraceReason_ != null) {
        size += _single_packTraceReason_codec.CalculateSizeWithTag(PackTraceReason);
      }
      if (useRequestIdForTraceSampling_ != null) {
        size += _single_useRequestIdForTraceSampling_codec.CalculateSizeWithTag(UseRequestIdForTraceSampling);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UuidRequestIdConfig other) {
      if (other == null) {
        return;
      }
      if (other.packTraceReason_ != null) {
        if (packTraceReason_ == null || other.PackTraceReason != false) {
          PackTraceReason = other.PackTraceReason;
        }
      }
      if (other.useRequestIdForTraceSampling_ != null) {
        if (useRequestIdForTraceSampling_ == null || other.UseRequestIdForTraceSampling != false) {
          UseRequestIdForTraceSampling = other.UseRequestIdForTraceSampling;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            bool? value = _single_packTraceReason_codec.Read(input);
            if (packTraceReason_ == null || value != false) {
              PackTraceReason = value;
            }
            break;
          }
          case 18: {
            bool? value = _single_useRequestIdForTraceSampling_codec.Read(input);
            if (useRequestIdForTraceSampling_ == null || value != false) {
              UseRequestIdForTraceSampling = value;
            }
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            bool? value = _single_packTraceReason_codec.Read(ref input);
            if (packTraceReason_ == null || value != false) {
              PackTraceReason = value;
            }
            break;
          }
          case 18: {
            bool? value = _single_useRequestIdForTraceSampling_codec.Read(ref input);
            if (useRequestIdForTraceSampling_ == null || value != false) {
              UseRequestIdForTraceSampling = value;
            }
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
