// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/extensions/filters/network/sni_dynamic_forward_proxy/v3/sni_dynamic_forward_proxy.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Extensions.Filters.Network.SniDynamicForwardProxy.V3 {

  /// <summary>Holder for reflection information generated from envoy/extensions/filters/network/sni_dynamic_forward_proxy/v3/sni_dynamic_forward_proxy.proto</summary>
  public static partial class SniDynamicForwardProxyReflection {

    #region Descriptor
    /// <summary>File descriptor for envoy/extensions/filters/network/sni_dynamic_forward_proxy/v3/sni_dynamic_forward_proxy.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SniDynamicForwardProxyReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cl1lbnZveS9leHRlbnNpb25zL2ZpbHRlcnMvbmV0d29yay9zbmlfZHluYW1p",
            "Y19mb3J3YXJkX3Byb3h5L3YzL3NuaV9keW5hbWljX2ZvcndhcmRfcHJveHku",
            "cHJvdG8SPWVudm95LmV4dGVuc2lvbnMuZmlsdGVycy5uZXR3b3JrLnNuaV9k",
            "eW5hbWljX2ZvcndhcmRfcHJveHkudjMaQGVudm95L2V4dGVuc2lvbnMvY29t",
            "bW9uL2R5bmFtaWNfZm9yd2FyZF9wcm94eS92My9kbnNfY2FjaGUucHJvdG8a",
            "HXVkcGEvYW5ub3RhdGlvbnMvc3RhdHVzLnByb3RvGhd2YWxpZGF0ZS92YWxp",
            "ZGF0ZS5wcm90byKpAQoMRmlsdGVyQ29uZmlnEmQKEGRuc19jYWNoZV9jb25m",
            "aWcYASABKAsyQC5lbnZveS5leHRlbnNpb25zLmNvbW1vbi5keW5hbWljX2Zv",
            "cndhcmRfcHJveHkudjMuRG5zQ2FjaGVDb25maWdCCPpCBYoBAhABEiEKCnBv",
            "cnRfdmFsdWUYAiABKA1CC/pCCCoGGP//AyAASABCEAoOcG9ydF9zcGVjaWZp",
            "ZXJCdApLaW8uZW52b3lwcm94eS5lbnZveS5leHRlbnNpb25zLmZpbHRlcnMu",
            "bmV0d29yay5zbmlfZHluYW1pY19mb3J3YXJkX3Byb3h5LnYzQhtTbmlEeW5h",
            "bWljRm9yd2FyZFByb3h5UHJvdG9QAbqAyNEGAhACYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Envoy.Extensions.Common.DynamicForwardProxy.V3.DnsCacheReflection.Descriptor, global::Udpa.Annotations.StatusReflection.Descriptor, global::Validate.ValidateReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Extensions.Filters.Network.SniDynamicForwardProxy.V3.FilterConfig), global::Envoy.Extensions.Filters.Network.SniDynamicForwardProxy.V3.FilterConfig.Parser, new[]{ "DnsCacheConfig", "PortValue" }, new[]{ "PortSpecifier" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Configuration for the SNI-based dynamic forward proxy filter. See the
  /// :ref:`architecture overview &lt;arch_overview_http_dynamic_forward_proxy>` for
  /// more information. Note this filter must be configured along with
  /// :ref:`TLS inspector listener filter &lt;config_listener_filters_tls_inspector>`
  /// to work.
  /// [#extension: envoy.filters.network.sni_dynamic_forward_proxy]
  /// </summary>
  public sealed partial class FilterConfig : pb::IMessage<FilterConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FilterConfig> _parser = new pb::MessageParser<FilterConfig>(() => new FilterConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FilterConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Extensions.Filters.Network.SniDynamicForwardProxy.V3.SniDynamicForwardProxyReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FilterConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FilterConfig(FilterConfig other) : this() {
      dnsCacheConfig_ = other.dnsCacheConfig_ != null ? other.dnsCacheConfig_.Clone() : null;
      switch (other.PortSpecifierCase) {
        case PortSpecifierOneofCase.PortValue:
          PortValue = other.PortValue;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FilterConfig Clone() {
      return new FilterConfig(this);
    }

    /// <summary>Field number for the "dns_cache_config" field.</summary>
    public const int DnsCacheConfigFieldNumber = 1;
    private global::Envoy.Extensions.Common.DynamicForwardProxy.V3.DnsCacheConfig dnsCacheConfig_;
    /// <summary>
    /// The DNS cache configuration that the filter will attach to. Note this
    /// configuration must match that of associated :ref:`dynamic forward proxy
    /// cluster configuration
    /// &lt;envoy_v3_api_field_extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig.dns_cache_config>`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Extensions.Common.DynamicForwardProxy.V3.DnsCacheConfig DnsCacheConfig {
      get { return dnsCacheConfig_; }
      set {
        dnsCacheConfig_ = value;
      }
    }

    /// <summary>Field number for the "port_value" field.</summary>
    public const int PortValueFieldNumber = 2;
    /// <summary>
    /// The port number to connect to the upstream.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint PortValue {
      get { return portSpecifierCase_ == PortSpecifierOneofCase.PortValue ? (uint) portSpecifier_ : 0; }
      set {
        portSpecifier_ = value;
        portSpecifierCase_ = PortSpecifierOneofCase.PortValue;
      }
    }

    private object portSpecifier_;
    /// <summary>Enum of possible cases for the "port_specifier" oneof.</summary>
    public enum PortSpecifierOneofCase {
      None = 0,
      PortValue = 2,
    }
    private PortSpecifierOneofCase portSpecifierCase_ = PortSpecifierOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PortSpecifierOneofCase PortSpecifierCase {
      get { return portSpecifierCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPortSpecifier() {
      portSpecifierCase_ = PortSpecifierOneofCase.None;
      portSpecifier_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FilterConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FilterConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DnsCacheConfig, other.DnsCacheConfig)) return false;
      if (PortValue != other.PortValue) return false;
      if (PortSpecifierCase != other.PortSpecifierCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (dnsCacheConfig_ != null) hash ^= DnsCacheConfig.GetHashCode();
      if (portSpecifierCase_ == PortSpecifierOneofCase.PortValue) hash ^= PortValue.GetHashCode();
      hash ^= (int) portSpecifierCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (dnsCacheConfig_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DnsCacheConfig);
      }
      if (portSpecifierCase_ == PortSpecifierOneofCase.PortValue) {
        output.WriteRawTag(16);
        output.WriteUInt32(PortValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (dnsCacheConfig_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DnsCacheConfig);
      }
      if (portSpecifierCase_ == PortSpecifierOneofCase.PortValue) {
        output.WriteRawTag(16);
        output.WriteUInt32(PortValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (dnsCacheConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DnsCacheConfig);
      }
      if (portSpecifierCase_ == PortSpecifierOneofCase.PortValue) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PortValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FilterConfig other) {
      if (other == null) {
        return;
      }
      if (other.dnsCacheConfig_ != null) {
        if (dnsCacheConfig_ == null) {
          DnsCacheConfig = new global::Envoy.Extensions.Common.DynamicForwardProxy.V3.DnsCacheConfig();
        }
        DnsCacheConfig.MergeFrom(other.DnsCacheConfig);
      }
      switch (other.PortSpecifierCase) {
        case PortSpecifierOneofCase.PortValue:
          PortValue = other.PortValue;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (dnsCacheConfig_ == null) {
              DnsCacheConfig = new global::Envoy.Extensions.Common.DynamicForwardProxy.V3.DnsCacheConfig();
            }
            input.ReadMessage(DnsCacheConfig);
            break;
          }
          case 16: {
            PortValue = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (dnsCacheConfig_ == null) {
              DnsCacheConfig = new global::Envoy.Extensions.Common.DynamicForwardProxy.V3.DnsCacheConfig();
            }
            input.ReadMessage(DnsCacheConfig);
            break;
          }
          case 16: {
            PortValue = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
