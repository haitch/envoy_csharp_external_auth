// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: udpa/data/orca/v1/orca_load_report.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Udpa.Data.Orca.V1 {

  /// <summary>Holder for reflection information generated from udpa/data/orca/v1/orca_load_report.proto</summary>
  public static partial class OrcaLoadReportReflection {

    #region Descriptor
    /// <summary>File descriptor for udpa/data/orca/v1/orca_load_report.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OrcaLoadReportReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cih1ZHBhL2RhdGEvb3JjYS92MS9vcmNhX2xvYWRfcmVwb3J0LnByb3RvEhF1",
            "ZHBhLmRhdGEub3JjYS52MRoXdmFsaWRhdGUvdmFsaWRhdGUucHJvdG8irgMK",
            "Dk9yY2FMb2FkUmVwb3J0EjUKD2NwdV91dGlsaXphdGlvbhgBIAEoAUIc+kIL",
            "EgkpAAAAAAAAAAD6QgsSCRkAAAAAAADwPxI1Cg9tZW1fdXRpbGl6YXRpb24Y",
            "AiABKAFCHPpCCxIJKQAAAAAAAAAA+kILEgkZAAAAAAAA8D8SCwoDcnBzGAMg",
            "ASgEEkgKDHJlcXVlc3RfY29zdBgEIAMoCzIyLnVkcGEuZGF0YS5vcmNhLnYx",
            "Lk9yY2FMb2FkUmVwb3J0LlJlcXVlc3RDb3N0RW50cnkSbwoLdXRpbGl6YXRp",
            "b24YBSADKAsyMi51ZHBhLmRhdGEub3JjYS52MS5PcmNhTG9hZFJlcG9ydC5V",
            "dGlsaXphdGlvbkVudHJ5Qib6QhCaAQ0qCxIJKQAAAAAAAAAA+kIQmgENKgsS",
            "CRkAAAAAAADwPxoyChBSZXF1ZXN0Q29zdEVudHJ5EgsKA2tleRgBIAEoCRIN",
            "CgV2YWx1ZRgCIAEoAToCOAEaMgoQVXRpbGl6YXRpb25FbnRyeRILCgNrZXkY",
            "ASABKAkSDQoFdmFsdWUYAiABKAE6AjgBQjoKIWNvbS5naXRodWIudWRwYS51",
            "ZHBhLmRhdGEub3JjYS52MUITT3JjYUxvYWRSZXBvcnRQcm90b1ABYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Validate.ValidateReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Udpa.Data.Orca.V1.OrcaLoadReport), global::Udpa.Data.Orca.V1.OrcaLoadReport.Parser, new[]{ "CpuUtilization", "MemUtilization", "Rps", "RequestCost", "Utilization" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class OrcaLoadReport : pb::IMessage<OrcaLoadReport>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OrcaLoadReport> _parser = new pb::MessageParser<OrcaLoadReport>(() => new OrcaLoadReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<OrcaLoadReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Udpa.Data.Orca.V1.OrcaLoadReportReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OrcaLoadReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OrcaLoadReport(OrcaLoadReport other) : this() {
      cpuUtilization_ = other.cpuUtilization_;
      memUtilization_ = other.memUtilization_;
      rps_ = other.rps_;
      requestCost_ = other.requestCost_.Clone();
      utilization_ = other.utilization_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OrcaLoadReport Clone() {
      return new OrcaLoadReport(this);
    }

    /// <summary>Field number for the "cpu_utilization" field.</summary>
    public const int CpuUtilizationFieldNumber = 1;
    private double cpuUtilization_;
    /// <summary>
    /// CPU utilization expressed as a fraction of available CPU resources. This
    /// should be derived from the latest sample or measurement.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double CpuUtilization {
      get { return cpuUtilization_; }
      set {
        cpuUtilization_ = value;
      }
    }

    /// <summary>Field number for the "mem_utilization" field.</summary>
    public const int MemUtilizationFieldNumber = 2;
    private double memUtilization_;
    /// <summary>
    /// Memory utilization expressed as a fraction of available memory
    /// resources. This should be derived from the latest sample or measurement.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MemUtilization {
      get { return memUtilization_; }
      set {
        memUtilization_ = value;
      }
    }

    /// <summary>Field number for the "rps" field.</summary>
    public const int RpsFieldNumber = 3;
    private ulong rps_;
    /// <summary>
    /// Total RPS being served by an endpoint. This should cover all services that an endpoint is
    /// responsible for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Rps {
      get { return rps_; }
      set {
        rps_ = value;
      }
    }

    /// <summary>Field number for the "request_cost" field.</summary>
    public const int RequestCostFieldNumber = 4;
    private static readonly pbc::MapField<string, double>.Codec _map_requestCost_codec
        = new pbc::MapField<string, double>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForDouble(17, 0D), 34);
    private readonly pbc::MapField<string, double> requestCost_ = new pbc::MapField<string, double>();
    /// <summary>
    /// Application specific requests costs. Each value is an absolute cost (e.g. 3487 bytes of
    /// storage) associated with the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<string, double> RequestCost {
      get { return requestCost_; }
    }

    /// <summary>Field number for the "utilization" field.</summary>
    public const int UtilizationFieldNumber = 5;
    private static readonly pbc::MapField<string, double>.Codec _map_utilization_codec
        = new pbc::MapField<string, double>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForDouble(17, 0D), 42);
    private readonly pbc::MapField<string, double> utilization_ = new pbc::MapField<string, double>();
    /// <summary>
    /// Resource utilization values. Each value is expressed as a fraction of total resources
    /// available, derived from the latest sample or measurement.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<string, double> Utilization {
      get { return utilization_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as OrcaLoadReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(OrcaLoadReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CpuUtilization, other.CpuUtilization)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MemUtilization, other.MemUtilization)) return false;
      if (Rps != other.Rps) return false;
      if (!RequestCost.Equals(other.RequestCost)) return false;
      if (!Utilization.Equals(other.Utilization)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (CpuUtilization != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CpuUtilization);
      if (MemUtilization != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MemUtilization);
      if (Rps != 0UL) hash ^= Rps.GetHashCode();
      hash ^= RequestCost.GetHashCode();
      hash ^= Utilization.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CpuUtilization != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(CpuUtilization);
      }
      if (MemUtilization != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(MemUtilization);
      }
      if (Rps != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Rps);
      }
      requestCost_.WriteTo(output, _map_requestCost_codec);
      utilization_.WriteTo(output, _map_utilization_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CpuUtilization != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(CpuUtilization);
      }
      if (MemUtilization != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(MemUtilization);
      }
      if (Rps != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Rps);
      }
      requestCost_.WriteTo(ref output, _map_requestCost_codec);
      utilization_.WriteTo(ref output, _map_utilization_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (CpuUtilization != 0D) {
        size += 1 + 8;
      }
      if (MemUtilization != 0D) {
        size += 1 + 8;
      }
      if (Rps != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Rps);
      }
      size += requestCost_.CalculateSize(_map_requestCost_codec);
      size += utilization_.CalculateSize(_map_utilization_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(OrcaLoadReport other) {
      if (other == null) {
        return;
      }
      if (other.CpuUtilization != 0D) {
        CpuUtilization = other.CpuUtilization;
      }
      if (other.MemUtilization != 0D) {
        MemUtilization = other.MemUtilization;
      }
      if (other.Rps != 0UL) {
        Rps = other.Rps;
      }
      requestCost_.Add(other.requestCost_);
      utilization_.Add(other.utilization_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            CpuUtilization = input.ReadDouble();
            break;
          }
          case 17: {
            MemUtilization = input.ReadDouble();
            break;
          }
          case 24: {
            Rps = input.ReadUInt64();
            break;
          }
          case 34: {
            requestCost_.AddEntriesFrom(input, _map_requestCost_codec);
            break;
          }
          case 42: {
            utilization_.AddEntriesFrom(input, _map_utilization_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            CpuUtilization = input.ReadDouble();
            break;
          }
          case 17: {
            MemUtilization = input.ReadDouble();
            break;
          }
          case 24: {
            Rps = input.ReadUInt64();
            break;
          }
          case 34: {
            requestCost_.AddEntriesFrom(ref input, _map_requestCost_codec);
            break;
          }
          case 42: {
            utilization_.AddEntriesFrom(ref input, _map_utilization_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
