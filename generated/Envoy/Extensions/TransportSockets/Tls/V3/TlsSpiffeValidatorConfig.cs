// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/extensions/transport_sockets/tls/v3/tls_spiffe_validator_config.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Extensions.TransportSockets.Tls.V3 {

  /// <summary>Holder for reflection information generated from envoy/extensions/transport_sockets/tls/v3/tls_spiffe_validator_config.proto</summary>
  public static partial class TlsSpiffeValidatorConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for envoy/extensions/transport_sockets/tls/v3/tls_spiffe_validator_config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TlsSpiffeValidatorConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CktlbnZveS9leHRlbnNpb25zL3RyYW5zcG9ydF9zb2NrZXRzL3Rscy92My90",
            "bHNfc3BpZmZlX3ZhbGlkYXRvcl9jb25maWcucHJvdG8SKWVudm95LmV4dGVu",
            "c2lvbnMudHJhbnNwb3J0X3NvY2tldHMudGxzLnYzGh9lbnZveS9jb25maWcv",
            "Y29yZS92My9iYXNlLnByb3RvGh11ZHBhL2Fubm90YXRpb25zL3N0YXR1cy5w",
            "cm90bxoXdmFsaWRhdGUvdmFsaWRhdGUucHJvdG8i7AEKGVNQSUZGRUNlcnRW",
            "YWxpZGF0b3JDb25maWcScQoNdHJ1c3RfZG9tYWlucxgBIAMoCzJQLmVudm95",
            "LmV4dGVuc2lvbnMudHJhbnNwb3J0X3NvY2tldHMudGxzLnYzLlNQSUZGRUNl",
            "cnRWYWxpZGF0b3JDb25maWcuVHJ1c3REb21haW5CCPpCBZIBAggBGlwKC1Ry",
            "dXN0RG9tYWluEhUKBG5hbWUYASABKAlCB/pCBHICEAESNgoMdHJ1c3RfYnVu",
            "ZGxlGAIgASgLMiAuZW52b3kuY29uZmlnLmNvcmUudjMuRGF0YVNvdXJjZUJi",
            "Cjdpby5lbnZveXByb3h5LmVudm95LmV4dGVuc2lvbnMudHJhbnNwb3J0X3Nv",
            "Y2tldHMudGxzLnYzQh1UbHNTcGlmZmVWYWxpZGF0b3JDb25maWdQcm90b1AB",
            "uoDI0QYCEAJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Envoy.Config.Core.V3.BaseReflection.Descriptor, global::Udpa.Annotations.StatusReflection.Descriptor, global::Validate.ValidateReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Extensions.TransportSockets.Tls.V3.SPIFFECertValidatorConfig), global::Envoy.Extensions.TransportSockets.Tls.V3.SPIFFECertValidatorConfig.Parser, new[]{ "TrustDomains" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Extensions.TransportSockets.Tls.V3.SPIFFECertValidatorConfig.Types.TrustDomain), global::Envoy.Extensions.TransportSockets.Tls.V3.SPIFFECertValidatorConfig.Types.TrustDomain.Parser, new[]{ "Name", "TrustBundle" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Configuration specific to the `SPIFFE &lt;https://github.com/spiffe/spiffe>`_ certificate validator.
  ///
  /// Example:
  ///
  /// .. validated-code-block:: yaml
  ///   :type-name: envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext
  ///
  ///   custom_validator_config:
  ///     name: envoy.tls.cert_validator.spiffe
  ///     typed_config:
  ///       "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.SPIFFECertValidatorConfig
  ///       trust_domains:
  ///       - name: foo.com
  ///         trust_bundle:
  ///           filename: "foo.pem"
  ///       - name: envoy.com
  ///         trust_bundle:
  ///           filename: "envoy.pem"
  ///
  /// In this example, a presented peer certificate whose SAN matches `spiffe//foo.com/**` is validated against
  /// the "foo.pem" x.509 certificate. All the trust bundles are isolated from each other, so no trust domain can mint
  /// a SVID belonging to another trust domain. That means, in this example, a SVID signed by `envoy.com`'s CA with `spiffe//foo.com/**`
  /// SAN would be rejected since Envoy selects the trust bundle according to the presented SAN before validate the certificate.
  ///
  /// Note that SPIFFE validator inherits and uses the following options from :ref:`CertificateValidationContext &lt;envoy_v3_api_msg_extensions.transport_sockets.tls.v3.CertificateValidationContext>`.
  ///
  /// - :ref:`allow_expired_certificate &lt;envoy_v3_api_field_extensions.transport_sockets.tls.v3.CertificateValidationContext.allow_expired_certificate>` to allow expired certificates.
  /// - :ref:`match_subject_alt_names &lt;envoy_v3_api_field_extensions.transport_sockets.tls.v3.CertificateValidationContext.match_subject_alt_names>` to match **URI** SAN of certificates. Unlike the default validator, SPIFFE validator only matches **URI** SAN (which equals to SVID in SPIFFE terminology) and ignore other SAN types.
  ///
  /// </summary>
  public sealed partial class SPIFFECertValidatorConfig : pb::IMessage<SPIFFECertValidatorConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SPIFFECertValidatorConfig> _parser = new pb::MessageParser<SPIFFECertValidatorConfig>(() => new SPIFFECertValidatorConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SPIFFECertValidatorConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Extensions.TransportSockets.Tls.V3.TlsSpiffeValidatorConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SPIFFECertValidatorConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SPIFFECertValidatorConfig(SPIFFECertValidatorConfig other) : this() {
      trustDomains_ = other.trustDomains_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SPIFFECertValidatorConfig Clone() {
      return new SPIFFECertValidatorConfig(this);
    }

    /// <summary>Field number for the "trust_domains" field.</summary>
    public const int TrustDomainsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Envoy.Extensions.TransportSockets.Tls.V3.SPIFFECertValidatorConfig.Types.TrustDomain> _repeated_trustDomains_codec
        = pb::FieldCodec.ForMessage(10, global::Envoy.Extensions.TransportSockets.Tls.V3.SPIFFECertValidatorConfig.Types.TrustDomain.Parser);
    private readonly pbc::RepeatedField<global::Envoy.Extensions.TransportSockets.Tls.V3.SPIFFECertValidatorConfig.Types.TrustDomain> trustDomains_ = new pbc::RepeatedField<global::Envoy.Extensions.TransportSockets.Tls.V3.SPIFFECertValidatorConfig.Types.TrustDomain>();
    /// <summary>
    /// This field specifies trust domains used for validating incoming X.509-SVID(s).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Envoy.Extensions.TransportSockets.Tls.V3.SPIFFECertValidatorConfig.Types.TrustDomain> TrustDomains {
      get { return trustDomains_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SPIFFECertValidatorConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SPIFFECertValidatorConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!trustDomains_.Equals(other.trustDomains_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= trustDomains_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      trustDomains_.WriteTo(output, _repeated_trustDomains_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      trustDomains_.WriteTo(ref output, _repeated_trustDomains_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += trustDomains_.CalculateSize(_repeated_trustDomains_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SPIFFECertValidatorConfig other) {
      if (other == null) {
        return;
      }
      trustDomains_.Add(other.trustDomains_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            trustDomains_.AddEntriesFrom(input, _repeated_trustDomains_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            trustDomains_.AddEntriesFrom(ref input, _repeated_trustDomains_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the SPIFFECertValidatorConfig message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class TrustDomain : pb::IMessage<TrustDomain>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<TrustDomain> _parser = new pb::MessageParser<TrustDomain>(() => new TrustDomain());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<TrustDomain> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Envoy.Extensions.TransportSockets.Tls.V3.SPIFFECertValidatorConfig.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public TrustDomain() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public TrustDomain(TrustDomain other) : this() {
          name_ = other.name_;
          trustBundle_ = other.trustBundle_ != null ? other.trustBundle_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public TrustDomain Clone() {
          return new TrustDomain(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        /// <summary>
        /// Name of the trust domain, `example.com`, `foo.bar.gov` for example.
        /// Note that this must *not* have "spiffe://" prefix.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "trust_bundle" field.</summary>
        public const int TrustBundleFieldNumber = 2;
        private global::Envoy.Config.Core.V3.DataSource trustBundle_;
        /// <summary>
        /// Specify a data source holding x.509 trust bundle used for validating incoming SVID(s) in this trust domain.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Envoy.Config.Core.V3.DataSource TrustBundle {
          get { return trustBundle_; }
          set {
            trustBundle_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as TrustDomain);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(TrustDomain other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (!object.Equals(TrustBundle, other.TrustBundle)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (trustBundle_ != null) hash ^= TrustBundle.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (trustBundle_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(TrustBundle);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (trustBundle_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(TrustBundle);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (trustBundle_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrustBundle);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(TrustDomain other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.trustBundle_ != null) {
            if (trustBundle_ == null) {
              TrustBundle = new global::Envoy.Config.Core.V3.DataSource();
            }
            TrustBundle.MergeFrom(other.TrustBundle);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18: {
                if (trustBundle_ == null) {
                  TrustBundle = new global::Envoy.Config.Core.V3.DataSource();
                }
                input.ReadMessage(TrustBundle);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18: {
                if (trustBundle_ == null) {
                  TrustBundle = new global::Envoy.Config.Core.V3.DataSource();
                }
                input.ReadMessage(TrustBundle);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
