// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/api/v2/auth/common.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Api.V2.Auth {

  /// <summary>Holder for reflection information generated from envoy/api/v2/auth/common.proto</summary>
  public static partial class CommonReflection {

    #region Descriptor
    /// <summary>File descriptor for envoy/api/v2/auth/common.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CommonReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5lbnZveS9hcGkvdjIvYXV0aC9jb21tb24ucHJvdG8SEWVudm95LmFwaS52",
            "Mi5hdXRoGhxlbnZveS9hcGkvdjIvY29yZS9iYXNlLnByb3RvGh9lbnZveS90",
            "eXBlL21hdGNoZXIvc3RyaW5nLnByb3RvGhlnb29nbGUvcHJvdG9idWYvYW55",
            "LnByb3RvGhxnb29nbGUvcHJvdG9idWYvc3RydWN0LnByb3RvGh5nb29nbGUv",
            "cHJvdG9idWYvd3JhcHBlcnMucHJvdG8aHnVkcGEvYW5ub3RhdGlvbnMvbWln",
            "cmF0ZS5wcm90bxogdWRwYS9hbm5vdGF0aW9ucy9zZW5zaXRpdmUucHJvdG8a",
            "HXVkcGEvYW5ub3RhdGlvbnMvc3RhdHVzLnByb3RvGhd2YWxpZGF0ZS92YWxp",
            "ZGF0ZS5wcm90byLIAgoNVGxzUGFyYW1ldGVycxJcChx0bHNfbWluaW11bV9w",
            "cm90b2NvbF92ZXJzaW9uGAEgASgOMiwuZW52b3kuYXBpLnYyLmF1dGguVGxz",
            "UGFyYW1ldGVycy5UbHNQcm90b2NvbEII+kIFggECEAESXAocdGxzX21heGlt",
            "dW1fcHJvdG9jb2xfdmVyc2lvbhgCIAEoDjIsLmVudm95LmFwaS52Mi5hdXRo",
            "LlRsc1BhcmFtZXRlcnMuVGxzUHJvdG9jb2xCCPpCBYIBAhABEhUKDWNpcGhl",
            "cl9zdWl0ZXMYAyADKAkSEwoLZWNkaF9jdXJ2ZXMYBCADKAkiTwoLVGxzUHJv",
            "dG9jb2wSDAoIVExTX0FVVE8QABILCgdUTFN2MV8wEAESCwoHVExTdjFfMRAC",
            "EgsKB1RMU3YxXzIQAxILCgdUTFN2MV8zEAQirgEKElByaXZhdGVLZXlQcm92",
            "aWRlchIeCg1wcm92aWRlcl9uYW1lGAEgASgJQgf6QgRyAiABEjMKBmNvbmZp",
            "ZxgCIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3RCCBgBuLeLpAIBSAAS",
            "NAoMdHlwZWRfY29uZmlnGAMgASgLMhQuZ29vZ2xlLnByb3RvYnVmLkFueUIG",
            "uLeLpAIBSABCDQoLY29uZmlnX3R5cGUi/QIKDlRsc0NlcnRpZmljYXRlEjgK",
            "EWNlcnRpZmljYXRlX2NoYWluGAEgASgLMh0uZW52b3kuYXBpLnYyLmNvcmUu",
            "RGF0YVNvdXJjZRI6Cgtwcml2YXRlX2tleRgCIAEoCzIdLmVudm95LmFwaS52",
            "Mi5jb3JlLkRhdGFTb3VyY2VCBri3i6QCARJDChRwcml2YXRlX2tleV9wcm92",
            "aWRlchgGIAEoCzIlLmVudm95LmFwaS52Mi5hdXRoLlByaXZhdGVLZXlQcm92",
            "aWRlchI3CghwYXNzd29yZBgDIAEoCzIdLmVudm95LmFwaS52Mi5jb3JlLkRh",
            "dGFTb3VyY2VCBri3i6QCARIyCgtvY3NwX3N0YXBsZRgEIAEoCzIdLmVudm95",
            "LmFwaS52Mi5jb3JlLkRhdGFTb3VyY2USQwocc2lnbmVkX2NlcnRpZmljYXRl",
            "X3RpbWVzdGFtcBgFIAMoCzIdLmVudm95LmFwaS52Mi5jb3JlLkRhdGFTb3Vy",
            "Y2UiUwoUVGxzU2Vzc2lvblRpY2tldEtleXMSOwoEa2V5cxgBIAMoCzIdLmVu",
            "dm95LmFwaS52Mi5jb3JlLkRhdGFTb3VyY2VCDvpCBZIBAggBuLeLpAIBIqoF",
            "ChxDZXJ0aWZpY2F0ZVZhbGlkYXRpb25Db250ZXh0EjEKCnRydXN0ZWRfY2EY",
            "ASABKAsyHS5lbnZveS5hcGkudjIuY29yZS5EYXRhU291cmNlEi8KF3Zlcmlm",
            "eV9jZXJ0aWZpY2F0ZV9zcGtpGAMgAygJQg76QguSAQgiBnIEICwoLBIvChd2",
            "ZXJpZnlfY2VydGlmaWNhdGVfaGFzaBgCIAMoCUIO+kILkgEIIgZyBCBAKF8S",
            "IwoXdmVyaWZ5X3N1YmplY3RfYWx0X25hbWUYBCADKAlCAhgBEkIKF21hdGNo",
            "X3N1YmplY3RfYWx0X25hbWVzGAkgAygLMiEuZW52b3kudHlwZS5tYXRjaGVy",
            "LlN0cmluZ01hdGNoZXISNwoTcmVxdWlyZV9vY3NwX3N0YXBsZRgFIAEoCzIa",
            "Lmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWUSSAokcmVxdWlyZV9zaWduZWRf",
            "Y2VydGlmaWNhdGVfdGltZXN0YW1wGAYgASgLMhouZ29vZ2xlLnByb3RvYnVm",
            "LkJvb2xWYWx1ZRIqCgNjcmwYByABKAsyHS5lbnZveS5hcGkudjIuY29yZS5E",
            "YXRhU291cmNlEiEKGWFsbG93X2V4cGlyZWRfY2VydGlmaWNhdGUYCCABKAgS",
            "cgoYdHJ1c3RfY2hhaW5fdmVyaWZpY2F0aW9uGAogASgOMkYuZW52b3kuYXBp",
            "LnYyLmF1dGguQ2VydGlmaWNhdGVWYWxpZGF0aW9uQ29udGV4dC5UcnVzdENo",
            "YWluVmVyaWZpY2F0aW9uQgj6QgWCAQIQASJGChZUcnVzdENoYWluVmVyaWZp",
            "Y2F0aW9uEhYKElZFUklGWV9UUlVTVF9DSEFJThAAEhQKEEFDQ0VQVF9VTlRS",
            "VVNURUQQAUJpCh9pby5lbnZveXByb3h5LmVudm95LmFwaS52Mi5hdXRoQgtD",
            "b21tb25Qcm90b1AB8pj+jwUrEillbnZveS5leHRlbnNpb25zLnRyYW5zcG9y",
            "dF9zb2NrZXRzLnRscy52M7qAyNEGAhABYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Envoy.Api.V2.Core.BaseReflection.Descriptor, global::Envoy.Type.Matcher.StringReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.StructReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Udpa.Annotations.MigrateReflection.Descriptor, global::Udpa.Annotations.SensitiveReflection.Descriptor, global::Udpa.Annotations.StatusReflection.Descriptor, global::Validate.ValidateReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V2.Auth.TlsParameters), global::Envoy.Api.V2.Auth.TlsParameters.Parser, new[]{ "TlsMinimumProtocolVersion", "TlsMaximumProtocolVersion", "CipherSuites", "EcdhCurves" }, null, new[]{ typeof(global::Envoy.Api.V2.Auth.TlsParameters.Types.TlsProtocol) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V2.Auth.PrivateKeyProvider), global::Envoy.Api.V2.Auth.PrivateKeyProvider.Parser, new[]{ "ProviderName", "Config", "TypedConfig" }, new[]{ "ConfigType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V2.Auth.TlsCertificate), global::Envoy.Api.V2.Auth.TlsCertificate.Parser, new[]{ "CertificateChain", "PrivateKey", "PrivateKeyProvider", "Password", "OcspStaple", "SignedCertificateTimestamp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V2.Auth.TlsSessionTicketKeys), global::Envoy.Api.V2.Auth.TlsSessionTicketKeys.Parser, new[]{ "Keys" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V2.Auth.CertificateValidationContext), global::Envoy.Api.V2.Auth.CertificateValidationContext.Parser, new[]{ "TrustedCa", "VerifyCertificateSpki", "VerifyCertificateHash", "VerifySubjectAltName", "MatchSubjectAltNames", "RequireOcspStaple", "RequireSignedCertificateTimestamp", "Crl", "AllowExpiredCertificate", "TrustChainVerification" }, null, new[]{ typeof(global::Envoy.Api.V2.Auth.CertificateValidationContext.Types.TrustChainVerification) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TlsParameters : pb::IMessage<TlsParameters>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TlsParameters> _parser = new pb::MessageParser<TlsParameters>(() => new TlsParameters());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TlsParameters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V2.Auth.CommonReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TlsParameters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TlsParameters(TlsParameters other) : this() {
      tlsMinimumProtocolVersion_ = other.tlsMinimumProtocolVersion_;
      tlsMaximumProtocolVersion_ = other.tlsMaximumProtocolVersion_;
      cipherSuites_ = other.cipherSuites_.Clone();
      ecdhCurves_ = other.ecdhCurves_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TlsParameters Clone() {
      return new TlsParameters(this);
    }

    /// <summary>Field number for the "tls_minimum_protocol_version" field.</summary>
    public const int TlsMinimumProtocolVersionFieldNumber = 1;
    private global::Envoy.Api.V2.Auth.TlsParameters.Types.TlsProtocol tlsMinimumProtocolVersion_ = global::Envoy.Api.V2.Auth.TlsParameters.Types.TlsProtocol.TlsAuto;
    /// <summary>
    /// Minimum TLS protocol version. By default, it's ``TLSv1_2`` for clients and ``TLSv1_0`` for
    /// servers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Api.V2.Auth.TlsParameters.Types.TlsProtocol TlsMinimumProtocolVersion {
      get { return tlsMinimumProtocolVersion_; }
      set {
        tlsMinimumProtocolVersion_ = value;
      }
    }

    /// <summary>Field number for the "tls_maximum_protocol_version" field.</summary>
    public const int TlsMaximumProtocolVersionFieldNumber = 2;
    private global::Envoy.Api.V2.Auth.TlsParameters.Types.TlsProtocol tlsMaximumProtocolVersion_ = global::Envoy.Api.V2.Auth.TlsParameters.Types.TlsProtocol.TlsAuto;
    /// <summary>
    /// Maximum TLS protocol version. By default, it's ``TLSv1_2`` for clients and ``TLSv1_3`` for
    /// servers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Api.V2.Auth.TlsParameters.Types.TlsProtocol TlsMaximumProtocolVersion {
      get { return tlsMaximumProtocolVersion_; }
      set {
        tlsMaximumProtocolVersion_ = value;
      }
    }

    /// <summary>Field number for the "cipher_suites" field.</summary>
    public const int CipherSuitesFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_cipherSuites_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> cipherSuites_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// If specified, the TLS listener will only support the specified `cipher list
    /// &lt;https://commondatastorage.googleapis.com/chromium-boringssl-docs/ssl.h.html#Cipher-suite-configuration>`_
    /// when negotiating TLS 1.0-1.2 (this setting has no effect when negotiating TLS 1.3). If not
    /// specified, the default list will be used.
    ///
    /// In non-FIPS builds, the default cipher list is:
    ///
    /// .. code-block:: none
    ///
    ///   [ECDHE-ECDSA-AES128-GCM-SHA256|ECDHE-ECDSA-CHACHA20-POLY1305]
    ///   [ECDHE-RSA-AES128-GCM-SHA256|ECDHE-RSA-CHACHA20-POLY1305]
    ///   ECDHE-ECDSA-AES128-SHA
    ///   ECDHE-RSA-AES128-SHA
    ///   AES128-GCM-SHA256
    ///   AES128-SHA
    ///   ECDHE-ECDSA-AES256-GCM-SHA384
    ///   ECDHE-RSA-AES256-GCM-SHA384
    ///   ECDHE-ECDSA-AES256-SHA
    ///   ECDHE-RSA-AES256-SHA
    ///   AES256-GCM-SHA384
    ///   AES256-SHA
    ///
    /// In builds using :ref:`BoringSSL FIPS &lt;arch_overview_ssl_fips>`, the default cipher list is:
    ///
    /// .. code-block:: none
    ///
    ///   ECDHE-ECDSA-AES128-GCM-SHA256
    ///   ECDHE-RSA-AES128-GCM-SHA256
    ///   ECDHE-ECDSA-AES128-SHA
    ///   ECDHE-RSA-AES128-SHA
    ///   AES128-GCM-SHA256
    ///   AES128-SHA
    ///   ECDHE-ECDSA-AES256-GCM-SHA384
    ///   ECDHE-RSA-AES256-GCM-SHA384
    ///   ECDHE-ECDSA-AES256-SHA
    ///   ECDHE-RSA-AES256-SHA
    ///   AES256-GCM-SHA384
    ///   AES256-SHA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> CipherSuites {
      get { return cipherSuites_; }
    }

    /// <summary>Field number for the "ecdh_curves" field.</summary>
    public const int EcdhCurvesFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_ecdhCurves_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> ecdhCurves_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// If specified, the TLS connection will only support the specified ECDH
    /// curves. If not specified, the default curves will be used.
    ///
    /// In non-FIPS builds, the default curves are:
    ///
    /// .. code-block:: none
    ///
    ///   X25519
    ///   P-256
    ///
    /// In builds using :ref:`BoringSSL FIPS &lt;arch_overview_ssl_fips>`, the default curve is:
    ///
    /// .. code-block:: none
    ///
    ///   P-256
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> EcdhCurves {
      get { return ecdhCurves_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TlsParameters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TlsParameters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TlsMinimumProtocolVersion != other.TlsMinimumProtocolVersion) return false;
      if (TlsMaximumProtocolVersion != other.TlsMaximumProtocolVersion) return false;
      if(!cipherSuites_.Equals(other.cipherSuites_)) return false;
      if(!ecdhCurves_.Equals(other.ecdhCurves_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (TlsMinimumProtocolVersion != global::Envoy.Api.V2.Auth.TlsParameters.Types.TlsProtocol.TlsAuto) hash ^= TlsMinimumProtocolVersion.GetHashCode();
      if (TlsMaximumProtocolVersion != global::Envoy.Api.V2.Auth.TlsParameters.Types.TlsProtocol.TlsAuto) hash ^= TlsMaximumProtocolVersion.GetHashCode();
      hash ^= cipherSuites_.GetHashCode();
      hash ^= ecdhCurves_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TlsMinimumProtocolVersion != global::Envoy.Api.V2.Auth.TlsParameters.Types.TlsProtocol.TlsAuto) {
        output.WriteRawTag(8);
        output.WriteEnum((int) TlsMinimumProtocolVersion);
      }
      if (TlsMaximumProtocolVersion != global::Envoy.Api.V2.Auth.TlsParameters.Types.TlsProtocol.TlsAuto) {
        output.WriteRawTag(16);
        output.WriteEnum((int) TlsMaximumProtocolVersion);
      }
      cipherSuites_.WriteTo(output, _repeated_cipherSuites_codec);
      ecdhCurves_.WriteTo(output, _repeated_ecdhCurves_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TlsMinimumProtocolVersion != global::Envoy.Api.V2.Auth.TlsParameters.Types.TlsProtocol.TlsAuto) {
        output.WriteRawTag(8);
        output.WriteEnum((int) TlsMinimumProtocolVersion);
      }
      if (TlsMaximumProtocolVersion != global::Envoy.Api.V2.Auth.TlsParameters.Types.TlsProtocol.TlsAuto) {
        output.WriteRawTag(16);
        output.WriteEnum((int) TlsMaximumProtocolVersion);
      }
      cipherSuites_.WriteTo(ref output, _repeated_cipherSuites_codec);
      ecdhCurves_.WriteTo(ref output, _repeated_ecdhCurves_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (TlsMinimumProtocolVersion != global::Envoy.Api.V2.Auth.TlsParameters.Types.TlsProtocol.TlsAuto) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TlsMinimumProtocolVersion);
      }
      if (TlsMaximumProtocolVersion != global::Envoy.Api.V2.Auth.TlsParameters.Types.TlsProtocol.TlsAuto) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TlsMaximumProtocolVersion);
      }
      size += cipherSuites_.CalculateSize(_repeated_cipherSuites_codec);
      size += ecdhCurves_.CalculateSize(_repeated_ecdhCurves_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TlsParameters other) {
      if (other == null) {
        return;
      }
      if (other.TlsMinimumProtocolVersion != global::Envoy.Api.V2.Auth.TlsParameters.Types.TlsProtocol.TlsAuto) {
        TlsMinimumProtocolVersion = other.TlsMinimumProtocolVersion;
      }
      if (other.TlsMaximumProtocolVersion != global::Envoy.Api.V2.Auth.TlsParameters.Types.TlsProtocol.TlsAuto) {
        TlsMaximumProtocolVersion = other.TlsMaximumProtocolVersion;
      }
      cipherSuites_.Add(other.cipherSuites_);
      ecdhCurves_.Add(other.ecdhCurves_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TlsMinimumProtocolVersion = (global::Envoy.Api.V2.Auth.TlsParameters.Types.TlsProtocol) input.ReadEnum();
            break;
          }
          case 16: {
            TlsMaximumProtocolVersion = (global::Envoy.Api.V2.Auth.TlsParameters.Types.TlsProtocol) input.ReadEnum();
            break;
          }
          case 26: {
            cipherSuites_.AddEntriesFrom(input, _repeated_cipherSuites_codec);
            break;
          }
          case 34: {
            ecdhCurves_.AddEntriesFrom(input, _repeated_ecdhCurves_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TlsMinimumProtocolVersion = (global::Envoy.Api.V2.Auth.TlsParameters.Types.TlsProtocol) input.ReadEnum();
            break;
          }
          case 16: {
            TlsMaximumProtocolVersion = (global::Envoy.Api.V2.Auth.TlsParameters.Types.TlsProtocol) input.ReadEnum();
            break;
          }
          case 26: {
            cipherSuites_.AddEntriesFrom(ref input, _repeated_cipherSuites_codec);
            break;
          }
          case 34: {
            ecdhCurves_.AddEntriesFrom(ref input, _repeated_ecdhCurves_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the TlsParameters message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum TlsProtocol {
        /// <summary>
        /// Envoy will choose the optimal TLS version.
        /// </summary>
        [pbr::OriginalName("TLS_AUTO")] TlsAuto = 0,
        /// <summary>
        /// TLS 1.0
        /// </summary>
        [pbr::OriginalName("TLSv1_0")] Tlsv10 = 1,
        /// <summary>
        /// TLS 1.1
        /// </summary>
        [pbr::OriginalName("TLSv1_1")] Tlsv11 = 2,
        /// <summary>
        /// TLS 1.2
        /// </summary>
        [pbr::OriginalName("TLSv1_2")] Tlsv12 = 3,
        /// <summary>
        /// TLS 1.3
        /// </summary>
        [pbr::OriginalName("TLSv1_3")] Tlsv13 = 4,
      }

    }
    #endregion

  }

  /// <summary>
  /// BoringSSL private key method configuration. The private key methods are used for external
  /// (potentially asynchronous) signing and decryption operations. Some use cases for private key
  /// methods would be TPM support and TLS acceleration.
  /// </summary>
  public sealed partial class PrivateKeyProvider : pb::IMessage<PrivateKeyProvider>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PrivateKeyProvider> _parser = new pb::MessageParser<PrivateKeyProvider>(() => new PrivateKeyProvider());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PrivateKeyProvider> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V2.Auth.CommonReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PrivateKeyProvider() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PrivateKeyProvider(PrivateKeyProvider other) : this() {
      providerName_ = other.providerName_;
      switch (other.ConfigTypeCase) {
        case ConfigTypeOneofCase.Config:
          Config = other.Config.Clone();
          break;
        case ConfigTypeOneofCase.TypedConfig:
          TypedConfig = other.TypedConfig.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PrivateKeyProvider Clone() {
      return new PrivateKeyProvider(this);
    }

    /// <summary>Field number for the "provider_name" field.</summary>
    public const int ProviderNameFieldNumber = 1;
    private string providerName_ = "";
    /// <summary>
    /// Private key method provider name. The name must match a
    /// supported private key method provider type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ProviderName {
      get { return providerName_; }
      set {
        providerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 2;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Struct Config {
      get { return configTypeCase_ == ConfigTypeOneofCase.Config ? (global::Google.Protobuf.WellKnownTypes.Struct) configType_ : null; }
      set {
        configType_ = value;
        configTypeCase_ = value == null ? ConfigTypeOneofCase.None : ConfigTypeOneofCase.Config;
      }
    }

    /// <summary>Field number for the "typed_config" field.</summary>
    public const int TypedConfigFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Any TypedConfig {
      get { return configTypeCase_ == ConfigTypeOneofCase.TypedConfig ? (global::Google.Protobuf.WellKnownTypes.Any) configType_ : null; }
      set {
        configType_ = value;
        configTypeCase_ = value == null ? ConfigTypeOneofCase.None : ConfigTypeOneofCase.TypedConfig;
      }
    }

    private object configType_;
    /// <summary>Enum of possible cases for the "config_type" oneof.</summary>
    public enum ConfigTypeOneofCase {
      None = 0,
      Config = 2,
      TypedConfig = 3,
    }
    private ConfigTypeOneofCase configTypeCase_ = ConfigTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ConfigTypeOneofCase ConfigTypeCase {
      get { return configTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConfigType() {
      configTypeCase_ = ConfigTypeOneofCase.None;
      configType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PrivateKeyProvider);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PrivateKeyProvider other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProviderName != other.ProviderName) return false;
      if (!object.Equals(Config, other.Config)) return false;
      if (!object.Equals(TypedConfig, other.TypedConfig)) return false;
      if (ConfigTypeCase != other.ConfigTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (ProviderName.Length != 0) hash ^= ProviderName.GetHashCode();
      if (configTypeCase_ == ConfigTypeOneofCase.Config) hash ^= Config.GetHashCode();
      if (configTypeCase_ == ConfigTypeOneofCase.TypedConfig) hash ^= TypedConfig.GetHashCode();
      hash ^= (int) configTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ProviderName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProviderName);
      }
      if (configTypeCase_ == ConfigTypeOneofCase.Config) {
        output.WriteRawTag(18);
        output.WriteMessage(Config);
      }
      if (configTypeCase_ == ConfigTypeOneofCase.TypedConfig) {
        output.WriteRawTag(26);
        output.WriteMessage(TypedConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ProviderName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProviderName);
      }
      if (configTypeCase_ == ConfigTypeOneofCase.Config) {
        output.WriteRawTag(18);
        output.WriteMessage(Config);
      }
      if (configTypeCase_ == ConfigTypeOneofCase.TypedConfig) {
        output.WriteRawTag(26);
        output.WriteMessage(TypedConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (ProviderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProviderName);
      }
      if (configTypeCase_ == ConfigTypeOneofCase.Config) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (configTypeCase_ == ConfigTypeOneofCase.TypedConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TypedConfig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PrivateKeyProvider other) {
      if (other == null) {
        return;
      }
      if (other.ProviderName.Length != 0) {
        ProviderName = other.ProviderName;
      }
      switch (other.ConfigTypeCase) {
        case ConfigTypeOneofCase.Config:
          if (Config == null) {
            Config = new global::Google.Protobuf.WellKnownTypes.Struct();
          }
          Config.MergeFrom(other.Config);
          break;
        case ConfigTypeOneofCase.TypedConfig:
          if (TypedConfig == null) {
            TypedConfig = new global::Google.Protobuf.WellKnownTypes.Any();
          }
          TypedConfig.MergeFrom(other.TypedConfig);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ProviderName = input.ReadString();
            break;
          }
          case 18: {
            global::Google.Protobuf.WellKnownTypes.Struct subBuilder = new global::Google.Protobuf.WellKnownTypes.Struct();
            if (configTypeCase_ == ConfigTypeOneofCase.Config) {
              subBuilder.MergeFrom(Config);
            }
            input.ReadMessage(subBuilder);
            Config = subBuilder;
            break;
          }
          case 26: {
            global::Google.Protobuf.WellKnownTypes.Any subBuilder = new global::Google.Protobuf.WellKnownTypes.Any();
            if (configTypeCase_ == ConfigTypeOneofCase.TypedConfig) {
              subBuilder.MergeFrom(TypedConfig);
            }
            input.ReadMessage(subBuilder);
            TypedConfig = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ProviderName = input.ReadString();
            break;
          }
          case 18: {
            global::Google.Protobuf.WellKnownTypes.Struct subBuilder = new global::Google.Protobuf.WellKnownTypes.Struct();
            if (configTypeCase_ == ConfigTypeOneofCase.Config) {
              subBuilder.MergeFrom(Config);
            }
            input.ReadMessage(subBuilder);
            Config = subBuilder;
            break;
          }
          case 26: {
            global::Google.Protobuf.WellKnownTypes.Any subBuilder = new global::Google.Protobuf.WellKnownTypes.Any();
            if (configTypeCase_ == ConfigTypeOneofCase.TypedConfig) {
              subBuilder.MergeFrom(TypedConfig);
            }
            input.ReadMessage(subBuilder);
            TypedConfig = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// [#next-free-field: 7]
  /// </summary>
  public sealed partial class TlsCertificate : pb::IMessage<TlsCertificate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TlsCertificate> _parser = new pb::MessageParser<TlsCertificate>(() => new TlsCertificate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TlsCertificate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V2.Auth.CommonReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TlsCertificate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TlsCertificate(TlsCertificate other) : this() {
      certificateChain_ = other.certificateChain_ != null ? other.certificateChain_.Clone() : null;
      privateKey_ = other.privateKey_ != null ? other.privateKey_.Clone() : null;
      privateKeyProvider_ = other.privateKeyProvider_ != null ? other.privateKeyProvider_.Clone() : null;
      password_ = other.password_ != null ? other.password_.Clone() : null;
      ocspStaple_ = other.ocspStaple_ != null ? other.ocspStaple_.Clone() : null;
      signedCertificateTimestamp_ = other.signedCertificateTimestamp_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TlsCertificate Clone() {
      return new TlsCertificate(this);
    }

    /// <summary>Field number for the "certificate_chain" field.</summary>
    public const int CertificateChainFieldNumber = 1;
    private global::Envoy.Api.V2.Core.DataSource certificateChain_;
    /// <summary>
    /// The TLS certificate chain.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Api.V2.Core.DataSource CertificateChain {
      get { return certificateChain_; }
      set {
        certificateChain_ = value;
      }
    }

    /// <summary>Field number for the "private_key" field.</summary>
    public const int PrivateKeyFieldNumber = 2;
    private global::Envoy.Api.V2.Core.DataSource privateKey_;
    /// <summary>
    /// The TLS private key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Api.V2.Core.DataSource PrivateKey {
      get { return privateKey_; }
      set {
        privateKey_ = value;
      }
    }

    /// <summary>Field number for the "private_key_provider" field.</summary>
    public const int PrivateKeyProviderFieldNumber = 6;
    private global::Envoy.Api.V2.Auth.PrivateKeyProvider privateKeyProvider_;
    /// <summary>
    /// BoringSSL private key method provider. This is an alternative to :ref:`private_key
    /// &lt;envoy_api_field_auth.TlsCertificate.private_key>` field. This can't be
    /// marked as ``oneof`` due to API compatibility reasons. Setting both :ref:`private_key
    /// &lt;envoy_api_field_auth.TlsCertificate.private_key>` and
    /// :ref:`private_key_provider
    /// &lt;envoy_api_field_auth.TlsCertificate.private_key_provider>` fields will result in an
    /// error.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Api.V2.Auth.PrivateKeyProvider PrivateKeyProvider {
      get { return privateKeyProvider_; }
      set {
        privateKeyProvider_ = value;
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 3;
    private global::Envoy.Api.V2.Core.DataSource password_;
    /// <summary>
    /// The password to decrypt the TLS private key. If this field is not set, it is assumed that the
    /// TLS private key is not password encrypted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Api.V2.Core.DataSource Password {
      get { return password_; }
      set {
        password_ = value;
      }
    }

    /// <summary>Field number for the "ocsp_staple" field.</summary>
    public const int OcspStapleFieldNumber = 4;
    private global::Envoy.Api.V2.Core.DataSource ocspStaple_;
    /// <summary>
    /// [#not-implemented-hide:]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Api.V2.Core.DataSource OcspStaple {
      get { return ocspStaple_; }
      set {
        ocspStaple_ = value;
      }
    }

    /// <summary>Field number for the "signed_certificate_timestamp" field.</summary>
    public const int SignedCertificateTimestampFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Envoy.Api.V2.Core.DataSource> _repeated_signedCertificateTimestamp_codec
        = pb::FieldCodec.ForMessage(42, global::Envoy.Api.V2.Core.DataSource.Parser);
    private readonly pbc::RepeatedField<global::Envoy.Api.V2.Core.DataSource> signedCertificateTimestamp_ = new pbc::RepeatedField<global::Envoy.Api.V2.Core.DataSource>();
    /// <summary>
    /// [#not-implemented-hide:]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Envoy.Api.V2.Core.DataSource> SignedCertificateTimestamp {
      get { return signedCertificateTimestamp_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TlsCertificate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TlsCertificate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CertificateChain, other.CertificateChain)) return false;
      if (!object.Equals(PrivateKey, other.PrivateKey)) return false;
      if (!object.Equals(PrivateKeyProvider, other.PrivateKeyProvider)) return false;
      if (!object.Equals(Password, other.Password)) return false;
      if (!object.Equals(OcspStaple, other.OcspStaple)) return false;
      if(!signedCertificateTimestamp_.Equals(other.signedCertificateTimestamp_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (certificateChain_ != null) hash ^= CertificateChain.GetHashCode();
      if (privateKey_ != null) hash ^= PrivateKey.GetHashCode();
      if (privateKeyProvider_ != null) hash ^= PrivateKeyProvider.GetHashCode();
      if (password_ != null) hash ^= Password.GetHashCode();
      if (ocspStaple_ != null) hash ^= OcspStaple.GetHashCode();
      hash ^= signedCertificateTimestamp_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (certificateChain_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CertificateChain);
      }
      if (privateKey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PrivateKey);
      }
      if (password_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Password);
      }
      if (ocspStaple_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(OcspStaple);
      }
      signedCertificateTimestamp_.WriteTo(output, _repeated_signedCertificateTimestamp_codec);
      if (privateKeyProvider_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(PrivateKeyProvider);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (certificateChain_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CertificateChain);
      }
      if (privateKey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PrivateKey);
      }
      if (password_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Password);
      }
      if (ocspStaple_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(OcspStaple);
      }
      signedCertificateTimestamp_.WriteTo(ref output, _repeated_signedCertificateTimestamp_codec);
      if (privateKeyProvider_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(PrivateKeyProvider);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (certificateChain_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CertificateChain);
      }
      if (privateKey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PrivateKey);
      }
      if (privateKeyProvider_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PrivateKeyProvider);
      }
      if (password_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Password);
      }
      if (ocspStaple_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OcspStaple);
      }
      size += signedCertificateTimestamp_.CalculateSize(_repeated_signedCertificateTimestamp_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TlsCertificate other) {
      if (other == null) {
        return;
      }
      if (other.certificateChain_ != null) {
        if (certificateChain_ == null) {
          CertificateChain = new global::Envoy.Api.V2.Core.DataSource();
        }
        CertificateChain.MergeFrom(other.CertificateChain);
      }
      if (other.privateKey_ != null) {
        if (privateKey_ == null) {
          PrivateKey = new global::Envoy.Api.V2.Core.DataSource();
        }
        PrivateKey.MergeFrom(other.PrivateKey);
      }
      if (other.privateKeyProvider_ != null) {
        if (privateKeyProvider_ == null) {
          PrivateKeyProvider = new global::Envoy.Api.V2.Auth.PrivateKeyProvider();
        }
        PrivateKeyProvider.MergeFrom(other.PrivateKeyProvider);
      }
      if (other.password_ != null) {
        if (password_ == null) {
          Password = new global::Envoy.Api.V2.Core.DataSource();
        }
        Password.MergeFrom(other.Password);
      }
      if (other.ocspStaple_ != null) {
        if (ocspStaple_ == null) {
          OcspStaple = new global::Envoy.Api.V2.Core.DataSource();
        }
        OcspStaple.MergeFrom(other.OcspStaple);
      }
      signedCertificateTimestamp_.Add(other.signedCertificateTimestamp_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (certificateChain_ == null) {
              CertificateChain = new global::Envoy.Api.V2.Core.DataSource();
            }
            input.ReadMessage(CertificateChain);
            break;
          }
          case 18: {
            if (privateKey_ == null) {
              PrivateKey = new global::Envoy.Api.V2.Core.DataSource();
            }
            input.ReadMessage(PrivateKey);
            break;
          }
          case 26: {
            if (password_ == null) {
              Password = new global::Envoy.Api.V2.Core.DataSource();
            }
            input.ReadMessage(Password);
            break;
          }
          case 34: {
            if (ocspStaple_ == null) {
              OcspStaple = new global::Envoy.Api.V2.Core.DataSource();
            }
            input.ReadMessage(OcspStaple);
            break;
          }
          case 42: {
            signedCertificateTimestamp_.AddEntriesFrom(input, _repeated_signedCertificateTimestamp_codec);
            break;
          }
          case 50: {
            if (privateKeyProvider_ == null) {
              PrivateKeyProvider = new global::Envoy.Api.V2.Auth.PrivateKeyProvider();
            }
            input.ReadMessage(PrivateKeyProvider);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (certificateChain_ == null) {
              CertificateChain = new global::Envoy.Api.V2.Core.DataSource();
            }
            input.ReadMessage(CertificateChain);
            break;
          }
          case 18: {
            if (privateKey_ == null) {
              PrivateKey = new global::Envoy.Api.V2.Core.DataSource();
            }
            input.ReadMessage(PrivateKey);
            break;
          }
          case 26: {
            if (password_ == null) {
              Password = new global::Envoy.Api.V2.Core.DataSource();
            }
            input.ReadMessage(Password);
            break;
          }
          case 34: {
            if (ocspStaple_ == null) {
              OcspStaple = new global::Envoy.Api.V2.Core.DataSource();
            }
            input.ReadMessage(OcspStaple);
            break;
          }
          case 42: {
            signedCertificateTimestamp_.AddEntriesFrom(ref input, _repeated_signedCertificateTimestamp_codec);
            break;
          }
          case 50: {
            if (privateKeyProvider_ == null) {
              PrivateKeyProvider = new global::Envoy.Api.V2.Auth.PrivateKeyProvider();
            }
            input.ReadMessage(PrivateKeyProvider);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TlsSessionTicketKeys : pb::IMessage<TlsSessionTicketKeys>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TlsSessionTicketKeys> _parser = new pb::MessageParser<TlsSessionTicketKeys>(() => new TlsSessionTicketKeys());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TlsSessionTicketKeys> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V2.Auth.CommonReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TlsSessionTicketKeys() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TlsSessionTicketKeys(TlsSessionTicketKeys other) : this() {
      keys_ = other.keys_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TlsSessionTicketKeys Clone() {
      return new TlsSessionTicketKeys(this);
    }

    /// <summary>Field number for the "keys" field.</summary>
    public const int KeysFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Envoy.Api.V2.Core.DataSource> _repeated_keys_codec
        = pb::FieldCodec.ForMessage(10, global::Envoy.Api.V2.Core.DataSource.Parser);
    private readonly pbc::RepeatedField<global::Envoy.Api.V2.Core.DataSource> keys_ = new pbc::RepeatedField<global::Envoy.Api.V2.Core.DataSource>();
    /// <summary>
    /// Keys for encrypting and decrypting TLS session tickets. The
    /// first key in the array contains the key to encrypt all new sessions created by this context.
    /// All keys are candidates for decrypting received tickets. This allows for easy rotation of keys
    /// by, for example, putting the new key first, and the previous key second.
    ///
    /// If :ref:`session_ticket_keys &lt;envoy_api_field_auth.DownstreamTlsContext.session_ticket_keys>`
    /// is not specified, the TLS library will still support resuming sessions via tickets, but it will
    /// use an internally-generated and managed key, so sessions cannot be resumed across hot restarts
    /// or on different hosts.
    ///
    /// Each key must contain exactly 80 bytes of cryptographically-secure random data. For
    /// example, the output of ``openssl rand 80``.
    ///
    /// .. attention::
    ///
    ///   Using this feature has serious security considerations and risks. Improper handling of keys
    ///   may result in loss of secrecy in connections, even if ciphers supporting perfect forward
    ///   secrecy are used. See https://www.imperialviolet.org/2013/06/27/botchingpfs.html for some
    ///   discussion. To minimize the risk, you must:
    ///
    ///   * Keep the session ticket keys at least as secure as your TLS certificate private keys
    ///   * Rotate session ticket keys at least daily, and preferably hourly
    ///   * Always generate keys using a cryptographically-secure random data source
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Envoy.Api.V2.Core.DataSource> Keys {
      get { return keys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TlsSessionTicketKeys);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TlsSessionTicketKeys other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!keys_.Equals(other.keys_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= keys_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      keys_.WriteTo(output, _repeated_keys_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      keys_.WriteTo(ref output, _repeated_keys_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += keys_.CalculateSize(_repeated_keys_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TlsSessionTicketKeys other) {
      if (other == null) {
        return;
      }
      keys_.Add(other.keys_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            keys_.AddEntriesFrom(input, _repeated_keys_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            keys_.AddEntriesFrom(ref input, _repeated_keys_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// [#next-free-field: 11]
  /// </summary>
  public sealed partial class CertificateValidationContext : pb::IMessage<CertificateValidationContext>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CertificateValidationContext> _parser = new pb::MessageParser<CertificateValidationContext>(() => new CertificateValidationContext());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CertificateValidationContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V2.Auth.CommonReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CertificateValidationContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CertificateValidationContext(CertificateValidationContext other) : this() {
      trustedCa_ = other.trustedCa_ != null ? other.trustedCa_.Clone() : null;
      verifyCertificateSpki_ = other.verifyCertificateSpki_.Clone();
      verifyCertificateHash_ = other.verifyCertificateHash_.Clone();
      verifySubjectAltName_ = other.verifySubjectAltName_.Clone();
      matchSubjectAltNames_ = other.matchSubjectAltNames_.Clone();
      RequireOcspStaple = other.RequireOcspStaple;
      RequireSignedCertificateTimestamp = other.RequireSignedCertificateTimestamp;
      crl_ = other.crl_ != null ? other.crl_.Clone() : null;
      allowExpiredCertificate_ = other.allowExpiredCertificate_;
      trustChainVerification_ = other.trustChainVerification_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CertificateValidationContext Clone() {
      return new CertificateValidationContext(this);
    }

    /// <summary>Field number for the "trusted_ca" field.</summary>
    public const int TrustedCaFieldNumber = 1;
    private global::Envoy.Api.V2.Core.DataSource trustedCa_;
    /// <summary>
    /// TLS certificate data containing certificate authority certificates to use in verifying
    /// a presented peer certificate (e.g. server certificate for clusters or client certificate
    /// for listeners). If not specified and a peer certificate is presented it will not be
    /// verified. By default, a client certificate is optional, unless one of the additional
    /// options (:ref:`require_client_certificate
    /// &lt;envoy_api_field_auth.DownstreamTlsContext.require_client_certificate>`,
    /// :ref:`verify_certificate_spki
    /// &lt;envoy_api_field_auth.CertificateValidationContext.verify_certificate_spki>`,
    /// :ref:`verify_certificate_hash
    /// &lt;envoy_api_field_auth.CertificateValidationContext.verify_certificate_hash>`, or
    /// :ref:`match_subject_alt_names
    /// &lt;envoy_api_field_auth.CertificateValidationContext.match_subject_alt_names>`) is also
    /// specified.
    ///
    /// It can optionally contain certificate revocation lists, in which case Envoy will verify
    /// that the presented peer certificate has not been revoked by one of the included CRLs.
    ///
    /// See :ref:`the TLS overview &lt;arch_overview_ssl_enabling_verification>` for a list of common
    /// system CA locations.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Api.V2.Core.DataSource TrustedCa {
      get { return trustedCa_; }
      set {
        trustedCa_ = value;
      }
    }

    /// <summary>Field number for the "verify_certificate_spki" field.</summary>
    public const int VerifyCertificateSpkiFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_verifyCertificateSpki_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> verifyCertificateSpki_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// An optional list of base64-encoded SHA-256 hashes. If specified, Envoy will verify that the
    /// SHA-256 of the DER-encoded Subject Public Key Information (SPKI) of the presented certificate
    /// matches one of the specified values.
    ///
    /// A base64-encoded SHA-256 of the Subject Public Key Information (SPKI) of the certificate
    /// can be generated with the following command:
    ///
    /// .. code-block:: bash
    ///
    ///   $ openssl x509 -in path/to/client.crt -noout -pubkey
    ///     | openssl pkey -pubin -outform DER
    ///     | openssl dgst -sha256 -binary
    ///     | openssl enc -base64
    ///   NvqYIYSbgK2vCJpQhObf77vv+bQWtc5ek5RIOwPiC9A=
    ///
    /// This is the format used in HTTP Public Key Pinning.
    ///
    /// When both:
    /// :ref:`verify_certificate_hash
    /// &lt;envoy_api_field_auth.CertificateValidationContext.verify_certificate_hash>` and
    /// :ref:`verify_certificate_spki
    /// &lt;envoy_api_field_auth.CertificateValidationContext.verify_certificate_spki>` are specified,
    /// a hash matching value from either of the lists will result in the certificate being accepted.
    ///
    /// .. attention::
    ///
    ///   This option is preferred over :ref:`verify_certificate_hash
    ///   &lt;envoy_api_field_auth.CertificateValidationContext.verify_certificate_hash>`,
    ///   because SPKI is tied to a private key, so it doesn't change when the certificate
    ///   is renewed using the same private key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> VerifyCertificateSpki {
      get { return verifyCertificateSpki_; }
    }

    /// <summary>Field number for the "verify_certificate_hash" field.</summary>
    public const int VerifyCertificateHashFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_verifyCertificateHash_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> verifyCertificateHash_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// An optional list of hex-encoded SHA-256 hashes. If specified, Envoy will verify that
    /// the SHA-256 of the DER-encoded presented certificate matches one of the specified values.
    ///
    /// A hex-encoded SHA-256 of the certificate can be generated with the following command:
    ///
    /// .. code-block:: bash
    ///
    ///   $ openssl x509 -in path/to/client.crt -outform DER | openssl dgst -sha256 | cut -d" " -f2
    ///   df6ff72fe9116521268f6f2dd4966f51df479883fe7037b39f75916ac3049d1a
    ///
    /// A long hex-encoded and colon-separated SHA-256 (a.k.a. "fingerprint") of the certificate
    /// can be generated with the following command:
    ///
    /// .. code-block:: bash
    ///
    ///   $ openssl x509 -in path/to/client.crt -noout -fingerprint -sha256 | cut -d"=" -f2
    ///   DF:6F:F7:2F:E9:11:65:21:26:8F:6F:2D:D4:96:6F:51:DF:47:98:83:FE:70:37:B3:9F:75:91:6A:C3:04:9D:1A
    ///
    /// Both of those formats are acceptable.
    ///
    /// When both:
    /// :ref:`verify_certificate_hash
    /// &lt;envoy_api_field_auth.CertificateValidationContext.verify_certificate_hash>` and
    /// :ref:`verify_certificate_spki
    /// &lt;envoy_api_field_auth.CertificateValidationContext.verify_certificate_spki>` are specified,
    /// a hash matching value from either of the lists will result in the certificate being accepted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> VerifyCertificateHash {
      get { return verifyCertificateHash_; }
    }

    /// <summary>Field number for the "verify_subject_alt_name" field.</summary>
    public const int VerifySubjectAltNameFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_verifySubjectAltName_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> verifySubjectAltName_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// An optional list of Subject Alternative Names. If specified, Envoy will verify that the
    /// Subject Alternative Name of the presented certificate matches one of the specified values.
    ///
    /// .. attention::
    ///
    ///   Subject Alternative Names are easily spoofable and verifying only them is insecure,
    ///   therefore this option must be used together with :ref:`trusted_ca
    ///   &lt;envoy_api_field_auth.CertificateValidationContext.trusted_ca>`.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> VerifySubjectAltName {
      get { return verifySubjectAltName_; }
    }

    /// <summary>Field number for the "match_subject_alt_names" field.</summary>
    public const int MatchSubjectAltNamesFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Envoy.Type.Matcher.StringMatcher> _repeated_matchSubjectAltNames_codec
        = pb::FieldCodec.ForMessage(74, global::Envoy.Type.Matcher.StringMatcher.Parser);
    private readonly pbc::RepeatedField<global::Envoy.Type.Matcher.StringMatcher> matchSubjectAltNames_ = new pbc::RepeatedField<global::Envoy.Type.Matcher.StringMatcher>();
    /// <summary>
    /// An optional list of Subject Alternative name matchers. Envoy will verify that the
    /// Subject Alternative Name of the presented certificate matches one of the specified matches.
    ///
    /// When a certificate has wildcard DNS SAN entries, to match a specific client, it should be
    /// configured with exact match type in the :ref:`string matcher &lt;envoy_api_msg_type.matcher.StringMatcher>`.
    /// For example if the certificate has "\*.example.com" as DNS SAN entry, to allow only "api.example.com",
    /// it should be configured as shown below.
    ///
    /// .. code-block:: yaml
    ///
    ///  match_subject_alt_names:
    ///    exact: "api.example.com"
    ///
    /// .. attention::
    ///
    ///   Subject Alternative Names are easily spoofable and verifying only them is insecure,
    ///   therefore this option must be used together with :ref:`trusted_ca
    ///   &lt;envoy_api_field_auth.CertificateValidationContext.trusted_ca>`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Envoy.Type.Matcher.StringMatcher> MatchSubjectAltNames {
      get { return matchSubjectAltNames_; }
    }

    /// <summary>Field number for the "require_ocsp_staple" field.</summary>
    public const int RequireOcspStapleFieldNumber = 5;
    private static readonly pb::FieldCodec<bool?> _single_requireOcspStaple_codec = pb::FieldCodec.ForStructWrapper<bool>(42);
    private bool? requireOcspStaple_;
    /// <summary>
    /// [#not-implemented-hide:] Must present a signed time-stamped OCSP response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool? RequireOcspStaple {
      get { return requireOcspStaple_; }
      set {
        requireOcspStaple_ = value;
      }
    }


    /// <summary>Field number for the "require_signed_certificate_timestamp" field.</summary>
    public const int RequireSignedCertificateTimestampFieldNumber = 6;
    private static readonly pb::FieldCodec<bool?> _single_requireSignedCertificateTimestamp_codec = pb::FieldCodec.ForStructWrapper<bool>(50);
    private bool? requireSignedCertificateTimestamp_;
    /// <summary>
    /// [#not-implemented-hide:] Must present signed certificate time-stamp.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool? RequireSignedCertificateTimestamp {
      get { return requireSignedCertificateTimestamp_; }
      set {
        requireSignedCertificateTimestamp_ = value;
      }
    }


    /// <summary>Field number for the "crl" field.</summary>
    public const int CrlFieldNumber = 7;
    private global::Envoy.Api.V2.Core.DataSource crl_;
    /// <summary>
    /// An optional `certificate revocation list
    /// &lt;https://en.wikipedia.org/wiki/Certificate_revocation_list>`_
    /// (in PEM format). If specified, Envoy will verify that the presented peer
    /// certificate has not been revoked by this CRL. If this DataSource contains
    /// multiple CRLs, all of them will be used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Api.V2.Core.DataSource Crl {
      get { return crl_; }
      set {
        crl_ = value;
      }
    }

    /// <summary>Field number for the "allow_expired_certificate" field.</summary>
    public const int AllowExpiredCertificateFieldNumber = 8;
    private bool allowExpiredCertificate_;
    /// <summary>
    /// If specified, Envoy will not reject expired certificates.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AllowExpiredCertificate {
      get { return allowExpiredCertificate_; }
      set {
        allowExpiredCertificate_ = value;
      }
    }

    /// <summary>Field number for the "trust_chain_verification" field.</summary>
    public const int TrustChainVerificationFieldNumber = 10;
    private global::Envoy.Api.V2.Auth.CertificateValidationContext.Types.TrustChainVerification trustChainVerification_ = global::Envoy.Api.V2.Auth.CertificateValidationContext.Types.TrustChainVerification.VerifyTrustChain;
    /// <summary>
    /// Certificate trust chain verification mode.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Api.V2.Auth.CertificateValidationContext.Types.TrustChainVerification TrustChainVerification {
      get { return trustChainVerification_; }
      set {
        trustChainVerification_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CertificateValidationContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CertificateValidationContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TrustedCa, other.TrustedCa)) return false;
      if(!verifyCertificateSpki_.Equals(other.verifyCertificateSpki_)) return false;
      if(!verifyCertificateHash_.Equals(other.verifyCertificateHash_)) return false;
      if(!verifySubjectAltName_.Equals(other.verifySubjectAltName_)) return false;
      if(!matchSubjectAltNames_.Equals(other.matchSubjectAltNames_)) return false;
      if (RequireOcspStaple != other.RequireOcspStaple) return false;
      if (RequireSignedCertificateTimestamp != other.RequireSignedCertificateTimestamp) return false;
      if (!object.Equals(Crl, other.Crl)) return false;
      if (AllowExpiredCertificate != other.AllowExpiredCertificate) return false;
      if (TrustChainVerification != other.TrustChainVerification) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (trustedCa_ != null) hash ^= TrustedCa.GetHashCode();
      hash ^= verifyCertificateSpki_.GetHashCode();
      hash ^= verifyCertificateHash_.GetHashCode();
      hash ^= verifySubjectAltName_.GetHashCode();
      hash ^= matchSubjectAltNames_.GetHashCode();
      if (requireOcspStaple_ != null) hash ^= RequireOcspStaple.GetHashCode();
      if (requireSignedCertificateTimestamp_ != null) hash ^= RequireSignedCertificateTimestamp.GetHashCode();
      if (crl_ != null) hash ^= Crl.GetHashCode();
      if (AllowExpiredCertificate != false) hash ^= AllowExpiredCertificate.GetHashCode();
      if (TrustChainVerification != global::Envoy.Api.V2.Auth.CertificateValidationContext.Types.TrustChainVerification.VerifyTrustChain) hash ^= TrustChainVerification.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (trustedCa_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TrustedCa);
      }
      verifyCertificateHash_.WriteTo(output, _repeated_verifyCertificateHash_codec);
      verifyCertificateSpki_.WriteTo(output, _repeated_verifyCertificateSpki_codec);
      verifySubjectAltName_.WriteTo(output, _repeated_verifySubjectAltName_codec);
      if (requireOcspStaple_ != null) {
        _single_requireOcspStaple_codec.WriteTagAndValue(output, RequireOcspStaple);
      }
      if (requireSignedCertificateTimestamp_ != null) {
        _single_requireSignedCertificateTimestamp_codec.WriteTagAndValue(output, RequireSignedCertificateTimestamp);
      }
      if (crl_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Crl);
      }
      if (AllowExpiredCertificate != false) {
        output.WriteRawTag(64);
        output.WriteBool(AllowExpiredCertificate);
      }
      matchSubjectAltNames_.WriteTo(output, _repeated_matchSubjectAltNames_codec);
      if (TrustChainVerification != global::Envoy.Api.V2.Auth.CertificateValidationContext.Types.TrustChainVerification.VerifyTrustChain) {
        output.WriteRawTag(80);
        output.WriteEnum((int) TrustChainVerification);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (trustedCa_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TrustedCa);
      }
      verifyCertificateHash_.WriteTo(ref output, _repeated_verifyCertificateHash_codec);
      verifyCertificateSpki_.WriteTo(ref output, _repeated_verifyCertificateSpki_codec);
      verifySubjectAltName_.WriteTo(ref output, _repeated_verifySubjectAltName_codec);
      if (requireOcspStaple_ != null) {
        _single_requireOcspStaple_codec.WriteTagAndValue(ref output, RequireOcspStaple);
      }
      if (requireSignedCertificateTimestamp_ != null) {
        _single_requireSignedCertificateTimestamp_codec.WriteTagAndValue(ref output, RequireSignedCertificateTimestamp);
      }
      if (crl_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Crl);
      }
      if (AllowExpiredCertificate != false) {
        output.WriteRawTag(64);
        output.WriteBool(AllowExpiredCertificate);
      }
      matchSubjectAltNames_.WriteTo(ref output, _repeated_matchSubjectAltNames_codec);
      if (TrustChainVerification != global::Envoy.Api.V2.Auth.CertificateValidationContext.Types.TrustChainVerification.VerifyTrustChain) {
        output.WriteRawTag(80);
        output.WriteEnum((int) TrustChainVerification);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (trustedCa_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrustedCa);
      }
      size += verifyCertificateSpki_.CalculateSize(_repeated_verifyCertificateSpki_codec);
      size += verifyCertificateHash_.CalculateSize(_repeated_verifyCertificateHash_codec);
      size += verifySubjectAltName_.CalculateSize(_repeated_verifySubjectAltName_codec);
      size += matchSubjectAltNames_.CalculateSize(_repeated_matchSubjectAltNames_codec);
      if (requireOcspStaple_ != null) {
        size += _single_requireOcspStaple_codec.CalculateSizeWithTag(RequireOcspStaple);
      }
      if (requireSignedCertificateTimestamp_ != null) {
        size += _single_requireSignedCertificateTimestamp_codec.CalculateSizeWithTag(RequireSignedCertificateTimestamp);
      }
      if (crl_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Crl);
      }
      if (AllowExpiredCertificate != false) {
        size += 1 + 1;
      }
      if (TrustChainVerification != global::Envoy.Api.V2.Auth.CertificateValidationContext.Types.TrustChainVerification.VerifyTrustChain) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TrustChainVerification);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CertificateValidationContext other) {
      if (other == null) {
        return;
      }
      if (other.trustedCa_ != null) {
        if (trustedCa_ == null) {
          TrustedCa = new global::Envoy.Api.V2.Core.DataSource();
        }
        TrustedCa.MergeFrom(other.TrustedCa);
      }
      verifyCertificateSpki_.Add(other.verifyCertificateSpki_);
      verifyCertificateHash_.Add(other.verifyCertificateHash_);
      verifySubjectAltName_.Add(other.verifySubjectAltName_);
      matchSubjectAltNames_.Add(other.matchSubjectAltNames_);
      if (other.requireOcspStaple_ != null) {
        if (requireOcspStaple_ == null || other.RequireOcspStaple != false) {
          RequireOcspStaple = other.RequireOcspStaple;
        }
      }
      if (other.requireSignedCertificateTimestamp_ != null) {
        if (requireSignedCertificateTimestamp_ == null || other.RequireSignedCertificateTimestamp != false) {
          RequireSignedCertificateTimestamp = other.RequireSignedCertificateTimestamp;
        }
      }
      if (other.crl_ != null) {
        if (crl_ == null) {
          Crl = new global::Envoy.Api.V2.Core.DataSource();
        }
        Crl.MergeFrom(other.Crl);
      }
      if (other.AllowExpiredCertificate != false) {
        AllowExpiredCertificate = other.AllowExpiredCertificate;
      }
      if (other.TrustChainVerification != global::Envoy.Api.V2.Auth.CertificateValidationContext.Types.TrustChainVerification.VerifyTrustChain) {
        TrustChainVerification = other.TrustChainVerification;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (trustedCa_ == null) {
              TrustedCa = new global::Envoy.Api.V2.Core.DataSource();
            }
            input.ReadMessage(TrustedCa);
            break;
          }
          case 18: {
            verifyCertificateHash_.AddEntriesFrom(input, _repeated_verifyCertificateHash_codec);
            break;
          }
          case 26: {
            verifyCertificateSpki_.AddEntriesFrom(input, _repeated_verifyCertificateSpki_codec);
            break;
          }
          case 34: {
            verifySubjectAltName_.AddEntriesFrom(input, _repeated_verifySubjectAltName_codec);
            break;
          }
          case 42: {
            bool? value = _single_requireOcspStaple_codec.Read(input);
            if (requireOcspStaple_ == null || value != false) {
              RequireOcspStaple = value;
            }
            break;
          }
          case 50: {
            bool? value = _single_requireSignedCertificateTimestamp_codec.Read(input);
            if (requireSignedCertificateTimestamp_ == null || value != false) {
              RequireSignedCertificateTimestamp = value;
            }
            break;
          }
          case 58: {
            if (crl_ == null) {
              Crl = new global::Envoy.Api.V2.Core.DataSource();
            }
            input.ReadMessage(Crl);
            break;
          }
          case 64: {
            AllowExpiredCertificate = input.ReadBool();
            break;
          }
          case 74: {
            matchSubjectAltNames_.AddEntriesFrom(input, _repeated_matchSubjectAltNames_codec);
            break;
          }
          case 80: {
            TrustChainVerification = (global::Envoy.Api.V2.Auth.CertificateValidationContext.Types.TrustChainVerification) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (trustedCa_ == null) {
              TrustedCa = new global::Envoy.Api.V2.Core.DataSource();
            }
            input.ReadMessage(TrustedCa);
            break;
          }
          case 18: {
            verifyCertificateHash_.AddEntriesFrom(ref input, _repeated_verifyCertificateHash_codec);
            break;
          }
          case 26: {
            verifyCertificateSpki_.AddEntriesFrom(ref input, _repeated_verifyCertificateSpki_codec);
            break;
          }
          case 34: {
            verifySubjectAltName_.AddEntriesFrom(ref input, _repeated_verifySubjectAltName_codec);
            break;
          }
          case 42: {
            bool? value = _single_requireOcspStaple_codec.Read(ref input);
            if (requireOcspStaple_ == null || value != false) {
              RequireOcspStaple = value;
            }
            break;
          }
          case 50: {
            bool? value = _single_requireSignedCertificateTimestamp_codec.Read(ref input);
            if (requireSignedCertificateTimestamp_ == null || value != false) {
              RequireSignedCertificateTimestamp = value;
            }
            break;
          }
          case 58: {
            if (crl_ == null) {
              Crl = new global::Envoy.Api.V2.Core.DataSource();
            }
            input.ReadMessage(Crl);
            break;
          }
          case 64: {
            AllowExpiredCertificate = input.ReadBool();
            break;
          }
          case 74: {
            matchSubjectAltNames_.AddEntriesFrom(ref input, _repeated_matchSubjectAltNames_codec);
            break;
          }
          case 80: {
            TrustChainVerification = (global::Envoy.Api.V2.Auth.CertificateValidationContext.Types.TrustChainVerification) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CertificateValidationContext message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      /// Peer certificate verification mode.
      /// </summary>
      public enum TrustChainVerification {
        /// <summary>
        /// Perform default certificate verification (e.g., against CA / verification lists)
        /// </summary>
        [pbr::OriginalName("VERIFY_TRUST_CHAIN")] VerifyTrustChain = 0,
        /// <summary>
        /// Connections where the certificate fails verification will be permitted.
        /// For HTTP connections, the result of certificate verification can be used in route matching. (
        /// see :ref:`validated &lt;envoy_api_field_route.RouteMatch.TlsContextMatchOptions.validated>` ).
        /// </summary>
        [pbr::OriginalName("ACCEPT_UNTRUSTED")] AcceptUntrusted = 1,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
