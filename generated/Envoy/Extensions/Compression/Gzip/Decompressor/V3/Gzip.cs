// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/extensions/compression/gzip/decompressor/v3/gzip.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Extensions.Compression.Gzip.Decompressor.V3 {

  /// <summary>Holder for reflection information generated from envoy/extensions/compression/gzip/decompressor/v3/gzip.proto</summary>
  public static partial class GzipReflection {

    #region Descriptor
    /// <summary>File descriptor for envoy/extensions/compression/gzip/decompressor/v3/gzip.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GzipReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjxlbnZveS9leHRlbnNpb25zL2NvbXByZXNzaW9uL2d6aXAvZGVjb21wcmVz",
            "c29yL3YzL2d6aXAucHJvdG8SMWVudm95LmV4dGVuc2lvbnMuY29tcHJlc3Np",
            "b24uZ3ppcC5kZWNvbXByZXNzb3IudjMaHmdvb2dsZS9wcm90b2J1Zi93cmFw",
            "cGVycy5wcm90bxoddWRwYS9hbm5vdGF0aW9ucy9zdGF0dXMucHJvdG8aF3Zh",
            "bGlkYXRlL3ZhbGlkYXRlLnByb3RvIoQBCgRHemlwEjwKC3dpbmRvd19iaXRz",
            "GAEgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlVJbnQzMlZhbHVlQgn6QgYqBBgP",
            "KAkSPgoKY2h1bmtfc2l6ZRgCIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5VSW50",
            "MzJWYWx1ZUIM+kIJKgcYgIAEKIAgQlYKP2lvLmVudm95cHJveHkuZW52b3ku",
            "ZXh0ZW5zaW9ucy5jb21wcmVzc2lvbi5nemlwLmRlY29tcHJlc3Nvci52M0IJ",
            "R3ppcFByb3RvUAG6gMjRBgIQAmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Udpa.Annotations.StatusReflection.Descriptor, global::Validate.ValidateReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Extensions.Compression.Gzip.Decompressor.V3.Gzip), global::Envoy.Extensions.Compression.Gzip.Decompressor.V3.Gzip.Parser, new[]{ "WindowBits", "ChunkSize" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Gzip : pb::IMessage<Gzip>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Gzip> _parser = new pb::MessageParser<Gzip>(() => new Gzip());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Gzip> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Extensions.Compression.Gzip.Decompressor.V3.GzipReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Gzip() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Gzip(Gzip other) : this() {
      WindowBits = other.WindowBits;
      ChunkSize = other.ChunkSize;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Gzip Clone() {
      return new Gzip(this);
    }

    /// <summary>Field number for the "window_bits" field.</summary>
    public const int WindowBitsFieldNumber = 1;
    private static readonly pb::FieldCodec<uint?> _single_windowBits_codec = pb::FieldCodec.ForStructWrapper<uint>(10);
    private uint? windowBits_;
    /// <summary>
    /// Value from 9 to 15 that represents the base two logarithmic of the decompressor's window size.
    /// The decompression window size needs to be equal or larger than the compression window size.
    /// The default window size is 15.
    /// This is so that the decompressor can decompress a response compressed by a compressor with any compression window size.
    /// For more details about this parameter, please refer to `zlib manual &lt;https://www.zlib.net/manual.html>`_ > inflateInit2.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint? WindowBits {
      get { return windowBits_; }
      set {
        windowBits_ = value;
      }
    }


    /// <summary>Field number for the "chunk_size" field.</summary>
    public const int ChunkSizeFieldNumber = 2;
    private static readonly pb::FieldCodec<uint?> _single_chunkSize_codec = pb::FieldCodec.ForStructWrapper<uint>(18);
    private uint? chunkSize_;
    /// <summary>
    /// Value for zlib's decompressor output buffer. If not set, defaults to 4096.
    /// See https://www.zlib.net/manual.html for more details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint? ChunkSize {
      get { return chunkSize_; }
      set {
        chunkSize_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Gzip);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Gzip other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WindowBits != other.WindowBits) return false;
      if (ChunkSize != other.ChunkSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (windowBits_ != null) hash ^= WindowBits.GetHashCode();
      if (chunkSize_ != null) hash ^= ChunkSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (windowBits_ != null) {
        _single_windowBits_codec.WriteTagAndValue(output, WindowBits);
      }
      if (chunkSize_ != null) {
        _single_chunkSize_codec.WriteTagAndValue(output, ChunkSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (windowBits_ != null) {
        _single_windowBits_codec.WriteTagAndValue(ref output, WindowBits);
      }
      if (chunkSize_ != null) {
        _single_chunkSize_codec.WriteTagAndValue(ref output, ChunkSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (windowBits_ != null) {
        size += _single_windowBits_codec.CalculateSizeWithTag(WindowBits);
      }
      if (chunkSize_ != null) {
        size += _single_chunkSize_codec.CalculateSizeWithTag(ChunkSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Gzip other) {
      if (other == null) {
        return;
      }
      if (other.windowBits_ != null) {
        if (windowBits_ == null || other.WindowBits != 0) {
          WindowBits = other.WindowBits;
        }
      }
      if (other.chunkSize_ != null) {
        if (chunkSize_ == null || other.ChunkSize != 0) {
          ChunkSize = other.ChunkSize;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            uint? value = _single_windowBits_codec.Read(input);
            if (windowBits_ == null || value != 0) {
              WindowBits = value;
            }
            break;
          }
          case 18: {
            uint? value = _single_chunkSize_codec.Read(input);
            if (chunkSize_ == null || value != 0) {
              ChunkSize = value;
            }
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            uint? value = _single_windowBits_codec.Read(ref input);
            if (windowBits_ == null || value != 0) {
              WindowBits = value;
            }
            break;
          }
          case 18: {
            uint? value = _single_chunkSize_codec.Read(ref input);
            if (chunkSize_ == null || value != 0) {
              ChunkSize = value;
            }
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
