// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/extensions/filters/http/ip_tagging/v3/ip_tagging.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Extensions.Filters.Http.IpTagging.V3 {

  /// <summary>Holder for reflection information generated from envoy/extensions/filters/http/ip_tagging/v3/ip_tagging.proto</summary>
  public static partial class IpTaggingReflection {

    #region Descriptor
    /// <summary>File descriptor for envoy/extensions/filters/http/ip_tagging/v3/ip_tagging.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static IpTaggingReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjxlbnZveS9leHRlbnNpb25zL2ZpbHRlcnMvaHR0cC9pcF90YWdnaW5nL3Yz",
            "L2lwX3RhZ2dpbmcucHJvdG8SK2Vudm95LmV4dGVuc2lvbnMuZmlsdGVycy5o",
            "dHRwLmlwX3RhZ2dpbmcudjMaImVudm95L2NvbmZpZy9jb3JlL3YzL2FkZHJl",
            "c3MucHJvdG8aHXVkcGEvYW5ub3RhdGlvbnMvc3RhdHVzLnByb3RvGiF1ZHBh",
            "L2Fubm90YXRpb25zL3ZlcnNpb25pbmcucHJvdG8aF3ZhbGlkYXRlL3ZhbGlk",
            "YXRlLnByb3RvIsYDCglJUFRhZ2dpbmcSYgoMcmVxdWVzdF90eXBlGAEgASgO",
            "MkIuZW52b3kuZXh0ZW5zaW9ucy5maWx0ZXJzLmh0dHAuaXBfdGFnZ2luZy52",
            "My5JUFRhZ2dpbmcuUmVxdWVzdFR5cGVCCPpCBYIBAhABElcKB2lwX3RhZ3MY",
            "BCADKAsyPC5lbnZveS5leHRlbnNpb25zLmZpbHRlcnMuaHR0cC5pcF90YWdn",
            "aW5nLnYzLklQVGFnZ2luZy5JUFRhZ0II+kIFkgECCAEajQEKBUlQVGFnEhMK",
            "C2lwX3RhZ19uYW1lGAEgASgJEjAKB2lwX2xpc3QYAiADKAsyHy5lbnZveS5j",
            "b25maWcuY29yZS52My5DaWRyUmFuZ2U6PZrFiB44CjZlbnZveS5jb25maWcu",
            "ZmlsdGVyLmh0dHAuaXBfdGFnZ2luZy52Mi5JUFRhZ2dpbmcuSVBUYWciMwoL",
            "UmVxdWVzdFR5cGUSCAoEQk9USBAAEgwKCElOVEVSTkFMEAESDAoIRVhURVJO",
            "QUwQAjo3msWIHjIKMGVudm95LmNvbmZpZy5maWx0ZXIuaHR0cC5pcF90YWdn",
            "aW5nLnYyLklQVGFnZ2luZ0JVCjlpby5lbnZveXByb3h5LmVudm95LmV4dGVu",
            "c2lvbnMuZmlsdGVycy5odHRwLmlwX3RhZ2dpbmcudjNCDklwVGFnZ2luZ1By",
            "b3RvUAG6gMjRBgIQAmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Envoy.Config.Core.V3.AddressReflection.Descriptor, global::Udpa.Annotations.StatusReflection.Descriptor, global::Udpa.Annotations.VersioningReflection.Descriptor, global::Validate.ValidateReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Extensions.Filters.Http.IpTagging.V3.IPTagging), global::Envoy.Extensions.Filters.Http.IpTagging.V3.IPTagging.Parser, new[]{ "RequestType", "IpTags" }, null, new[]{ typeof(global::Envoy.Extensions.Filters.Http.IpTagging.V3.IPTagging.Types.RequestType) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Extensions.Filters.Http.IpTagging.V3.IPTagging.Types.IPTag), global::Envoy.Extensions.Filters.Http.IpTagging.V3.IPTagging.Types.IPTag.Parser, new[]{ "IpTagName", "IpList" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class IPTagging : pb::IMessage<IPTagging>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<IPTagging> _parser = new pb::MessageParser<IPTagging>(() => new IPTagging());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<IPTagging> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Extensions.Filters.Http.IpTagging.V3.IpTaggingReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public IPTagging() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public IPTagging(IPTagging other) : this() {
      requestType_ = other.requestType_;
      ipTags_ = other.ipTags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public IPTagging Clone() {
      return new IPTagging(this);
    }

    /// <summary>Field number for the "request_type" field.</summary>
    public const int RequestTypeFieldNumber = 1;
    private global::Envoy.Extensions.Filters.Http.IpTagging.V3.IPTagging.Types.RequestType requestType_ = global::Envoy.Extensions.Filters.Http.IpTagging.V3.IPTagging.Types.RequestType.Both;
    /// <summary>
    /// The type of request the filter should apply to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Extensions.Filters.Http.IpTagging.V3.IPTagging.Types.RequestType RequestType {
      get { return requestType_; }
      set {
        requestType_ = value;
      }
    }

    /// <summary>Field number for the "ip_tags" field.</summary>
    public const int IpTagsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Envoy.Extensions.Filters.Http.IpTagging.V3.IPTagging.Types.IPTag> _repeated_ipTags_codec
        = pb::FieldCodec.ForMessage(34, global::Envoy.Extensions.Filters.Http.IpTagging.V3.IPTagging.Types.IPTag.Parser);
    private readonly pbc::RepeatedField<global::Envoy.Extensions.Filters.Http.IpTagging.V3.IPTagging.Types.IPTag> ipTags_ = new pbc::RepeatedField<global::Envoy.Extensions.Filters.Http.IpTagging.V3.IPTagging.Types.IPTag>();
    /// <summary>
    /// [#comment:TODO(ccaraman): Extend functionality to load IP tags from file system.
    /// Tracked by issue https://github.com/envoyproxy/envoy/issues/2695]
    /// The set of IP tags for the filter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Envoy.Extensions.Filters.Http.IpTagging.V3.IPTagging.Types.IPTag> IpTags {
      get { return ipTags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as IPTagging);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(IPTagging other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestType != other.RequestType) return false;
      if(!ipTags_.Equals(other.ipTags_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestType != global::Envoy.Extensions.Filters.Http.IpTagging.V3.IPTagging.Types.RequestType.Both) hash ^= RequestType.GetHashCode();
      hash ^= ipTags_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RequestType != global::Envoy.Extensions.Filters.Http.IpTagging.V3.IPTagging.Types.RequestType.Both) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RequestType);
      }
      ipTags_.WriteTo(output, _repeated_ipTags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RequestType != global::Envoy.Extensions.Filters.Http.IpTagging.V3.IPTagging.Types.RequestType.Both) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RequestType);
      }
      ipTags_.WriteTo(ref output, _repeated_ipTags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (RequestType != global::Envoy.Extensions.Filters.Http.IpTagging.V3.IPTagging.Types.RequestType.Both) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RequestType);
      }
      size += ipTags_.CalculateSize(_repeated_ipTags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(IPTagging other) {
      if (other == null) {
        return;
      }
      if (other.RequestType != global::Envoy.Extensions.Filters.Http.IpTagging.V3.IPTagging.Types.RequestType.Both) {
        RequestType = other.RequestType;
      }
      ipTags_.Add(other.ipTags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestType = (global::Envoy.Extensions.Filters.Http.IpTagging.V3.IPTagging.Types.RequestType) input.ReadEnum();
            break;
          }
          case 34: {
            ipTags_.AddEntriesFrom(input, _repeated_ipTags_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RequestType = (global::Envoy.Extensions.Filters.Http.IpTagging.V3.IPTagging.Types.RequestType) input.ReadEnum();
            break;
          }
          case 34: {
            ipTags_.AddEntriesFrom(ref input, _repeated_ipTags_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the IPTagging message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      /// The type of requests the filter should apply to. The supported types
      /// are internal, external or both. The
      /// :ref:`x-forwarded-for&lt;config_http_conn_man_headers_x-forwarded-for_internal_origin>` header is
      /// used to determine if a request is internal and will result in
      /// :ref:`x-envoy-internal&lt;config_http_conn_man_headers_x-envoy-internal>`
      /// being set. The filter defaults to both, and it will apply to all request types.
      /// </summary>
      public enum RequestType {
        /// <summary>
        /// Both external and internal requests will be tagged. This is the default value.
        /// </summary>
        [pbr::OriginalName("BOTH")] Both = 0,
        /// <summary>
        /// Only internal requests will be tagged.
        /// </summary>
        [pbr::OriginalName("INTERNAL")] Internal = 1,
        /// <summary>
        /// Only external requests will be tagged.
        /// </summary>
        [pbr::OriginalName("EXTERNAL")] External = 2,
      }

      /// <summary>
      /// Supplies the IP tag name and the IP address subnets.
      /// </summary>
      public sealed partial class IPTag : pb::IMessage<IPTag>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<IPTag> _parser = new pb::MessageParser<IPTag>(() => new IPTag());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<IPTag> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Envoy.Extensions.Filters.Http.IpTagging.V3.IPTagging.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public IPTag() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public IPTag(IPTag other) : this() {
          ipTagName_ = other.ipTagName_;
          ipList_ = other.ipList_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public IPTag Clone() {
          return new IPTag(this);
        }

        /// <summary>Field number for the "ip_tag_name" field.</summary>
        public const int IpTagNameFieldNumber = 1;
        private string ipTagName_ = "";
        /// <summary>
        /// Specifies the IP tag name to apply.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string IpTagName {
          get { return ipTagName_; }
          set {
            ipTagName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "ip_list" field.</summary>
        public const int IpListFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Envoy.Config.Core.V3.CidrRange> _repeated_ipList_codec
            = pb::FieldCodec.ForMessage(18, global::Envoy.Config.Core.V3.CidrRange.Parser);
        private readonly pbc::RepeatedField<global::Envoy.Config.Core.V3.CidrRange> ipList_ = new pbc::RepeatedField<global::Envoy.Config.Core.V3.CidrRange>();
        /// <summary>
        /// A list of IP address subnets that will be tagged with
        /// ip_tag_name. Both IPv4 and IPv6 are supported.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<global::Envoy.Config.Core.V3.CidrRange> IpList {
          get { return ipList_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as IPTag);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(IPTag other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (IpTagName != other.IpTagName) return false;
          if(!ipList_.Equals(other.ipList_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (IpTagName.Length != 0) hash ^= IpTagName.GetHashCode();
          hash ^= ipList_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (IpTagName.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(IpTagName);
          }
          ipList_.WriteTo(output, _repeated_ipList_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (IpTagName.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(IpTagName);
          }
          ipList_.WriteTo(ref output, _repeated_ipList_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (IpTagName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(IpTagName);
          }
          size += ipList_.CalculateSize(_repeated_ipList_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(IPTag other) {
          if (other == null) {
            return;
          }
          if (other.IpTagName.Length != 0) {
            IpTagName = other.IpTagName;
          }
          ipList_.Add(other.ipList_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                IpTagName = input.ReadString();
                break;
              }
              case 18: {
                ipList_.AddEntriesFrom(input, _repeated_ipList_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                IpTagName = input.ReadString();
                break;
              }
              case 18: {
                ipList_.AddEntriesFrom(ref input, _repeated_ipList_codec);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
