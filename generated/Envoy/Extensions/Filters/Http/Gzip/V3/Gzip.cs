// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/extensions/filters/http/gzip/v3/gzip.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Extensions.Filters.Http.Gzip.V3 {

  /// <summary>Holder for reflection information generated from envoy/extensions/filters/http/gzip/v3/gzip.proto</summary>
  public static partial class GzipReflection {

    #region Descriptor
    /// <summary>File descriptor for envoy/extensions/filters/http/gzip/v3/gzip.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GzipReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjBlbnZveS9leHRlbnNpb25zL2ZpbHRlcnMvaHR0cC9nemlwL3YzL2d6aXAu",
            "cHJvdG8SJWVudm95LmV4dGVuc2lvbnMuZmlsdGVycy5odHRwLmd6aXAudjMa",
            "PGVudm95L2V4dGVuc2lvbnMvZmlsdGVycy9odHRwL2NvbXByZXNzb3IvdjMv",
            "Y29tcHJlc3Nvci5wcm90bxoeZ29vZ2xlL3Byb3RvYnVmL3dyYXBwZXJzLnBy",
            "b3RvGh11ZHBhL2Fubm90YXRpb25zL3N0YXR1cy5wcm90bxohdWRwYS9hbm5v",
            "dGF0aW9ucy92ZXJzaW9uaW5nLnByb3RvGhd2YWxpZGF0ZS92YWxpZGF0ZS5w",
            "cm90byLBBgoER3ppcBI9CgxtZW1vcnlfbGV2ZWwYASABKAsyHC5nb29nbGUu",
            "cHJvdG9idWYuVUludDMyVmFsdWVCCfpCBioEGAkoARJmChFjb21wcmVzc2lv",
            "bl9sZXZlbBgDIAEoDjJBLmVudm95LmV4dGVuc2lvbnMuZmlsdGVycy5odHRw",
            "Lmd6aXAudjMuR3ppcC5Db21wcmVzc2lvbkxldmVsLkVudW1CCPpCBYIBAhAB",
            "EmcKFGNvbXByZXNzaW9uX3N0cmF0ZWd5GAQgASgOMj8uZW52b3kuZXh0ZW5z",
            "aW9ucy5maWx0ZXJzLmh0dHAuZ3ppcC52My5HemlwLkNvbXByZXNzaW9uU3Ry",
            "YXRlZ3lCCPpCBYIBAhABEjwKC3dpbmRvd19iaXRzGAkgASgLMhwuZ29vZ2xl",
            "LnByb3RvYnVmLlVJbnQzMlZhbHVlQgn6QgYqBBgPKAkSSwoKY29tcHJlc3Nv",
            "chgKIAEoCzI3LmVudm95LmV4dGVuc2lvbnMuZmlsdGVycy5odHRwLmNvbXBy",
            "ZXNzb3IudjMuQ29tcHJlc3NvchI+CgpjaHVua19zaXplGAsgASgLMhwuZ29v",
            "Z2xlLnByb3RvYnVmLlVJbnQzMlZhbHVlQgz6QgkqBxiAgAQogCAaewoQQ29t",
            "cHJlc3Npb25MZXZlbCIoCgRFbnVtEgsKB0RFRkFVTFQQABIICgRCRVNUEAES",
            "CQoFU1BFRUQQAjo9msWIHjgKNmVudm95LmNvbmZpZy5maWx0ZXIuaHR0cC5n",
            "emlwLnYyLkd6aXAuQ29tcHJlc3Npb25MZXZlbCJGChNDb21wcmVzc2lvblN0",
            "cmF0ZWd5EgsKB0RFRkFVTFQQABIMCghGSUxURVJFRBABEgsKB0hVRkZNQU4Q",
            "AhIHCgNSTEUQAzosmsWIHicKJWVudm95LmNvbmZpZy5maWx0ZXIuaHR0cC5n",
            "emlwLnYyLkd6aXBKBAgCEANKBAgGEAdKBAgHEAhKBAgIEAlSDmNvbnRlbnRf",
            "bGVuZ3RoUgxjb250ZW50X3R5cGVSFmRpc2FibGVfb25fZXRhZ19oZWFkZXJS",
            "HXJlbW92ZV9hY2NlcHRfZW5jb2RpbmdfaGVhZGVyQkoKM2lvLmVudm95cHJv",
            "eHkuZW52b3kuZXh0ZW5zaW9ucy5maWx0ZXJzLmh0dHAuZ3ppcC52M0IJR3pp",
            "cFByb3RvUAG6gMjRBgIQAmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Envoy.Extensions.Filters.Http.Compressor.V3.CompressorReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Udpa.Annotations.StatusReflection.Descriptor, global::Udpa.Annotations.VersioningReflection.Descriptor, global::Validate.ValidateReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Extensions.Filters.Http.Gzip.V3.Gzip), global::Envoy.Extensions.Filters.Http.Gzip.V3.Gzip.Parser, new[]{ "MemoryLevel", "CompressionLevel", "CompressionStrategy", "WindowBits", "Compressor", "ChunkSize" }, null, new[]{ typeof(global::Envoy.Extensions.Filters.Http.Gzip.V3.Gzip.Types.CompressionStrategy) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Extensions.Filters.Http.Gzip.V3.Gzip.Types.CompressionLevel), global::Envoy.Extensions.Filters.Http.Gzip.V3.Gzip.Types.CompressionLevel.Parser, null, null, new[]{ typeof(global::Envoy.Extensions.Filters.Http.Gzip.V3.Gzip.Types.CompressionLevel.Types.Enum) }, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// [#next-free-field: 12]
  /// </summary>
  public sealed partial class Gzip : pb::IMessage<Gzip>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Gzip> _parser = new pb::MessageParser<Gzip>(() => new Gzip());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Gzip> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Extensions.Filters.Http.Gzip.V3.GzipReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Gzip() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Gzip(Gzip other) : this() {
      MemoryLevel = other.MemoryLevel;
      compressionLevel_ = other.compressionLevel_;
      compressionStrategy_ = other.compressionStrategy_;
      WindowBits = other.WindowBits;
      compressor_ = other.compressor_ != null ? other.compressor_.Clone() : null;
      ChunkSize = other.ChunkSize;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Gzip Clone() {
      return new Gzip(this);
    }

    /// <summary>Field number for the "memory_level" field.</summary>
    public const int MemoryLevelFieldNumber = 1;
    private static readonly pb::FieldCodec<uint?> _single_memoryLevel_codec = pb::FieldCodec.ForStructWrapper<uint>(10);
    private uint? memoryLevel_;
    /// <summary>
    /// Value from 1 to 9 that controls the amount of internal memory used by zlib. Higher values
    /// use more memory, but are faster and produce better compression results. The default value is 5.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint? MemoryLevel {
      get { return memoryLevel_; }
      set {
        memoryLevel_ = value;
      }
    }


    /// <summary>Field number for the "compression_level" field.</summary>
    public const int CompressionLevelFieldNumber = 3;
    private global::Envoy.Extensions.Filters.Http.Gzip.V3.Gzip.Types.CompressionLevel.Types.Enum compressionLevel_ = global::Envoy.Extensions.Filters.Http.Gzip.V3.Gzip.Types.CompressionLevel.Types.Enum.Default;
    /// <summary>
    /// A value used for selecting the zlib compression level. This setting will affect speed and
    /// amount of compression applied to the content. "BEST" provides higher compression at the cost of
    /// higher latency, "SPEED" provides lower compression with minimum impact on response time.
    /// "DEFAULT" provides an optimal result between speed and compression. This field will be set to
    /// "DEFAULT" if not specified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Extensions.Filters.Http.Gzip.V3.Gzip.Types.CompressionLevel.Types.Enum CompressionLevel {
      get { return compressionLevel_; }
      set {
        compressionLevel_ = value;
      }
    }

    /// <summary>Field number for the "compression_strategy" field.</summary>
    public const int CompressionStrategyFieldNumber = 4;
    private global::Envoy.Extensions.Filters.Http.Gzip.V3.Gzip.Types.CompressionStrategy compressionStrategy_ = global::Envoy.Extensions.Filters.Http.Gzip.V3.Gzip.Types.CompressionStrategy.Default;
    /// <summary>
    /// A value used for selecting the zlib compression strategy which is directly related to the
    /// characteristics of the content. Most of the time "DEFAULT" will be the best choice, though
    /// there are situations which changing this parameter might produce better results. For example,
    /// run-length encoding (RLE) is typically used when the content is known for having sequences
    /// which same data occurs many consecutive times. For more information about each strategy, please
    /// refer to zlib manual.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Extensions.Filters.Http.Gzip.V3.Gzip.Types.CompressionStrategy CompressionStrategy {
      get { return compressionStrategy_; }
      set {
        compressionStrategy_ = value;
      }
    }

    /// <summary>Field number for the "window_bits" field.</summary>
    public const int WindowBitsFieldNumber = 9;
    private static readonly pb::FieldCodec<uint?> _single_windowBits_codec = pb::FieldCodec.ForStructWrapper<uint>(74);
    private uint? windowBits_;
    /// <summary>
    /// Value from 9 to 15 that represents the base two logarithmic of the compressor's window size.
    /// Larger window results in better compression at the expense of memory usage. The default is 12
    /// which will produce a 4096 bytes window. For more details about this parameter, please refer to
    /// zlib manual > deflateInit2.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint? WindowBits {
      get { return windowBits_; }
      set {
        windowBits_ = value;
      }
    }


    /// <summary>Field number for the "compressor" field.</summary>
    public const int CompressorFieldNumber = 10;
    private global::Envoy.Extensions.Filters.Http.Compressor.V3.Compressor compressor_;
    /// <summary>
    /// Set of configuration parameters common for all compression filters. You can define
    /// `content_length`, `content_type` and other parameters in this field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Extensions.Filters.Http.Compressor.V3.Compressor Compressor {
      get { return compressor_; }
      set {
        compressor_ = value;
      }
    }

    /// <summary>Field number for the "chunk_size" field.</summary>
    public const int ChunkSizeFieldNumber = 11;
    private static readonly pb::FieldCodec<uint?> _single_chunkSize_codec = pb::FieldCodec.ForStructWrapper<uint>(90);
    private uint? chunkSize_;
    /// <summary>
    /// Value for Zlib's next output buffer. If not set, defaults to 4096.
    /// See https://www.zlib.net/manual.html for more details. Also see
    /// https://github.com/envoyproxy/envoy/issues/8448 for context on this filter's performance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint? ChunkSize {
      get { return chunkSize_; }
      set {
        chunkSize_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Gzip);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Gzip other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MemoryLevel != other.MemoryLevel) return false;
      if (CompressionLevel != other.CompressionLevel) return false;
      if (CompressionStrategy != other.CompressionStrategy) return false;
      if (WindowBits != other.WindowBits) return false;
      if (!object.Equals(Compressor, other.Compressor)) return false;
      if (ChunkSize != other.ChunkSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (memoryLevel_ != null) hash ^= MemoryLevel.GetHashCode();
      if (CompressionLevel != global::Envoy.Extensions.Filters.Http.Gzip.V3.Gzip.Types.CompressionLevel.Types.Enum.Default) hash ^= CompressionLevel.GetHashCode();
      if (CompressionStrategy != global::Envoy.Extensions.Filters.Http.Gzip.V3.Gzip.Types.CompressionStrategy.Default) hash ^= CompressionStrategy.GetHashCode();
      if (windowBits_ != null) hash ^= WindowBits.GetHashCode();
      if (compressor_ != null) hash ^= Compressor.GetHashCode();
      if (chunkSize_ != null) hash ^= ChunkSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (memoryLevel_ != null) {
        _single_memoryLevel_codec.WriteTagAndValue(output, MemoryLevel);
      }
      if (CompressionLevel != global::Envoy.Extensions.Filters.Http.Gzip.V3.Gzip.Types.CompressionLevel.Types.Enum.Default) {
        output.WriteRawTag(24);
        output.WriteEnum((int) CompressionLevel);
      }
      if (CompressionStrategy != global::Envoy.Extensions.Filters.Http.Gzip.V3.Gzip.Types.CompressionStrategy.Default) {
        output.WriteRawTag(32);
        output.WriteEnum((int) CompressionStrategy);
      }
      if (windowBits_ != null) {
        _single_windowBits_codec.WriteTagAndValue(output, WindowBits);
      }
      if (compressor_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Compressor);
      }
      if (chunkSize_ != null) {
        _single_chunkSize_codec.WriteTagAndValue(output, ChunkSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (memoryLevel_ != null) {
        _single_memoryLevel_codec.WriteTagAndValue(ref output, MemoryLevel);
      }
      if (CompressionLevel != global::Envoy.Extensions.Filters.Http.Gzip.V3.Gzip.Types.CompressionLevel.Types.Enum.Default) {
        output.WriteRawTag(24);
        output.WriteEnum((int) CompressionLevel);
      }
      if (CompressionStrategy != global::Envoy.Extensions.Filters.Http.Gzip.V3.Gzip.Types.CompressionStrategy.Default) {
        output.WriteRawTag(32);
        output.WriteEnum((int) CompressionStrategy);
      }
      if (windowBits_ != null) {
        _single_windowBits_codec.WriteTagAndValue(ref output, WindowBits);
      }
      if (compressor_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Compressor);
      }
      if (chunkSize_ != null) {
        _single_chunkSize_codec.WriteTagAndValue(ref output, ChunkSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (memoryLevel_ != null) {
        size += _single_memoryLevel_codec.CalculateSizeWithTag(MemoryLevel);
      }
      if (CompressionLevel != global::Envoy.Extensions.Filters.Http.Gzip.V3.Gzip.Types.CompressionLevel.Types.Enum.Default) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CompressionLevel);
      }
      if (CompressionStrategy != global::Envoy.Extensions.Filters.Http.Gzip.V3.Gzip.Types.CompressionStrategy.Default) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CompressionStrategy);
      }
      if (windowBits_ != null) {
        size += _single_windowBits_codec.CalculateSizeWithTag(WindowBits);
      }
      if (compressor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Compressor);
      }
      if (chunkSize_ != null) {
        size += _single_chunkSize_codec.CalculateSizeWithTag(ChunkSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Gzip other) {
      if (other == null) {
        return;
      }
      if (other.memoryLevel_ != null) {
        if (memoryLevel_ == null || other.MemoryLevel != 0) {
          MemoryLevel = other.MemoryLevel;
        }
      }
      if (other.CompressionLevel != global::Envoy.Extensions.Filters.Http.Gzip.V3.Gzip.Types.CompressionLevel.Types.Enum.Default) {
        CompressionLevel = other.CompressionLevel;
      }
      if (other.CompressionStrategy != global::Envoy.Extensions.Filters.Http.Gzip.V3.Gzip.Types.CompressionStrategy.Default) {
        CompressionStrategy = other.CompressionStrategy;
      }
      if (other.windowBits_ != null) {
        if (windowBits_ == null || other.WindowBits != 0) {
          WindowBits = other.WindowBits;
        }
      }
      if (other.compressor_ != null) {
        if (compressor_ == null) {
          Compressor = new global::Envoy.Extensions.Filters.Http.Compressor.V3.Compressor();
        }
        Compressor.MergeFrom(other.Compressor);
      }
      if (other.chunkSize_ != null) {
        if (chunkSize_ == null || other.ChunkSize != 0) {
          ChunkSize = other.ChunkSize;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            uint? value = _single_memoryLevel_codec.Read(input);
            if (memoryLevel_ == null || value != 0) {
              MemoryLevel = value;
            }
            break;
          }
          case 24: {
            CompressionLevel = (global::Envoy.Extensions.Filters.Http.Gzip.V3.Gzip.Types.CompressionLevel.Types.Enum) input.ReadEnum();
            break;
          }
          case 32: {
            CompressionStrategy = (global::Envoy.Extensions.Filters.Http.Gzip.V3.Gzip.Types.CompressionStrategy) input.ReadEnum();
            break;
          }
          case 74: {
            uint? value = _single_windowBits_codec.Read(input);
            if (windowBits_ == null || value != 0) {
              WindowBits = value;
            }
            break;
          }
          case 82: {
            if (compressor_ == null) {
              Compressor = new global::Envoy.Extensions.Filters.Http.Compressor.V3.Compressor();
            }
            input.ReadMessage(Compressor);
            break;
          }
          case 90: {
            uint? value = _single_chunkSize_codec.Read(input);
            if (chunkSize_ == null || value != 0) {
              ChunkSize = value;
            }
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            uint? value = _single_memoryLevel_codec.Read(ref input);
            if (memoryLevel_ == null || value != 0) {
              MemoryLevel = value;
            }
            break;
          }
          case 24: {
            CompressionLevel = (global::Envoy.Extensions.Filters.Http.Gzip.V3.Gzip.Types.CompressionLevel.Types.Enum) input.ReadEnum();
            break;
          }
          case 32: {
            CompressionStrategy = (global::Envoy.Extensions.Filters.Http.Gzip.V3.Gzip.Types.CompressionStrategy) input.ReadEnum();
            break;
          }
          case 74: {
            uint? value = _single_windowBits_codec.Read(ref input);
            if (windowBits_ == null || value != 0) {
              WindowBits = value;
            }
            break;
          }
          case 82: {
            if (compressor_ == null) {
              Compressor = new global::Envoy.Extensions.Filters.Http.Compressor.V3.Compressor();
            }
            input.ReadMessage(Compressor);
            break;
          }
          case 90: {
            uint? value = _single_chunkSize_codec.Read(ref input);
            if (chunkSize_ == null || value != 0) {
              ChunkSize = value;
            }
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Gzip message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum CompressionStrategy {
        [pbr::OriginalName("DEFAULT")] Default = 0,
        [pbr::OriginalName("FILTERED")] Filtered = 1,
        [pbr::OriginalName("HUFFMAN")] Huffman = 2,
        [pbr::OriginalName("RLE")] Rle = 3,
      }

      public sealed partial class CompressionLevel : pb::IMessage<CompressionLevel>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<CompressionLevel> _parser = new pb::MessageParser<CompressionLevel>(() => new CompressionLevel());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<CompressionLevel> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Envoy.Extensions.Filters.Http.Gzip.V3.Gzip.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public CompressionLevel() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public CompressionLevel(CompressionLevel other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public CompressionLevel Clone() {
          return new CompressionLevel(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as CompressionLevel);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(CompressionLevel other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(CompressionLevel other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the CompressionLevel message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static partial class Types {
          public enum Enum {
            [pbr::OriginalName("DEFAULT")] Default = 0,
            [pbr::OriginalName("BEST")] Best = 1,
            [pbr::OriginalName("SPEED")] Speed = 2,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
