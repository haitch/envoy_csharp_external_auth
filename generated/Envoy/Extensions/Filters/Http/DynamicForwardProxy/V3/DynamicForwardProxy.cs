// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/extensions/filters/http/dynamic_forward_proxy/v3/dynamic_forward_proxy.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Extensions.Filters.Http.DynamicForwardProxy.V3 {

  /// <summary>Holder for reflection information generated from envoy/extensions/filters/http/dynamic_forward_proxy/v3/dynamic_forward_proxy.proto</summary>
  public static partial class DynamicForwardProxyReflection {

    #region Descriptor
    /// <summary>File descriptor for envoy/extensions/filters/http/dynamic_forward_proxy/v3/dynamic_forward_proxy.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DynamicForwardProxyReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ClJlbnZveS9leHRlbnNpb25zL2ZpbHRlcnMvaHR0cC9keW5hbWljX2Zvcndh",
            "cmRfcHJveHkvdjMvZHluYW1pY19mb3J3YXJkX3Byb3h5LnByb3RvEjZlbnZv",
            "eS5leHRlbnNpb25zLmZpbHRlcnMuaHR0cC5keW5hbWljX2ZvcndhcmRfcHJv",
            "eHkudjMaQGVudm95L2V4dGVuc2lvbnMvY29tbW9uL2R5bmFtaWNfZm9yd2Fy",
            "ZF9wcm94eS92My9kbnNfY2FjaGUucHJvdG8aHXVkcGEvYW5ub3RhdGlvbnMv",
            "c3RhdHVzLnByb3RvGiF1ZHBhL2Fubm90YXRpb25zL3ZlcnNpb25pbmcucHJv",
            "dG8aF3ZhbGlkYXRlL3ZhbGlkYXRlLnByb3RvIt8BCgxGaWx0ZXJDb25maWcS",
            "ZAoQZG5zX2NhY2hlX2NvbmZpZxgBIAEoCzJALmVudm95LmV4dGVuc2lvbnMu",
            "Y29tbW9uLmR5bmFtaWNfZm9yd2FyZF9wcm94eS52My5EbnNDYWNoZUNvbmZp",
            "Z0II+kIFigECEAESHQoVc2F2ZV91cHN0cmVhbV9hZGRyZXNzGAIgASgIOkqa",
            "xYgeRQpDZW52b3kuY29uZmlnLmZpbHRlci5odHRwLmR5bmFtaWNfZm9yd2Fy",
            "ZF9wcm94eS52MmFscGhhLkZpbHRlckNvbmZpZyK3AQoOUGVyUm91dGVDb25m",
            "aWcSHgoUaG9zdF9yZXdyaXRlX2xpdGVyYWwYASABKAlIABIdChNob3N0X3Jl",
            "d3JpdGVfaGVhZGVyGAIgASgJSAA6TJrFiB5HCkVlbnZveS5jb25maWcuZmls",
            "dGVyLmh0dHAuZHluYW1pY19mb3J3YXJkX3Byb3h5LnYyYWxwaGEuUGVyUm91",
            "dGVDb25maWdCGAoWaG9zdF9yZXdyaXRlX3NwZWNpZmllckJqCkRpby5lbnZv",
            "eXByb3h5LmVudm95LmV4dGVuc2lvbnMuZmlsdGVycy5odHRwLmR5bmFtaWNf",
            "Zm9yd2FyZF9wcm94eS52M0IYRHluYW1pY0ZvcndhcmRQcm94eVByb3RvUAG6",
            "gMjRBgIQAmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Envoy.Extensions.Common.DynamicForwardProxy.V3.DnsCacheReflection.Descriptor, global::Udpa.Annotations.StatusReflection.Descriptor, global::Udpa.Annotations.VersioningReflection.Descriptor, global::Validate.ValidateReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Extensions.Filters.Http.DynamicForwardProxy.V3.FilterConfig), global::Envoy.Extensions.Filters.Http.DynamicForwardProxy.V3.FilterConfig.Parser, new[]{ "DnsCacheConfig", "SaveUpstreamAddress" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Extensions.Filters.Http.DynamicForwardProxy.V3.PerRouteConfig), global::Envoy.Extensions.Filters.Http.DynamicForwardProxy.V3.PerRouteConfig.Parser, new[]{ "HostRewriteLiteral", "HostRewriteHeader" }, new[]{ "HostRewriteSpecifier" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Configuration for the dynamic forward proxy HTTP filter. See the :ref:`architecture overview
  /// &lt;arch_overview_http_dynamic_forward_proxy>` for more information.
  /// [#extension: envoy.filters.http.dynamic_forward_proxy]
  /// </summary>
  public sealed partial class FilterConfig : pb::IMessage<FilterConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FilterConfig> _parser = new pb::MessageParser<FilterConfig>(() => new FilterConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FilterConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Extensions.Filters.Http.DynamicForwardProxy.V3.DynamicForwardProxyReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FilterConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FilterConfig(FilterConfig other) : this() {
      dnsCacheConfig_ = other.dnsCacheConfig_ != null ? other.dnsCacheConfig_.Clone() : null;
      saveUpstreamAddress_ = other.saveUpstreamAddress_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FilterConfig Clone() {
      return new FilterConfig(this);
    }

    /// <summary>Field number for the "dns_cache_config" field.</summary>
    public const int DnsCacheConfigFieldNumber = 1;
    private global::Envoy.Extensions.Common.DynamicForwardProxy.V3.DnsCacheConfig dnsCacheConfig_;
    /// <summary>
    /// The DNS cache configuration that the filter will attach to. Note this configuration must
    /// match that of associated :ref:`dynamic forward proxy cluster configuration
    /// &lt;envoy_v3_api_field_extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig.dns_cache_config>`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Envoy.Extensions.Common.DynamicForwardProxy.V3.DnsCacheConfig DnsCacheConfig {
      get { return dnsCacheConfig_; }
      set {
        dnsCacheConfig_ = value;
      }
    }

    /// <summary>Field number for the "save_upstream_address" field.</summary>
    public const int SaveUpstreamAddressFieldNumber = 2;
    private bool saveUpstreamAddress_;
    /// <summary>
    /// When this flag is set, the filter will add the resolved upstream address in the filter
    /// state. The state should be saved with key
    /// `envoy.stream.upstream_address` (See
    /// :repo:`upstream_address.h&lt;source/common/stream_info/upstream_address.h>`).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SaveUpstreamAddress {
      get { return saveUpstreamAddress_; }
      set {
        saveUpstreamAddress_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FilterConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FilterConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DnsCacheConfig, other.DnsCacheConfig)) return false;
      if (SaveUpstreamAddress != other.SaveUpstreamAddress) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (dnsCacheConfig_ != null) hash ^= DnsCacheConfig.GetHashCode();
      if (SaveUpstreamAddress != false) hash ^= SaveUpstreamAddress.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (dnsCacheConfig_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DnsCacheConfig);
      }
      if (SaveUpstreamAddress != false) {
        output.WriteRawTag(16);
        output.WriteBool(SaveUpstreamAddress);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (dnsCacheConfig_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DnsCacheConfig);
      }
      if (SaveUpstreamAddress != false) {
        output.WriteRawTag(16);
        output.WriteBool(SaveUpstreamAddress);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (dnsCacheConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DnsCacheConfig);
      }
      if (SaveUpstreamAddress != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FilterConfig other) {
      if (other == null) {
        return;
      }
      if (other.dnsCacheConfig_ != null) {
        if (dnsCacheConfig_ == null) {
          DnsCacheConfig = new global::Envoy.Extensions.Common.DynamicForwardProxy.V3.DnsCacheConfig();
        }
        DnsCacheConfig.MergeFrom(other.DnsCacheConfig);
      }
      if (other.SaveUpstreamAddress != false) {
        SaveUpstreamAddress = other.SaveUpstreamAddress;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (dnsCacheConfig_ == null) {
              DnsCacheConfig = new global::Envoy.Extensions.Common.DynamicForwardProxy.V3.DnsCacheConfig();
            }
            input.ReadMessage(DnsCacheConfig);
            break;
          }
          case 16: {
            SaveUpstreamAddress = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (dnsCacheConfig_ == null) {
              DnsCacheConfig = new global::Envoy.Extensions.Common.DynamicForwardProxy.V3.DnsCacheConfig();
            }
            input.ReadMessage(DnsCacheConfig);
            break;
          }
          case 16: {
            SaveUpstreamAddress = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Per route Configuration for the dynamic forward proxy HTTP filter.
  /// </summary>
  public sealed partial class PerRouteConfig : pb::IMessage<PerRouteConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PerRouteConfig> _parser = new pb::MessageParser<PerRouteConfig>(() => new PerRouteConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PerRouteConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Extensions.Filters.Http.DynamicForwardProxy.V3.DynamicForwardProxyReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PerRouteConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PerRouteConfig(PerRouteConfig other) : this() {
      switch (other.HostRewriteSpecifierCase) {
        case HostRewriteSpecifierOneofCase.HostRewriteLiteral:
          HostRewriteLiteral = other.HostRewriteLiteral;
          break;
        case HostRewriteSpecifierOneofCase.HostRewriteHeader:
          HostRewriteHeader = other.HostRewriteHeader;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PerRouteConfig Clone() {
      return new PerRouteConfig(this);
    }

    /// <summary>Field number for the "host_rewrite_literal" field.</summary>
    public const int HostRewriteLiteralFieldNumber = 1;
    /// <summary>
    /// Indicates that before DNS lookup, the host header will be swapped with
    /// this value. If not set or empty, the original host header value
    /// will be used and no rewrite will happen.
    ///
    /// Note: this rewrite affects both DNS lookup and host header forwarding. However, this
    /// option shouldn't be used with
    /// :ref:`HCM host rewrite &lt;envoy_v3_api_field_config.route.v3.RouteAction.host_rewrite_literal>` given that the
    /// value set here would be used for DNS lookups whereas the value set in the HCM would be used
    /// for host header forwarding which is not the desired outcome.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string HostRewriteLiteral {
      get { return hostRewriteSpecifierCase_ == HostRewriteSpecifierOneofCase.HostRewriteLiteral ? (string) hostRewriteSpecifier_ : ""; }
      set {
        hostRewriteSpecifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        hostRewriteSpecifierCase_ = HostRewriteSpecifierOneofCase.HostRewriteLiteral;
      }
    }

    /// <summary>Field number for the "host_rewrite_header" field.</summary>
    public const int HostRewriteHeaderFieldNumber = 2;
    /// <summary>
    /// Indicates that before DNS lookup, the host header will be swapped with
    /// the value of this header. If not set or empty, the original host header
    /// value will be used and no rewrite will happen.
    ///
    /// Note: this rewrite affects both DNS lookup and host header forwarding. However, this
    /// option shouldn't be used with
    /// :ref:`HCM host rewrite header &lt;envoy_v3_api_field_config.route.v3.RouteAction.auto_host_rewrite>`
    /// given that the value set here would be used for DNS lookups whereas the value set in the HCM
    /// would be used for host header forwarding which is not the desired outcome.
    ///
    /// .. note::
    ///
    ///   If the header appears multiple times only the first value is used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string HostRewriteHeader {
      get { return hostRewriteSpecifierCase_ == HostRewriteSpecifierOneofCase.HostRewriteHeader ? (string) hostRewriteSpecifier_ : ""; }
      set {
        hostRewriteSpecifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        hostRewriteSpecifierCase_ = HostRewriteSpecifierOneofCase.HostRewriteHeader;
      }
    }

    private object hostRewriteSpecifier_;
    /// <summary>Enum of possible cases for the "host_rewrite_specifier" oneof.</summary>
    public enum HostRewriteSpecifierOneofCase {
      None = 0,
      HostRewriteLiteral = 1,
      HostRewriteHeader = 2,
    }
    private HostRewriteSpecifierOneofCase hostRewriteSpecifierCase_ = HostRewriteSpecifierOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HostRewriteSpecifierOneofCase HostRewriteSpecifierCase {
      get { return hostRewriteSpecifierCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHostRewriteSpecifier() {
      hostRewriteSpecifierCase_ = HostRewriteSpecifierOneofCase.None;
      hostRewriteSpecifier_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PerRouteConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PerRouteConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HostRewriteLiteral != other.HostRewriteLiteral) return false;
      if (HostRewriteHeader != other.HostRewriteHeader) return false;
      if (HostRewriteSpecifierCase != other.HostRewriteSpecifierCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (hostRewriteSpecifierCase_ == HostRewriteSpecifierOneofCase.HostRewriteLiteral) hash ^= HostRewriteLiteral.GetHashCode();
      if (hostRewriteSpecifierCase_ == HostRewriteSpecifierOneofCase.HostRewriteHeader) hash ^= HostRewriteHeader.GetHashCode();
      hash ^= (int) hostRewriteSpecifierCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (hostRewriteSpecifierCase_ == HostRewriteSpecifierOneofCase.HostRewriteLiteral) {
        output.WriteRawTag(10);
        output.WriteString(HostRewriteLiteral);
      }
      if (hostRewriteSpecifierCase_ == HostRewriteSpecifierOneofCase.HostRewriteHeader) {
        output.WriteRawTag(18);
        output.WriteString(HostRewriteHeader);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (hostRewriteSpecifierCase_ == HostRewriteSpecifierOneofCase.HostRewriteLiteral) {
        output.WriteRawTag(10);
        output.WriteString(HostRewriteLiteral);
      }
      if (hostRewriteSpecifierCase_ == HostRewriteSpecifierOneofCase.HostRewriteHeader) {
        output.WriteRawTag(18);
        output.WriteString(HostRewriteHeader);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (hostRewriteSpecifierCase_ == HostRewriteSpecifierOneofCase.HostRewriteLiteral) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HostRewriteLiteral);
      }
      if (hostRewriteSpecifierCase_ == HostRewriteSpecifierOneofCase.HostRewriteHeader) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HostRewriteHeader);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PerRouteConfig other) {
      if (other == null) {
        return;
      }
      switch (other.HostRewriteSpecifierCase) {
        case HostRewriteSpecifierOneofCase.HostRewriteLiteral:
          HostRewriteLiteral = other.HostRewriteLiteral;
          break;
        case HostRewriteSpecifierOneofCase.HostRewriteHeader:
          HostRewriteHeader = other.HostRewriteHeader;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            HostRewriteLiteral = input.ReadString();
            break;
          }
          case 18: {
            HostRewriteHeader = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            HostRewriteLiteral = input.ReadString();
            break;
          }
          case 18: {
            HostRewriteHeader = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
